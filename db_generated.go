// generated by dbgen ; DO NOT EDIT

package main

import (
	"time"
)

//
// found DBObject generator
//
func (o found) NewObj() interface{} {
	return new(found)
}

//
// found DBObject interface functions
//
func (o *found) InsertValues() []interface{} {
	return []interface{}{o.Kind, o.Name, o.Note, o.ID}
}

func (o *found) UpdateValues() []interface{} {
	return []interface{}{o.Kind, o.Name, o.Note, o.ID}
}

func (o *found) MemberPointers() []interface{} {
	return []interface{}{&o.Kind, &o.Name, &o.Note, &o.ID}
}

func (o *found) Key() int64 {
	return 0
}

func (o *found) SetID(id int64) {
}

func (o *found) TableName() string {
	return ""
}

func (o *found) SelectFields() string {
	return "kind,name,note,id"
}

func (o *found) InsertFields() string {
	return "kind,name,note,id"
}

func (o *found) KeyField() string {
	return ""
}

func (o *found) KeyName() string {
	return ""
}

func (o *found) Names() []string {
	return []string{"Kind", "Name", "Note", "ID"}
}

func (o *found) ModifiedBy(user int64, t time.Time) {
}

//
// summary DBObject generator
//
func (o summary) NewObj() interface{} {
	return new(summary)
}

//
// summary DBObject interface functions
//
func (o *summary) InsertValues() []interface{} {
	return []interface{}{o.Site, o.Servers, o.VMs}
}

func (o *summary) UpdateValues() []interface{} {
	return []interface{}{o.Site, o.Servers, o.VMs, o.ID}
}

func (o *summary) MemberPointers() []interface{} {
	return []interface{}{&o.ID, &o.Site, &o.Servers, &o.VMs}
}

func (o *summary) Key() int64 {
	return o.ID
}

func (o *summary) SetID(id int64) {
	o.ID = id
}

func (o *summary) TableName() string {
	return "summary"
}

func (o *summary) SelectFields() string {
	return "sti,site,servers,vms"
}

func (o *summary) InsertFields() string {
	return "sti,site,servers,vms"
}

func (o *summary) KeyField() string {
	return "sti"
}

func (o *summary) KeyName() string {
	return "ID"
}

func (o *summary) Names() []string {
	return []string{"Site", "Servers", "VMs"}
}

func (o *summary) ModifiedBy(user int64, t time.Time) {
}

//
// user DBObject generator
//
func (o user) NewObj() interface{} {
	return new(user)
}

//
// user DBObject interface functions
//
func (o *user) InsertValues() []interface{} {
	return []interface{}{o.Local, o.Email, o.First, o.Last, o.APIKey, o.Level}
}

func (o *user) UpdateValues() []interface{} {
	return []interface{}{o.Local, o.Email, o.First, o.Last, o.APIKey, o.Level, o.USR}
}

func (o *user) MemberPointers() []interface{} {
	return []interface{}{&o.USR, &o.Local, &o.Email, &o.First, &o.Last, &o.APIKey, &o.Level}
}

func (o *user) Key() int64 {
	return o.USR
}

func (o *user) SetID(id int64) {
	o.USR = id
}

func (o *user) TableName() string {
	return "users_view"
}

func (o *user) SelectFields() string {
	return "usr,local,email,firstname,lastname,apikey,admin"
}

func (o *user) InsertFields() string {
	return "usr,local,email,firstname,lastname,apikey,admin"
}

func (o *user) KeyField() string {
	return "usr"
}

func (o *user) KeyName() string {
	return "USR"
}

func (o *user) Names() []string {
	return []string{"Local", "Email", "First", "Last", "APIKey", "Level"}
}

func (o *user) ModifiedBy(user int64, t time.Time) {
}

//
// fullUser DBObject generator
//
func (o fullUser) NewObj() interface{} {
	return new(fullUser)
}

//
// fullUser DBObject interface functions
//
func (o *fullUser) InsertValues() []interface{} {
	return []interface{}{o.Salt, o.Level, o.Local, o.Email, o.First, o.Last, o.APIKey, o.Password}
}

func (o *fullUser) UpdateValues() []interface{} {
	return []interface{}{o.Salt, o.Level, o.Local, o.Email, o.First, o.Last, o.APIKey, o.Password, o.USR}
}

func (o *fullUser) MemberPointers() []interface{} {
	return []interface{}{&o.USR, &o.Salt, &o.Level, &o.Local, &o.Email, &o.First, &o.Last, &o.APIKey, &o.Password}
}

func (o *fullUser) Key() int64 {
	return o.USR
}

func (o *fullUser) SetID(id int64) {
	o.USR = id
}

func (o *fullUser) TableName() string {
	return "users"
}

func (o *fullUser) SelectFields() string {
	return "usr,pw_salt,admin,local,email,firstname,lastname,apikey,pw_hash"
}

func (o *fullUser) InsertFields() string {
	return "usr,pw_salt,admin,local,email,firstname,lastname,apikey,pw_hash"
}

func (o *fullUser) KeyField() string {
	return "usr"
}

func (o *fullUser) KeyName() string {
	return "USR"
}

func (o *fullUser) Names() []string {
	return []string{"Salt", "Level", "Local", "Email", "First", "Last", "APIKey", "Password"}
}

func (o *fullUser) ModifiedBy(user int64, t time.Time) {
}

//
// session DBObject generator
//
func (o session) NewObj() interface{} {
	return new(session)
}

//
// session DBObject interface functions
//
func (o *session) InsertValues() []interface{} {
	return []interface{}{o.Event, o.Remote, o.USR, o.TS}
}

func (o *session) UpdateValues() []interface{} {
	return []interface{}{o.Event, o.Remote, o.USR, o.TS, o.SSI}
}

func (o *session) MemberPointers() []interface{} {
	return []interface{}{&o.SSI, &o.Event, &o.Remote, &o.USR, &o.TS}
}

func (o *session) Key() int64 {
	return o.SSI
}

func (o *session) SetID(id int64) {
	o.SSI = id
}

func (o *session) TableName() string {
	return "sessions"
}

func (o *session) SelectFields() string {
	return "ssi,event,remote_addr,usr,ts"
}

func (o *session) InsertFields() string {
	return "ssi,event,remote_addr,usr,ts"
}

func (o *session) KeyField() string {
	return "ssi"
}

func (o *session) KeyName() string {
	return "SSI"
}

func (o *session) Names() []string {
	return []string{"Event", "Remote", "USR", "TS"}
}

func (o *session) ModifiedBy(user int64, t time.Time) {
}

//
// sessionView DBObject generator
//
func (o sessionView) NewObj() interface{} {
	return new(sessionView)
}

//
// sessionView DBObject interface functions
//
func (o *sessionView) InsertValues() []interface{} {
	return []interface{}{o.Remote, o.USR, o.TS, o.Login, o.Event}
}

func (o *sessionView) UpdateValues() []interface{} {
	return []interface{}{o.Remote, o.USR, o.TS, o.Login, o.Event, o.SSI}
}

func (o *sessionView) MemberPointers() []interface{} {
	return []interface{}{&o.SSI, &o.Remote, &o.USR, &o.TS, &o.Login, &o.Event}
}

func (o *sessionView) Key() int64 {
	return o.SSI
}

func (o *sessionView) SetID(id int64) {
	o.SSI = id
}

func (o *sessionView) TableName() string {
	return "sessions_view"
}

func (o *sessionView) SelectFields() string {
	return "ssi,remote_addr,usr,ts,login,event"
}

func (o *sessionView) InsertFields() string {
	return "ssi,remote_addr,usr,ts,login,event"
}

func (o *sessionView) KeyField() string {
	return "ssi"
}

func (o *sessionView) KeyName() string {
	return "SSI"
}

func (o *sessionView) Names() []string {
	return []string{"Remote", "USR", "TS", "Login", "Event"}
}

func (o *sessionView) ModifiedBy(user int64, t time.Time) {
}

//
// vendor DBObject generator
//
func (o vendor) NewObj() interface{} {
	return new(vendor)
}

//
// vendor DBObject interface functions
//
func (o *vendor) InsertValues() []interface{} {
	return []interface{}{o.City, o.State, o.Postal, o.Note, o.Name, o.WWW, o.Country, o.USR, o.TS, o.Phone, o.Address}
}

func (o *vendor) UpdateValues() []interface{} {
	return []interface{}{o.City, o.State, o.Postal, o.Note, o.Name, o.WWW, o.Country, o.USR, o.TS, o.Phone, o.Address, o.VID}
}

func (o *vendor) MemberPointers() []interface{} {
	return []interface{}{&o.VID, &o.City, &o.State, &o.Postal, &o.Note, &o.Name, &o.WWW, &o.Country, &o.USR, &o.TS, &o.Phone, &o.Address}
}

func (o *vendor) Key() int64 {
	return o.VID
}

func (o *vendor) SetID(id int64) {
	o.VID = id
}

func (o *vendor) TableName() string {
	return "vendors"
}

func (o *vendor) SelectFields() string {
	return "vid,city,state,postal,note,name,www,country,usr,ts,phone,address"
}

func (o *vendor) InsertFields() string {
	return "vid,city,state,postal,note,name,www,country,usr,ts,phone,address"
}

func (o *vendor) KeyField() string {
	return "vid"
}

func (o *vendor) KeyName() string {
	return "VID"
}

func (o *vendor) Names() []string {
	return []string{"City", "State", "Postal", "Note", "Name", "WWW", "Country", "USR", "TS", "Phone", "Address"}
}

func (o *vendor) ModifiedBy(user int64, t time.Time) {
	o.USR = &user
	o.TS = t
}

//
// ipType DBObject generator
//
func (o ipType) NewObj() interface{} {
	return new(ipType)
}

//
// ipType DBObject interface functions
//
func (o *ipType) InsertValues() []interface{} {
	return []interface{}{o.Name, o.Mgmt, o.Multi}
}

func (o *ipType) UpdateValues() []interface{} {
	return []interface{}{o.Name, o.Mgmt, o.Multi, o.IPT}
}

func (o *ipType) MemberPointers() []interface{} {
	return []interface{}{&o.IPT, &o.Name, &o.Mgmt, &o.Multi}
}

func (o *ipType) Key() int64 {
	return o.IPT
}

func (o *ipType) SetID(id int64) {
	o.IPT = id
}

func (o *ipType) TableName() string {
	return "ip_types"
}

func (o *ipType) SelectFields() string {
	return "ipt,name,mgmt,multi"
}

func (o *ipType) InsertFields() string {
	return "ipt,name,mgmt,multi"
}

func (o *ipType) KeyField() string {
	return "ipt"
}

func (o *ipType) KeyName() string {
	return "IPT"
}

func (o *ipType) Names() []string {
	return []string{"Name", "Mgmt", "Multi"}
}

func (o *ipType) ModifiedBy(user int64, t time.Time) {
}

//
// rma DBObject generator
//
func (o rma) NewObj() interface{} {
	return new(rma)
}

//
// rma DBObject interface functions
//
func (o *rma) InsertValues() []interface{} {
	return []interface{}{o.RecvTrack, o.DCTicket, o.Created, o.STI, o.VendorRMA, o.Shipped, o.Closed, o.VID, o.OldPID, o.ShipTrack, o.Received, o.Note, o.USR, o.DID, o.NewPID, o.Jira, o.Receiving}
}

func (o *rma) UpdateValues() []interface{} {
	return []interface{}{o.RecvTrack, o.DCTicket, o.Created, o.STI, o.VendorRMA, o.Shipped, o.Closed, o.VID, o.OldPID, o.ShipTrack, o.Received, o.Note, o.USR, o.DID, o.NewPID, o.Jira, o.Receiving, o.RMD}
}

func (o *rma) MemberPointers() []interface{} {
	return []interface{}{&o.RMD, &o.RecvTrack, &o.DCTicket, &o.Created, &o.STI, &o.VendorRMA, &o.Shipped, &o.Closed, &o.VID, &o.OldPID, &o.ShipTrack, &o.Received, &o.Note, &o.USR, &o.DID, &o.NewPID, &o.Jira, &o.Receiving}
}

func (o *rma) Key() int64 {
	return o.RMD
}

func (o *rma) SetID(id int64) {
	o.RMD = id
}

func (o *rma) TableName() string {
	return "rmas"
}

func (o *rma) SelectFields() string {
	return "rmd,recv_tracking,dc_ticket,date_created,sti,vendor_rma,date_shipped,date_closed,vid,old_pid,ship_tracking,date_received,note,usr,did,new_pid,jira,dc_receiving"
}

func (o *rma) InsertFields() string {
	return "rmd,recv_tracking,dc_ticket,date_created,sti,vendor_rma,date_shipped,date_closed,vid,old_pid,ship_tracking,date_received,note,usr,did,new_pid,jira,dc_receiving"
}

func (o *rma) KeyField() string {
	return "rmd"
}

func (o *rma) KeyName() string {
	return "RMD"
}

func (o *rma) Names() []string {
	return []string{"RecvTrack", "DCTicket", "Created", "STI", "VendorRMA", "Shipped", "Closed", "VID", "OldPID", "ShipTrack", "Received", "Note", "USR", "DID", "NewPID", "Jira", "Receiving"}
}

func (o *rma) ModifiedBy(user int64, t time.Time) {
}

//
// rmaView DBObject generator
//
func (o rmaView) NewObj() interface{} {
	return new(rmaView)
}

//
// rmaView DBObject interface functions
//
func (o *rmaView) InsertValues() []interface{} {
	return []interface{}{o.NewPID, o.Description, o.Vendor, o.Site, o.PartNumber, o.Jira, o.RecvTrack, o.Closed, o.Created, o.USR, o.STI, o.PartSN, o.ShipTrack, o.Receiving, o.DID, o.VID, o.OldPID, o.Hostname, o.DeviceSN, o.VendorRMA, o.DCTicket, o.Note, o.Shipped, o.Received}
}

func (o *rmaView) UpdateValues() []interface{} {
	return []interface{}{o.NewPID, o.Description, o.Vendor, o.Site, o.PartNumber, o.Jira, o.RecvTrack, o.Closed, o.Created, o.USR, o.STI, o.PartSN, o.ShipTrack, o.Receiving, o.DID, o.VID, o.OldPID, o.Hostname, o.DeviceSN, o.VendorRMA, o.DCTicket, o.Note, o.Shipped, o.Received, o.RMD}
}

func (o *rmaView) MemberPointers() []interface{} {
	return []interface{}{&o.RMD, &o.NewPID, &o.Description, &o.Vendor, &o.Site, &o.PartNumber, &o.Jira, &o.RecvTrack, &o.Closed, &o.Created, &o.USR, &o.STI, &o.PartSN, &o.ShipTrack, &o.Receiving, &o.DID, &o.VID, &o.OldPID, &o.Hostname, &o.DeviceSN, &o.VendorRMA, &o.DCTicket, &o.Note, &o.Shipped, &o.Received}
}

func (o *rmaView) Key() int64 {
	return o.RMD
}

func (o *rmaView) SetID(id int64) {
	o.RMD = id
}

func (o *rmaView) TableName() string {
	return "rmas_view"
}

func (o *rmaView) SelectFields() string {
	return "rmd,new_pid,description,vendor,site,part_no,jira,recv_tracking,date_closed,date_created,usr,sti,part_sn,ship_tracking,dc_receiving,did,vid,old_pid,hostname,device_sn,vendor_rma,dc_ticket,note,date_shipped,date_received"
}

func (o *rmaView) InsertFields() string {
	return "rmd,new_pid,description,vendor,site,part_no,jira,recv_tracking,date_closed,date_created,usr,sti,part_sn,ship_tracking,dc_receiving,did,vid,old_pid,hostname,device_sn,vendor_rma,dc_ticket,note,date_shipped,date_received"
}

func (o *rmaView) KeyField() string {
	return "rmd"
}

func (o *rmaView) KeyName() string {
	return "RMD"
}

func (o *rmaView) Names() []string {
	return []string{"NewPID", "Description", "Vendor", "Site", "PartNumber", "Jira", "RecvTrack", "Closed", "Created", "USR", "STI", "PartSN", "ShipTrack", "Receiving", "DID", "VID", "OldPID", "Hostname", "DeviceSN", "VendorRMA", "DCTicket", "Note", "Shipped", "Received"}
}

func (o *rmaView) ModifiedBy(user int64, t time.Time) {
}

//
// manufacturer DBObject generator
//
func (o manufacturer) NewObj() interface{} {
	return new(manufacturer)
}

//
// manufacturer DBObject interface functions
//
func (o *manufacturer) InsertValues() []interface{} {
	return []interface{}{o.Name, o.Note, o.AKA, o.URL, o.USR, o.TS}
}

func (o *manufacturer) UpdateValues() []interface{} {
	return []interface{}{o.Name, o.Note, o.AKA, o.URL, o.USR, o.TS, o.MID}
}

func (o *manufacturer) MemberPointers() []interface{} {
	return []interface{}{&o.MID, &o.Name, &o.Note, &o.AKA, &o.URL, &o.USR, &o.TS}
}

func (o *manufacturer) Key() int64 {
	return o.MID
}

func (o *manufacturer) SetID(id int64) {
	o.MID = id
}

func (o *manufacturer) TableName() string {
	return "mfgrs"
}

func (o *manufacturer) SelectFields() string {
	return "mid,name,note,aka,url,usr,ts"
}

func (o *manufacturer) InsertFields() string {
	return "mid,name,note,aka,url,usr,ts"
}

func (o *manufacturer) KeyField() string {
	return "mid"
}

func (o *manufacturer) KeyName() string {
	return "MID"
}

func (o *manufacturer) Names() []string {
	return []string{"Name", "Note", "AKA", "URL", "USR", "TS"}
}

func (o *manufacturer) ModifiedBy(user int64, t time.Time) {
	o.USR = &user
	o.TS = t
}

//
// partType DBObject generator
//
func (o partType) NewObj() interface{} {
	return new(partType)
}

//
// partType DBObject interface functions
//
func (o *partType) InsertValues() []interface{} {
	return []interface{}{o.Name, o.USR, o.TS}
}

func (o *partType) UpdateValues() []interface{} {
	return []interface{}{o.Name, o.USR, o.TS, o.PTI}
}

func (o *partType) MemberPointers() []interface{} {
	return []interface{}{&o.PTI, &o.Name, &o.USR, &o.TS}
}

func (o *partType) Key() int64 {
	return o.PTI
}

func (o *partType) SetID(id int64) {
	o.PTI = id
}

func (o *partType) TableName() string {
	return "part_types"
}

func (o *partType) SelectFields() string {
	return "pti,name,usr,ts"
}

func (o *partType) InsertFields() string {
	return "pti,name,usr,ts"
}

func (o *partType) KeyField() string {
	return "pti"
}

func (o *partType) KeyName() string {
	return "PTI"
}

func (o *partType) Names() []string {
	return []string{"Name", "USR", "TS"}
}

func (o *partType) ModifiedBy(user int64, t time.Time) {
	o.USR = &user
	o.TS = t
}

//
// sku DBObject generator
//
func (o sku) NewObj() interface{} {
	return new(sku)
}

//
// sku DBObject interface functions
//
func (o *sku) InsertValues() []interface{} {
	return []interface{}{o.TS, o.MID, o.PTI, o.PartNumber, o.Description, o.SKU, o.USR}
}

func (o *sku) UpdateValues() []interface{} {
	return []interface{}{o.TS, o.MID, o.PTI, o.PartNumber, o.Description, o.SKU, o.USR, o.KID}
}

func (o *sku) MemberPointers() []interface{} {
	return []interface{}{&o.KID, &o.TS, &o.MID, &o.PTI, &o.PartNumber, &o.Description, &o.SKU, &o.USR}
}

func (o *sku) Key() int64 {
	return o.KID
}

func (o *sku) SetID(id int64) {
	o.KID = id
}

func (o *sku) TableName() string {
	return "skus"
}

func (o *sku) SelectFields() string {
	return "kid,ts,mid,pti,part_no,description,sku,usr"
}

func (o *sku) InsertFields() string {
	return "kid,ts,mid,pti,part_no,description,sku,usr"
}

func (o *sku) KeyField() string {
	return "kid"
}

func (o *sku) KeyName() string {
	return "KID"
}

func (o *sku) Names() []string {
	return []string{"TS", "MID", "PTI", "PartNumber", "Description", "SKU", "USR"}
}

func (o *sku) ModifiedBy(user int64, t time.Time) {
	o.USR = &user
	o.TS = t
}

//
// part DBObject generator
//
func (o part) NewObj() interface{} {
	return new(part)
}

//
// part DBObject interface functions
//
func (o *part) InsertValues() []interface{} {
	return []interface{}{o.Cents, o.USR, o.VID, o.DID, o.Location, o.Serial, o.AssetTag, o.Unused, o.KID, o.STI, o.Bad, o.TS}
}

func (o *part) UpdateValues() []interface{} {
	return []interface{}{o.Cents, o.USR, o.VID, o.DID, o.Location, o.Serial, o.AssetTag, o.Unused, o.KID, o.STI, o.Bad, o.TS, o.PID}
}

func (o *part) MemberPointers() []interface{} {
	return []interface{}{&o.PID, &o.Cents, &o.USR, &o.VID, &o.DID, &o.Location, &o.Serial, &o.AssetTag, &o.Unused, &o.KID, &o.STI, &o.Bad, &o.TS}
}

func (o *part) Key() int64 {
	return o.PID
}

func (o *part) SetID(id int64) {
	o.PID = id
}

func (o *part) TableName() string {
	return "parts"
}

func (o *part) SelectFields() string {
	return "pid,cents,usr,vid,did,location,serial_no,asset_tag,unused,kid,sti,bad,ts"
}

func (o *part) InsertFields() string {
	return "pid,cents,usr,vid,did,location,serial_no,asset_tag,unused,kid,sti,bad,ts"
}

func (o *part) KeyField() string {
	return "pid"
}

func (o *part) KeyName() string {
	return "PID"
}

func (o *part) Names() []string {
	return []string{"Cents", "USR", "VID", "DID", "Location", "Serial", "AssetTag", "Unused", "KID", "STI", "Bad", "TS"}
}

func (o *part) ModifiedBy(user int64, t time.Time) {
	o.USR = &user
	o.TS = t
}

//
// partView DBObject generator
//
func (o partView) NewObj() interface{} {
	return new(partView)
}

//
// partView DBObject interface functions
//
func (o *partView) InsertValues() []interface{} {
	return []interface{}{o.Location, o.PartNumber, o.Description, o.VID, o.STI, o.RMD, o.Site, o.Hostname, o.Mfgr, o.Bad, o.DID, o.DeviceSN, o.Serial, o.Cents, o.Price, o.Unused, o.KID, o.AssetTag, o.PartType, o.SKU, o.Vendor}
}

func (o *partView) UpdateValues() []interface{} {
	return []interface{}{o.Location, o.PartNumber, o.Description, o.VID, o.STI, o.RMD, o.Site, o.Hostname, o.Mfgr, o.Bad, o.DID, o.DeviceSN, o.Serial, o.Cents, o.Price, o.Unused, o.KID, o.AssetTag, o.PartType, o.SKU, o.Vendor, o.PID}
}

func (o *partView) MemberPointers() []interface{} {
	return []interface{}{&o.PID, &o.Location, &o.PartNumber, &o.Description, &o.VID, &o.STI, &o.RMD, &o.Site, &o.Hostname, &o.Mfgr, &o.Bad, &o.DID, &o.DeviceSN, &o.Serial, &o.Cents, &o.Price, &o.Unused, &o.KID, &o.AssetTag, &o.PartType, &o.SKU, &o.Vendor}
}

func (o *partView) Key() int64 {
	return o.PID
}

func (o *partView) SetID(id int64) {
	o.PID = id
}

func (o *partView) TableName() string {
	return "parts_view"
}

func (o *partView) SelectFields() string {
	return "pid,location,part_no,description,vid,sti,rmd,site,hostname,mfgr,bad,did,device_sn,serial_no,cents,price,unused,kid,asset_tag,part_type,sku,vendor"
}

func (o *partView) InsertFields() string {
	return "pid,location,part_no,description,vid,sti,rmd,site,hostname,mfgr,bad,did,device_sn,serial_no,cents,price,unused,kid,asset_tag,part_type,sku,vendor"
}

func (o *partView) KeyField() string {
	return "pid"
}

func (o *partView) KeyName() string {
	return "PID"
}

func (o *partView) Names() []string {
	return []string{"Location", "PartNumber", "Description", "VID", "STI", "RMD", "Site", "Hostname", "Mfgr", "Bad", "DID", "DeviceSN", "Serial", "Cents", "Price", "Unused", "KID", "AssetTag", "PartType", "SKU", "Vendor"}
}

func (o *partView) ModifiedBy(user int64, t time.Time) {
}

//
// site DBObject generator
//
func (o site) NewObj() interface{} {
	return new(site)
}

//
// site DBObject interface functions
//
func (o *site) InsertValues() []interface{} {
	return []interface{}{o.City, o.Postal, o.Country, o.Phone, o.Web, o.Note, o.USR, o.Name, o.Address, o.State, o.TS}
}

func (o *site) UpdateValues() []interface{} {
	return []interface{}{o.City, o.Postal, o.Country, o.Phone, o.Web, o.Note, o.USR, o.Name, o.Address, o.State, o.TS, o.STI}
}

func (o *site) MemberPointers() []interface{} {
	return []interface{}{&o.STI, &o.City, &o.Postal, &o.Country, &o.Phone, &o.Web, &o.Note, &o.USR, &o.Name, &o.Address, &o.State, &o.TS}
}

func (o *site) Key() int64 {
	return o.STI
}

func (o *site) SetID(id int64) {
	o.STI = id
}

func (o *site) TableName() string {
	return "sites"
}

func (o *site) SelectFields() string {
	return "sti,city,postal,country,phone,web,note,usr,name,address,state,ts"
}

func (o *site) InsertFields() string {
	return "sti,city,postal,country,phone,web,note,usr,name,address,state,ts"
}

func (o *site) KeyField() string {
	return "sti"
}

func (o *site) KeyName() string {
	return "STI"
}

func (o *site) Names() []string {
	return []string{"City", "Postal", "Country", "Phone", "Web", "Note", "USR", "Name", "Address", "State", "TS"}
}

func (o *site) ModifiedBy(user int64, t time.Time) {
	o.USR = &user
	o.TS = t
}

//
// tag DBObject generator
//
func (o tag) NewObj() interface{} {
	return new(tag)
}

//
// tag DBObject interface functions
//
func (o *tag) InsertValues() []interface{} {
	return []interface{}{o.Name}
}

func (o *tag) UpdateValues() []interface{} {
	return []interface{}{o.Name, o.TID}
}

func (o *tag) MemberPointers() []interface{} {
	return []interface{}{&o.TID, &o.Name}
}

func (o *tag) Key() int64 {
	return o.TID
}

func (o *tag) SetID(id int64) {
	o.TID = id
}

func (o *tag) TableName() string {
	return "tags"
}

func (o *tag) SelectFields() string {
	return "tid,tag"
}

func (o *tag) InsertFields() string {
	return "tid,tag"
}

func (o *tag) KeyField() string {
	return "tid"
}

func (o *tag) KeyName() string {
	return "TID"
}

func (o *tag) Names() []string {
	return []string{"Name"}
}

func (o *tag) ModifiedBy(user int64, t time.Time) {
}

//
// rack DBObject generator
//
func (o rack) NewObj() interface{} {
	return new(rack)
}

//
// rack DBObject interface functions
//
func (o *rack) InsertValues() []interface{} {
	return []interface{}{o.STI, o.Label, o.XPos, o.YPos, o.TS, o.RUs, o.VendorID, o.Note, o.USR}
}

func (o *rack) UpdateValues() []interface{} {
	return []interface{}{o.STI, o.Label, o.XPos, o.YPos, o.TS, o.RUs, o.VendorID, o.Note, o.USR, o.RID}
}

func (o *rack) MemberPointers() []interface{} {
	return []interface{}{&o.RID, &o.STI, &o.Label, &o.XPos, &o.YPos, &o.TS, &o.RUs, &o.VendorID, &o.Note, &o.USR}
}

func (o *rack) Key() int64 {
	return o.RID
}

func (o *rack) SetID(id int64) {
	o.RID = id
}

func (o *rack) TableName() string {
	return "racks"
}

func (o *rack) SelectFields() string {
	return "rid,sti,rack,x_pos,y_pos,ts,rackunits,vendor_id,note,usr"
}

func (o *rack) InsertFields() string {
	return "rid,sti,rack,x_pos,y_pos,ts,rackunits,vendor_id,note,usr"
}

func (o *rack) KeyField() string {
	return "rid"
}

func (o *rack) KeyName() string {
	return "RID"
}

func (o *rack) Names() []string {
	return []string{"STI", "Label", "XPos", "YPos", "TS", "RUs", "VendorID", "Note", "USR"}
}

func (o *rack) ModifiedBy(user int64, t time.Time) {
}

//
// rackView DBObject generator
//
func (o rackView) NewObj() interface{} {
	return new(rackView)
}

//
// rackView DBObject interface functions
//
func (o *rackView) InsertValues() []interface{} {
	return []interface{}{o.STI, o.USR, o.TS, o.RUs, o.Label, o.Site, o.VendorID, o.XPos, o.YPos, o.Note}
}

func (o *rackView) UpdateValues() []interface{} {
	return []interface{}{o.STI, o.USR, o.TS, o.RUs, o.Label, o.Site, o.VendorID, o.XPos, o.YPos, o.Note, o.RID}
}

func (o *rackView) MemberPointers() []interface{} {
	return []interface{}{&o.RID, &o.STI, &o.USR, &o.TS, &o.RUs, &o.Label, &o.Site, &o.VendorID, &o.XPos, &o.YPos, &o.Note}
}

func (o *rackView) Key() int64 {
	return o.RID
}

func (o *rackView) SetID(id int64) {
	o.RID = id
}

func (o *rackView) TableName() string {
	return "racks_view"
}

func (o *rackView) SelectFields() string {
	return "rid,sti,usr,ts,rackunits,rack,site,vendor_id,x_pos,y_pos,note"
}

func (o *rackView) InsertFields() string {
	return "rid,sti,usr,ts,rackunits,rack,site,vendor_id,x_pos,y_pos,note"
}

func (o *rackView) KeyField() string {
	return "rid"
}

func (o *rackView) KeyName() string {
	return "RID"
}

func (o *rackView) Names() []string {
	return []string{"STI", "USR", "TS", "RUs", "Label", "Site", "VendorID", "XPos", "YPos", "Note"}
}

func (o *rackView) ModifiedBy(user int64, t time.Time) {
}

//
// vm DBObject generator
//
func (o vm) NewObj() interface{} {
	return new(vm)
}

//
// vm DBObject interface functions
//
func (o *vm) InsertValues() []interface{} {
	return []interface{}{o.DID, o.Hostname, o.Profile, o.Note, o.USR, o.TS}
}

func (o *vm) UpdateValues() []interface{} {
	return []interface{}{o.DID, o.Hostname, o.Profile, o.Note, o.USR, o.TS, o.VMI}
}

func (o *vm) MemberPointers() []interface{} {
	return []interface{}{&o.VMI, &o.DID, &o.Hostname, &o.Profile, &o.Note, &o.USR, &o.TS}
}

func (o *vm) Key() int64 {
	return o.VMI
}

func (o *vm) SetID(id int64) {
	o.VMI = id
}

func (o *vm) TableName() string {
	return "vms"
}

func (o *vm) SelectFields() string {
	return "vmi,did,hostname,profile,note,usr,ts"
}

func (o *vm) InsertFields() string {
	return "vmi,did,hostname,profile,note,usr,ts"
}

func (o *vm) KeyField() string {
	return "vmi"
}

func (o *vm) KeyName() string {
	return "VMI"
}

func (o *vm) Names() []string {
	return []string{"DID", "Hostname", "Profile", "Note", "USR", "TS"}
}

func (o *vm) ModifiedBy(user int64, t time.Time) {
	o.USR = &user
	o.TS = t
}

//
// vmView DBObject generator
//
func (o vmView) NewObj() interface{} {
	return new(vmView)
}

//
// vmView DBObject interface functions
//
func (o *vmView) InsertValues() []interface{} {
	return []interface{}{o.DID, o.Server, o.Hostname, o.Profile, o.Version, o.USR, o.RID, o.STI, o.Rack, o.Site, o.Note, o.TS}
}

func (o *vmView) UpdateValues() []interface{} {
	return []interface{}{o.DID, o.Server, o.Hostname, o.Profile, o.Version, o.USR, o.RID, o.STI, o.Rack, o.Site, o.Note, o.TS, o.VMI}
}

func (o *vmView) MemberPointers() []interface{} {
	return []interface{}{&o.VMI, &o.DID, &o.Server, &o.Hostname, &o.Profile, &o.Version, &o.USR, &o.RID, &o.STI, &o.Rack, &o.Site, &o.Note, &o.TS}
}

func (o *vmView) Key() int64 {
	return o.VMI
}

func (o *vmView) SetID(id int64) {
	o.VMI = id
}

func (o *vmView) TableName() string {
	return "vms_view"
}

func (o *vmView) SelectFields() string {
	return "vmi,did,server,hostname,profile,version,usr,rid,sti,rack,site,note,ts"
}

func (o *vmView) InsertFields() string {
	return "vmi,did,server,hostname,profile,version,usr,rid,sti,rack,site,note,ts"
}

func (o *vmView) KeyField() string {
	return "vmi"
}

func (o *vmView) KeyName() string {
	return "VMI"
}

func (o *vmView) Names() []string {
	return []string{"DID", "Server", "Hostname", "Profile", "Version", "USR", "RID", "STI", "Rack", "Site", "Note", "TS"}
}

func (o *vmView) ModifiedBy(user int64, t time.Time) {
	o.USR = &user
	o.TS = t
}

//
// vmIPs DBObject generator
//
func (o vmIPs) NewObj() interface{} {
	return new(vmIPs)
}

//
// vmIPs DBObject interface functions
//
func (o *vmIPs) InsertValues() []interface{} {
	return []interface{}{o.RU, o.Site, o.Server, o.Hostname, o.Profile, o.USR, o.TS, o.DID, o.RID, o.STI, o.Rack, o.Note, o.IPs}
}

func (o *vmIPs) UpdateValues() []interface{} {
	return []interface{}{o.RU, o.Site, o.Server, o.Hostname, o.Profile, o.USR, o.TS, o.DID, o.RID, o.STI, o.Rack, o.Note, o.IPs, o.VMI}
}

func (o *vmIPs) MemberPointers() []interface{} {
	return []interface{}{&o.VMI, &o.RU, &o.Site, &o.Server, &o.Hostname, &o.Profile, &o.USR, &o.TS, &o.DID, &o.RID, &o.STI, &o.Rack, &o.Note, &o.IPs}
}

func (o *vmIPs) Key() int64 {
	return o.VMI
}

func (o *vmIPs) SetID(id int64) {
	o.VMI = id
}

func (o *vmIPs) TableName() string {
	return "vms_list"
}

func (o *vmIPs) SelectFields() string {
	return "vmi,ru,site,server,hostname,profile,usr,ts,did,rid,sti,rack,note,ips"
}

func (o *vmIPs) InsertFields() string {
	return "vmi,ru,site,server,hostname,profile,usr,ts,did,rid,sti,rack,note,ips"
}

func (o *vmIPs) KeyField() string {
	return "vmi"
}

func (o *vmIPs) KeyName() string {
	return "VMI"
}

func (o *vmIPs) Names() []string {
	return []string{"RU", "Site", "Server", "Hostname", "Profile", "USR", "TS", "DID", "RID", "STI", "Rack", "Note", "IPs"}
}

func (o *vmIPs) ModifiedBy(user int64, t time.Time) {
}

//
// vmHistory DBObject generator
//
func (o vmHistory) NewObj() interface{} {
	return new(vmHistory)
}

//
// vmHistory DBObject interface functions
//
func (o *vmHistory) InsertValues() []interface{} {
	return []interface{}{o.Rack, o.Site, o.Profile, o.Login, o.Version, o.TS, o.DID, o.STI, o.Server, o.Hostname, o.Note, o.USR, o.RID}
}

func (o *vmHistory) UpdateValues() []interface{} {
	return []interface{}{o.Rack, o.Site, o.Profile, o.Login, o.Version, o.TS, o.DID, o.STI, o.Server, o.Hostname, o.Note, o.USR, o.RID, o.VMI}
}

func (o *vmHistory) MemberPointers() []interface{} {
	return []interface{}{&o.VMI, &o.Rack, &o.Site, &o.Profile, &o.Login, &o.Version, &o.TS, &o.DID, &o.STI, &o.Server, &o.Hostname, &o.Note, &o.USR, &o.RID}
}

func (o *vmHistory) Key() int64 {
	return o.VMI
}

func (o *vmHistory) SetID(id int64) {
	o.VMI = id
}

func (o *vmHistory) TableName() string {
	return "vms_history"
}

func (o *vmHistory) SelectFields() string {
	return "vmi,rack,site,profile,login,version,ts,did,sti,server,hostname,note,usr,rid"
}

func (o *vmHistory) InsertFields() string {
	return "vmi,rack,site,profile,login,version,ts,did,sti,server,hostname,note,usr,rid"
}

func (o *vmHistory) KeyField() string {
	return "vmi"
}

func (o *vmHistory) KeyName() string {
	return "VMI"
}

func (o *vmHistory) Names() []string {
	return []string{"Rack", "Site", "Profile", "Login", "Version", "TS", "DID", "STI", "Server", "Hostname", "Note", "USR", "RID"}
}

func (o *vmHistory) ModifiedBy(user int64, t time.Time) {
}

//
// inventory DBObject generator
//
func (o inventory) NewObj() interface{} {
	return new(inventory)
}

//
// inventory DBObject interface functions
//
func (o *inventory) InsertValues() []interface{} {
	return []interface{}{o.PartNumber, o.PartType, o.Price, o.KID, o.PTI, o.Qty, o.Site, o.Mfgr, o.Description, o.Cents}
}

func (o *inventory) UpdateValues() []interface{} {
	return []interface{}{o.PartNumber, o.PartType, o.Price, o.KID, o.PTI, o.Qty, o.Site, o.Mfgr, o.Description, o.Cents, o.STI}
}

func (o *inventory) MemberPointers() []interface{} {
	return []interface{}{&o.STI, &o.PartNumber, &o.PartType, &o.Price, &o.KID, &o.PTI, &o.Qty, &o.Site, &o.Mfgr, &o.Description, &o.Cents}
}

func (o *inventory) Key() int64 {
	return o.STI
}

func (o *inventory) SetID(id int64) {
	o.STI = id
}

func (o *inventory) TableName() string {
	return "inventory"
}

func (o *inventory) SelectFields() string {
	return "sti,part_no,part_type,price,kid,pti,qty,site,mfgr,description,cents"
}

func (o *inventory) InsertFields() string {
	return "sti,part_no,part_type,price,kid,pti,qty,site,mfgr,description,cents"
}

func (o *inventory) KeyField() string {
	return "sti"
}

func (o *inventory) KeyName() string {
	return "STI"
}

func (o *inventory) Names() []string {
	return []string{"PartNumber", "PartType", "Price", "KID", "PTI", "Qty", "Site", "Mfgr", "Description", "Cents"}
}

func (o *inventory) ModifiedBy(user int64, t time.Time) {
}

//
// contract DBObject generator
//
func (o contract) NewObj() interface{} {
	return new(contract)
}

//
// contract DBObject interface functions
//
func (o *contract) InsertValues() []interface{} {
	return []interface{}{o.VID, o.Policy, o.Phone}
}

func (o *contract) UpdateValues() []interface{} {
	return []interface{}{o.VID, o.Policy, o.Phone, o.CID}
}

func (o *contract) MemberPointers() []interface{} {
	return []interface{}{&o.CID, &o.VID, &o.Policy, &o.Phone}
}

func (o *contract) Key() int64 {
	return o.CID
}

func (o *contract) SetID(id int64) {
	o.CID = id
}

func (o *contract) TableName() string {
	return "contracts"
}

func (o *contract) SelectFields() string {
	return "cid,vid,policy,phone"
}

func (o *contract) InsertFields() string {
	return "cid,vid,policy,phone"
}

func (o *contract) KeyField() string {
	return "cid"
}

func (o *contract) KeyName() string {
	return "CID"
}

func (o *contract) Names() []string {
	return []string{"VID", "Policy", "Phone"}
}

func (o *contract) ModifiedBy(user int64, t time.Time) {
}

//
// deviceType DBObject generator
//
func (o deviceType) NewObj() interface{} {
	return new(deviceType)
}

//
// deviceType DBObject interface functions
//
func (o *deviceType) InsertValues() []interface{} {
	return []interface{}{o.Name}
}

func (o *deviceType) UpdateValues() []interface{} {
	return []interface{}{o.Name, o.DTI}
}

func (o *deviceType) MemberPointers() []interface{} {
	return []interface{}{&o.DTI, &o.Name}
}

func (o *deviceType) Key() int64 {
	return o.DTI
}

func (o *deviceType) SetID(id int64) {
	o.DTI = id
}

func (o *deviceType) TableName() string {
	return "device_types"
}

func (o *deviceType) SelectFields() string {
	return "dti,name"
}

func (o *deviceType) InsertFields() string {
	return "dti,name"
}

func (o *deviceType) KeyField() string {
	return "dti"
}

func (o *deviceType) KeyName() string {
	return "DTI"
}

func (o *deviceType) Names() []string {
	return []string{"Name"}
}

func (o *deviceType) ModifiedBy(user int64, t time.Time) {
}

//
// device DBObject generator
//
func (o device) NewObj() interface{} {
	return new(device)
}

//
// device DBObject interface functions
//
func (o *device) InsertValues() []interface{} {
	return []interface{}{o.RID, o.MID, o.Hostname, o.Model, o.Height, o.SerialNo, o.TID, o.Profile, o.Assigned, o.Note, o.TS, o.DTI, o.RU, o.Alias, o.AssetTag, o.USR}
}

func (o *device) UpdateValues() []interface{} {
	return []interface{}{o.RID, o.MID, o.Hostname, o.Model, o.Height, o.SerialNo, o.TID, o.Profile, o.Assigned, o.Note, o.TS, o.DTI, o.RU, o.Alias, o.AssetTag, o.USR, o.DID}
}

func (o *device) MemberPointers() []interface{} {
	return []interface{}{&o.DID, &o.RID, &o.MID, &o.Hostname, &o.Model, &o.Height, &o.SerialNo, &o.TID, &o.Profile, &o.Assigned, &o.Note, &o.TS, &o.DTI, &o.RU, &o.Alias, &o.AssetTag, &o.USR}
}

func (o *device) Key() int64 {
	return o.DID
}

func (o *device) SetID(id int64) {
	o.DID = id
}

func (o *device) TableName() string {
	return "devices"
}

func (o *device) SelectFields() string {
	return "did,rid,mid,hostname,model,height,sn,tid,profile,assigned,note,ts,dti,ru,alias,asset_tag,usr"
}

func (o *device) InsertFields() string {
	return "did,rid,mid,hostname,model,height,sn,tid,profile,assigned,note,ts,dti,ru,alias,asset_tag,usr"
}

func (o *device) KeyField() string {
	return "did"
}

func (o *device) KeyName() string {
	return "DID"
}

func (o *device) Names() []string {
	return []string{"RID", "MID", "Hostname", "Model", "Height", "SerialNo", "TID", "Profile", "Assigned", "Note", "TS", "DTI", "RU", "Alias", "AssetTag", "USR"}
}

func (o *device) ModifiedBy(user int64, t time.Time) {
	o.USR = &user
	o.TS = t
}

//
// deviceView DBObject generator
//
func (o deviceView) NewObj() interface{} {
	return new(deviceView)
}

//
// deviceView DBObject interface functions
//
func (o *deviceView) InsertValues() []interface{} {
	return []interface{}{o.USR, o.DTI, o.Rack, o.Height, o.Model, o.Profile, o.Assigned, o.Version, o.TS, o.RID, o.Hostname, o.Type, o.STI, o.MID, o.TID, o.Alias, o.Make, o.SerialNo, o.Site, o.RU, o.AssetTag, o.Note, o.Tag}
}

func (o *deviceView) UpdateValues() []interface{} {
	return []interface{}{o.USR, o.DTI, o.Rack, o.Height, o.Model, o.Profile, o.Assigned, o.Version, o.TS, o.RID, o.Hostname, o.Type, o.STI, o.MID, o.TID, o.Alias, o.Make, o.SerialNo, o.Site, o.RU, o.AssetTag, o.Note, o.Tag, o.DID}
}

func (o *deviceView) MemberPointers() []interface{} {
	return []interface{}{&o.DID, &o.USR, &o.DTI, &o.Rack, &o.Height, &o.Model, &o.Profile, &o.Assigned, &o.Version, &o.TS, &o.RID, &o.Hostname, &o.Type, &o.STI, &o.MID, &o.TID, &o.Alias, &o.Make, &o.SerialNo, &o.Site, &o.RU, &o.AssetTag, &o.Note, &o.Tag}
}

func (o *deviceView) Key() int64 {
	return o.DID
}

func (o *deviceView) SetID(id int64) {
	o.DID = id
}

func (o *deviceView) TableName() string {
	return "devices_view"
}

func (o *deviceView) SelectFields() string {
	return "did,usr,dti,rack,height,model,profile,assigned,version,ts,rid,hostname,devtype,sti,mid,tid,alias,make,sn,site,ru,asset_tag,note,tag"
}

func (o *deviceView) InsertFields() string {
	return "did,usr,dti,rack,height,model,profile,assigned,version,ts,rid,hostname,devtype,sti,mid,tid,alias,make,sn,site,ru,asset_tag,note,tag"
}

func (o *deviceView) KeyField() string {
	return "did"
}

func (o *deviceView) KeyName() string {
	return "DID"
}

func (o *deviceView) Names() []string {
	return []string{"USR", "DTI", "Rack", "Height", "Model", "Profile", "Assigned", "Version", "TS", "RID", "Hostname", "Type", "STI", "MID", "TID", "Alias", "Make", "SerialNo", "Site", "RU", "AssetTag", "Note", "Tag"}
}

func (o *deviceView) ModifiedBy(user int64, t time.Time) {
	o.USR = &user
	o.TS = t
}

//
// deviceHistory DBObject generator
//
func (o deviceHistory) NewObj() interface{} {
	return new(deviceHistory)
}

//
// deviceHistory DBObject interface functions
//
func (o *deviceHistory) InsertValues() []interface{} {
	return []interface{}{o.Tag, o.USR, o.TS, o.RID, o.DTI, o.Rack, o.Assigned, o.Note, o.Site, o.Height, o.Hostname, o.Profile, o.AssetTag, o.Version, o.STI, o.KID, o.Alias, o.SerialNo, o.TID, o.RU, o.Type, o.Login}
}

func (o *deviceHistory) UpdateValues() []interface{} {
	return []interface{}{o.Tag, o.USR, o.TS, o.RID, o.DTI, o.Rack, o.Assigned, o.Note, o.Site, o.Height, o.Hostname, o.Profile, o.AssetTag, o.Version, o.STI, o.KID, o.Alias, o.SerialNo, o.TID, o.RU, o.Type, o.Login, o.DID}
}

func (o *deviceHistory) MemberPointers() []interface{} {
	return []interface{}{&o.DID, &o.Tag, &o.USR, &o.TS, &o.RID, &o.DTI, &o.Rack, &o.Assigned, &o.Note, &o.Site, &o.Height, &o.Hostname, &o.Profile, &o.AssetTag, &o.Version, &o.STI, &o.KID, &o.Alias, &o.SerialNo, &o.TID, &o.RU, &o.Type, &o.Login}
}

func (o *deviceHistory) Key() int64 {
	return o.DID
}

func (o *deviceHistory) SetID(id int64) {
	o.DID = id
}

func (o *deviceHistory) TableName() string {
	return "devices_history"
}

func (o *deviceHistory) SelectFields() string {
	return "did,tag,usr,ts,rid,dti,rack,assigned,note,site,height,hostname,profile,asset_tag,version,sti,kid,alias,sn,tid,ru,devtype,login"
}

func (o *deviceHistory) InsertFields() string {
	return "did,tag,usr,ts,rid,dti,rack,assigned,note,site,height,hostname,profile,asset_tag,version,sti,kid,alias,sn,tid,ru,devtype,login"
}

func (o *deviceHistory) KeyField() string {
	return "did"
}

func (o *deviceHistory) KeyName() string {
	return "DID"
}

func (o *deviceHistory) Names() []string {
	return []string{"Tag", "USR", "TS", "RID", "DTI", "Rack", "Assigned", "Note", "Site", "Height", "Hostname", "Profile", "AssetTag", "Version", "STI", "KID", "Alias", "SerialNo", "TID", "RU", "Type", "Login"}
}

func (o *deviceHistory) ModifiedBy(user int64, t time.Time) {
}

//
// deviceIPs DBObject generator
//
func (o deviceIPs) NewObj() interface{} {
	return new(deviceIPs)
}

//
// deviceIPs DBObject interface functions
//
func (o *deviceIPs) InsertValues() []interface{} {
	return []interface{}{o.DTI, o.Height, o.Model, o.SerialNo, o.STI, o.RID, o.IPs, o.Mgmt, o.AssetTag, o.Type, o.Site, o.Rack, o.Hostname, o.Make, o.Tag, o.MID, o.Alias, o.Profile, o.Assigned, o.Note, o.USR, o.TS, o.TID, o.RU}
}

func (o *deviceIPs) UpdateValues() []interface{} {
	return []interface{}{o.DTI, o.Height, o.Model, o.SerialNo, o.STI, o.RID, o.IPs, o.Mgmt, o.AssetTag, o.Type, o.Site, o.Rack, o.Hostname, o.Make, o.Tag, o.MID, o.Alias, o.Profile, o.Assigned, o.Note, o.USR, o.TS, o.TID, o.RU, o.DID}
}

func (o *deviceIPs) MemberPointers() []interface{} {
	return []interface{}{&o.DID, &o.DTI, &o.Height, &o.Model, &o.SerialNo, &o.STI, &o.RID, &o.IPs, &o.Mgmt, &o.AssetTag, &o.Type, &o.Site, &o.Rack, &o.Hostname, &o.Make, &o.Tag, &o.MID, &o.Alias, &o.Profile, &o.Assigned, &o.Note, &o.USR, &o.TS, &o.TID, &o.RU}
}

func (o *deviceIPs) Key() int64 {
	return o.DID
}

func (o *deviceIPs) SetID(id int64) {
	o.DID = id
}

func (o *deviceIPs) TableName() string {
	return "devices_list"
}

func (o *deviceIPs) SelectFields() string {
	return "did,dti,height,model,sn,sti,rid,ips,mgmt,asset_tag,devtype,site,rack,hostname,make,tag,mid,alias,profile,assigned,note,usr,ts,tid,ru"
}

func (o *deviceIPs) InsertFields() string {
	return "did,dti,height,model,sn,sti,rid,ips,mgmt,asset_tag,devtype,site,rack,hostname,make,tag,mid,alias,profile,assigned,note,usr,ts,tid,ru"
}

func (o *deviceIPs) KeyField() string {
	return "did"
}

func (o *deviceIPs) KeyName() string {
	return "DID"
}

func (o *deviceIPs) Names() []string {
	return []string{"DTI", "Height", "Model", "SerialNo", "STI", "RID", "IPs", "Mgmt", "AssetTag", "Type", "Site", "Rack", "Hostname", "Make", "Tag", "MID", "Alias", "Profile", "Assigned", "Note", "USR", "TS", "TID", "RU"}
}

func (o *deviceIPs) ModifiedBy(user int64, t time.Time) {
}

//
// deviceAdjust DBObject generator
//
func (o deviceAdjust) NewObj() interface{} {
	return new(deviceAdjust)
}

//
// deviceAdjust DBObject interface functions
//
func (o *deviceAdjust) InsertValues() []interface{} {
	return []interface{}{o.Height, o.RID, o.RU}
}

func (o *deviceAdjust) UpdateValues() []interface{} {
	return []interface{}{o.Height, o.RID, o.RU, o.DID}
}

func (o *deviceAdjust) MemberPointers() []interface{} {
	return []interface{}{&o.DID, &o.Height, &o.RID, &o.RU}
}

func (o *deviceAdjust) Key() int64 {
	return o.DID
}

func (o *deviceAdjust) SetID(id int64) {
	o.DID = id
}

func (o *deviceAdjust) TableName() string {
	return "devices_adjust"
}

func (o *deviceAdjust) SelectFields() string {
	return "did,height,rid,ru"
}

func (o *deviceAdjust) InsertFields() string {
	return "did,height,rid,ru"
}

func (o *deviceAdjust) KeyField() string {
	return "did"
}

func (o *deviceAdjust) KeyName() string {
	return "DID"
}

func (o *deviceAdjust) Names() []string {
	return []string{"Height", "RID", "RU"}
}

func (o *deviceAdjust) ModifiedBy(user int64, t time.Time) {
}

//
// iface DBObject generator
//
func (o iface) NewObj() interface{} {
	return new(iface)
}

//
// iface DBObject interface functions
//
func (o *iface) InsertValues() []interface{} {
	return []interface{}{o.CableTag, o.SwitchPort, o.DID, o.Mgmt, o.Port, o.MAC}
}

func (o *iface) UpdateValues() []interface{} {
	return []interface{}{o.CableTag, o.SwitchPort, o.DID, o.Mgmt, o.Port, o.MAC, o.IFD}
}

func (o *iface) MemberPointers() []interface{} {
	return []interface{}{&o.IFD, &o.CableTag, &o.SwitchPort, &o.DID, &o.Mgmt, &o.Port, &o.MAC}
}

func (o *iface) Key() int64 {
	return o.IFD
}

func (o *iface) SetID(id int64) {
	o.IFD = id
}

func (o *iface) TableName() string {
	return "interfaces"
}

func (o *iface) SelectFields() string {
	return "ifd,cable_tag,switch_port,did,mgmt,port,mac"
}

func (o *iface) InsertFields() string {
	return "ifd,cable_tag,switch_port,did,mgmt,port,mac"
}

func (o *iface) KeyField() string {
	return "ifd"
}

func (o *iface) KeyName() string {
	return "IFD"
}

func (o *iface) Names() []string {
	return []string{"CableTag", "SwitchPort", "DID", "Mgmt", "Port", "MAC"}
}

func (o *iface) ModifiedBy(user int64, t time.Time) {
}

//
// ifaceView DBObject generator
//
func (o ifaceView) NewObj() interface{} {
	return new(ifaceView)
}

//
// ifaceView DBObject interface functions
//
func (o *ifaceView) InsertValues() []interface{} {
	return []interface{}{o.CableTag, o.DID, o.IID, o.VLI, o.Port, o.IP, o.ipType, o.MAC, o.SwitchPort, o.IPT, o.IP32, o.Mgmt}
}

func (o *ifaceView) UpdateValues() []interface{} {
	return []interface{}{o.CableTag, o.DID, o.IID, o.VLI, o.Port, o.IP, o.ipType, o.MAC, o.SwitchPort, o.IPT, o.IP32, o.Mgmt, o.IFD}
}

func (o *ifaceView) MemberPointers() []interface{} {
	return []interface{}{&o.IFD, &o.CableTag, &o.DID, &o.IID, &o.VLI, &o.Port, &o.IP, &o.ipType, &o.MAC, &o.SwitchPort, &o.IPT, &o.IP32, &o.Mgmt}
}

func (o *ifaceView) Key() int64 {
	return o.IFD
}

func (o *ifaceView) SetID(id int64) {
	o.IFD = id
}

func (o *ifaceView) TableName() string {
	return "interfaces_view"
}

func (o *ifaceView) SelectFields() string {
	return "ifd,cable_tag,did,iid,vli,port,ipv4,iptype,mac,switch_port,ipt,ip32,mgmt"
}

func (o *ifaceView) InsertFields() string {
	return "ifd,cable_tag,did,iid,vli,port,ipv4,iptype,mac,switch_port,ipt,ip32,mgmt"
}

func (o *ifaceView) KeyField() string {
	return "ifd"
}

func (o *ifaceView) KeyName() string {
	return "IFD"
}

func (o *ifaceView) Names() []string {
	return []string{"CableTag", "DID", "IID", "VLI", "Port", "IP", "ipType", "MAC", "SwitchPort", "IPT", "IP32", "Mgmt"}
}

func (o *ifaceView) ModifiedBy(user int64, t time.Time) {
}

//
// ipAddr DBObject generator
//
func (o ipAddr) NewObj() interface{} {
	return new(ipAddr)
}

//
// ipAddr DBObject interface functions
//
func (o *ipAddr) InsertValues() []interface{} {
	return []interface{}{o.IP32, o.IP, o.IFD, o.VMI, o.VLI, o.IPT, o.Note, o.USR, o.TS}
}

func (o *ipAddr) UpdateValues() []interface{} {
	return []interface{}{o.IP32, o.IP, o.IFD, o.VMI, o.VLI, o.IPT, o.Note, o.USR, o.TS, o.IID}
}

func (o *ipAddr) MemberPointers() []interface{} {
	return []interface{}{&o.IID, &o.IP32, &o.IP, &o.IFD, &o.VMI, &o.VLI, &o.IPT, &o.Note, &o.USR, &o.TS}
}

func (o *ipAddr) Key() int64 {
	return o.IID
}

func (o *ipAddr) SetID(id int64) {
	o.IID = id
}

func (o *ipAddr) TableName() string {
	return "ips"
}

func (o *ipAddr) SelectFields() string {
	return "iid,ip32,ipv4,ifd,vmi,vli,ipt,note,usr,ts"
}

func (o *ipAddr) InsertFields() string {
	return "iid,ip32,ipv4,ifd,vmi,vli,ipt,note,usr,ts"
}

func (o *ipAddr) KeyField() string {
	return "iid"
}

func (o *ipAddr) KeyName() string {
	return "IID"
}

func (o *ipAddr) Names() []string {
	return []string{"IP32", "IP", "IFD", "VMI", "VLI", "IPT", "Note", "USR", "TS"}
}

func (o *ipAddr) ModifiedBy(user int64, t time.Time) {
}

//
// ipView DBObject generator
//
func (o ipView) NewObj() interface{} {
	return new(ipView)
}

//
// ipView DBObject interface functions
//
func (o *ipView) InsertValues() []interface{} {
	return []interface{}{o.VMI, o.VLI, o.IP, o.Type, o.Note, o.USR, o.TS, o.IFD, o.IP32, o.VLAN, o.IPT}
}

func (o *ipView) UpdateValues() []interface{} {
	return []interface{}{o.VMI, o.VLI, o.IP, o.Type, o.Note, o.USR, o.TS, o.IFD, o.IP32, o.VLAN, o.IPT, o.IID}
}

func (o *ipView) MemberPointers() []interface{} {
	return []interface{}{&o.IID, &o.VMI, &o.VLI, &o.IP, &o.Type, &o.Note, &o.USR, &o.TS, &o.IFD, &o.IP32, &o.VLAN, &o.IPT}
}

func (o *ipView) Key() int64 {
	return o.IID
}

func (o *ipView) SetID(id int64) {
	o.IID = id
}

func (o *ipView) TableName() string {
	return "ips_view"
}

func (o *ipView) SelectFields() string {
	return "iid,vmi,vli,ipv4,iptype,note,usr,ts,ifd,ip32,vlan,ipt"
}

func (o *ipView) InsertFields() string {
	return "iid,vmi,vli,ipv4,iptype,note,usr,ts,ifd,ip32,vlan,ipt"
}

func (o *ipView) KeyField() string {
	return "iid"
}

func (o *ipView) KeyName() string {
	return "IID"
}

func (o *ipView) Names() []string {
	return []string{"VMI", "VLI", "IP", "Type", "Note", "USR", "TS", "IFD", "IP32", "VLAN", "IPT"}
}

func (o *ipView) ModifiedBy(user int64, t time.Time) {
}

//
// ipsUsed DBObject generator
//
func (o ipsUsed) NewObj() interface{} {
	return new(ipsUsed)
}

//
// ipsUsed DBObject interface functions
//
func (o *ipsUsed) InsertValues() []interface{} {
	return []interface{}{o.Site, o.Rack, o.IP, o.Type, o.Host, o.ID, o.STI, o.RID, o.Note, o.IPT, o.Hostname}
}

func (o *ipsUsed) UpdateValues() []interface{} {
	return []interface{}{o.Site, o.Rack, o.IP, o.Type, o.Host, o.ID, o.STI, o.RID, o.Note, o.IPT, o.Hostname}
}

func (o *ipsUsed) MemberPointers() []interface{} {
	return []interface{}{&o.Site, &o.Rack, &o.IP, &o.Type, &o.Host, &o.ID, &o.STI, &o.RID, &o.Note, &o.IPT, &o.Hostname}
}

func (o *ipsUsed) Key() int64 {
	return 0
}

func (o *ipsUsed) SetID(id int64) {
}

func (o *ipsUsed) TableName() string {
	return "ips_list"
}

func (o *ipsUsed) SelectFields() string {
	return "site,rack,ip,iptype,host,id,sti,rid,note,ipt,hostname"
}

func (o *ipsUsed) InsertFields() string {
	return "site,rack,ip,iptype,host,id,sti,rid,note,ipt,hostname"
}

func (o *ipsUsed) KeyField() string {
	return ""
}

func (o *ipsUsed) KeyName() string {
	return ""
}

func (o *ipsUsed) Names() []string {
	return []string{"Site", "Rack", "IP", "Type", "Host", "ID", "STI", "RID", "Note", "IPT", "Hostname"}
}

func (o *ipsUsed) ModifiedBy(user int64, t time.Time) {
}

//
// ipReserve DBObject generator
//
func (o ipReserve) NewObj() interface{} {
	return new(ipReserve)
}

//
// ipReserve DBObject interface functions
//
func (o *ipReserve) InsertValues() []interface{} {
	return []interface{}{o.Site, o.VLAN, o.IP32, o.IP, o.USR, o.VLI, o.IPT, o.Note, o.User, o.TS, o.STI}
}

func (o *ipReserve) UpdateValues() []interface{} {
	return []interface{}{o.Site, o.VLAN, o.IP32, o.IP, o.USR, o.VLI, o.IPT, o.Note, o.User, o.TS, o.STI, o.IID}
}

func (o *ipReserve) MemberPointers() []interface{} {
	return []interface{}{&o.IID, &o.Site, &o.VLAN, &o.IP32, &o.IP, &o.USR, &o.VLI, &o.IPT, &o.Note, &o.User, &o.TS, &o.STI}
}

func (o *ipReserve) Key() int64 {
	return o.IID
}

func (o *ipReserve) SetID(id int64) {
	o.IID = id
}

func (o *ipReserve) TableName() string {
	return "ips_reserved"
}

func (o *ipReserve) SelectFields() string {
	return "iid,site,vlan,ip32,ipv4,usr,vli,ipt,note,username,ts,sti"
}

func (o *ipReserve) InsertFields() string {
	return "iid,site,vlan,ip32,ipv4,usr,vli,ipt,note,username,ts,sti"
}

func (o *ipReserve) KeyField() string {
	return "iid"
}

func (o *ipReserve) KeyName() string {
	return "IID"
}

func (o *ipReserve) Names() []string {
	return []string{"Site", "VLAN", "IP32", "IP", "USR", "VLI", "IPT", "Note", "User", "TS", "STI"}
}

func (o *ipReserve) ModifiedBy(user int64, t time.Time) {
}

//
// provider DBObject generator
//
func (o provider) NewObj() interface{} {
	return new(provider)
}

//
// provider DBObject interface functions
//
func (o *provider) InsertValues() []interface{} {
	return []interface{}{o.Contact, o.Phone, o.EMail, o.URL, o.Note, o.Name}
}

func (o *provider) UpdateValues() []interface{} {
	return []interface{}{o.Contact, o.Phone, o.EMail, o.URL, o.Note, o.Name, o.PRI}
}

func (o *provider) MemberPointers() []interface{} {
	return []interface{}{&o.PRI, &o.Contact, &o.Phone, &o.EMail, &o.URL, &o.Note, &o.Name}
}

func (o *provider) Key() int64 {
	return o.PRI
}

func (o *provider) SetID(id int64) {
	o.PRI = id
}

func (o *provider) TableName() string {
	return "providers"
}

func (o *provider) SelectFields() string {
	return "pri,provider,a_side_xcon,a_side_handoff,z_side_xcon,note,name"
}

func (o *provider) InsertFields() string {
	return "pri,provider,a_side_xcon,a_side_handoff,z_side_xcon,note,name"
}

func (o *provider) KeyField() string {
	return "pri"
}

func (o *provider) KeyName() string {
	return "PRI"
}

func (o *provider) Names() []string {
	return []string{"Contact", "Phone", "EMail", "URL", "Note", "Name"}
}

func (o *provider) ModifiedBy(user int64, t time.Time) {
}

//
// circuit DBObject generator
//
func (o circuit) NewObj() interface{} {
	return new(circuit)
}

//
// circuit DBObject interface functions
//
func (o *circuit) InsertValues() []interface{} {
	return []interface{}{o.ZSideXConn, o.ZSideHandoff, o.Note, o.STI, o.PRI, o.CircuitID, o.ASideXConn, o.ASideHandoff}
}

func (o *circuit) UpdateValues() []interface{} {
	return []interface{}{o.ZSideXConn, o.ZSideHandoff, o.Note, o.STI, o.PRI, o.CircuitID, o.ASideXConn, o.ASideHandoff, o.CID}
}

func (o *circuit) MemberPointers() []interface{} {
	return []interface{}{&o.CID, &o.ZSideXConn, &o.ZSideHandoff, &o.Note, &o.STI, &o.PRI, &o.CircuitID, &o.ASideXConn, &o.ASideHandoff}
}

func (o *circuit) Key() int64 {
	return o.CID
}

func (o *circuit) SetID(id int64) {
	o.CID = id
}

func (o *circuit) TableName() string {
	return "circuits"
}

func (o *circuit) SelectFields() string {
	return "cid,z_side_xcon,z_side_handoff,note,site,pri,circuit_id,a_side_xcon,a_side_handoff"
}

func (o *circuit) InsertFields() string {
	return "cid,z_side_xcon,z_side_handoff,note,site,pri,circuit_id,a_side_xcon,a_side_handoff"
}

func (o *circuit) KeyField() string {
	return "cid"
}

func (o *circuit) KeyName() string {
	return "CID"
}

func (o *circuit) Names() []string {
	return []string{"ZSideXConn", "ZSideHandoff", "Note", "STI", "PRI", "CircuitID", "ASideXConn", "ASideHandoff"}
}

func (o *circuit) ModifiedBy(user int64, t time.Time) {
}

//
// circuitView DBObject generator
//
func (o circuitView) NewObj() interface{} {
	return new(circuitView)
}

//
// circuitView DBObject interface functions
//
func (o *circuitView) InsertValues() []interface{} {
	return []interface{}{o.PRI, o.Site, o.CircuitID, o.ASideXConn, o.ASideHandoff, o.ZSideXConn, o.ZSideHandoff, o.Note, o.STI, o.Provider}
}

func (o *circuitView) UpdateValues() []interface{} {
	return []interface{}{o.PRI, o.Site, o.CircuitID, o.ASideXConn, o.ASideHandoff, o.ZSideXConn, o.ZSideHandoff, o.Note, o.STI, o.Provider, o.CID}
}

func (o *circuitView) MemberPointers() []interface{} {
	return []interface{}{&o.CID, &o.PRI, &o.Site, &o.CircuitID, &o.ASideXConn, &o.ASideHandoff, &o.ZSideXConn, &o.ZSideHandoff, &o.Note, &o.STI, &o.Provider}
}

func (o *circuitView) Key() int64 {
	return o.CID
}

func (o *circuitView) SetID(id int64) {
	o.CID = id
}

func (o *circuitView) TableName() string {
	return "circuits"
}

func (o *circuitView) SelectFields() string {
	return "cid,pri,site,circuit_id,a_side_xcon,a_side_handoff,z_side_xcon,z_side_handoff,note,site,provider"
}

func (o *circuitView) InsertFields() string {
	return "cid,pri,site,circuit_id,a_side_xcon,a_side_handoff,z_side_xcon,z_side_handoff,note,site,provider"
}

func (o *circuitView) KeyField() string {
	return "cid"
}

func (o *circuitView) KeyName() string {
	return "CID"
}

func (o *circuitView) Names() []string {
	return []string{"PRI", "Site", "CircuitID", "ASideXConn", "ASideHandoff", "ZSideXConn", "ZSideHandoff", "Note", "STI", "Provider"}
}

func (o *circuitView) ModifiedBy(user int64, t time.Time) {
}

//
// subCircuit DBObject generator
//
func (o subCircuit) NewObj() interface{} {
	return new(subCircuit)
}

//
// subCircuit DBObject interface functions
//
func (o *subCircuit) InsertValues() []interface{} {
	return []interface{}{o.Note, o.CID, o.SubID}
}

func (o *subCircuit) UpdateValues() []interface{} {
	return []interface{}{o.Note, o.CID, o.SubID, o.SCI}
}

func (o *subCircuit) MemberPointers() []interface{} {
	return []interface{}{&o.SCI, &o.Note, &o.CID, &o.SubID}
}

func (o *subCircuit) Key() int64 {
	return o.SCI
}

func (o *subCircuit) SetID(id int64) {
	o.SCI = id
}

func (o *subCircuit) TableName() string {
	return "sub_circuits"
}

func (o *subCircuit) SelectFields() string {
	return "sci,note,cid,sub_circuit_id"
}

func (o *subCircuit) InsertFields() string {
	return "sci,note,cid,sub_circuit_id"
}

func (o *subCircuit) KeyField() string {
	return "sci"
}

func (o *subCircuit) KeyName() string {
	return "SCI"
}

func (o *subCircuit) Names() []string {
	return []string{"Note", "CID", "SubID"}
}

func (o *subCircuit) ModifiedBy(user int64, t time.Time) {
}

//
// circuitList DBObject generator
//
func (o circuitList) NewObj() interface{} {
	return new(circuitList)
}

//
// circuitList DBObject interface functions
//
func (o *circuitList) InsertValues() []interface{} {
	return []interface{}{o.PRI, o.Provider, o.SubID, o.ASideHandoff, o.ZSideHandoff, o.Note, o.SubNote, o.STI, o.Site, o.CircuitID, o.ASideXConn, o.ZSideXConn}
}

func (o *circuitList) UpdateValues() []interface{} {
	return []interface{}{o.PRI, o.Provider, o.SubID, o.ASideHandoff, o.ZSideHandoff, o.Note, o.SubNote, o.STI, o.Site, o.CircuitID, o.ASideXConn, o.ZSideXConn, o.CID}
}

func (o *circuitList) MemberPointers() []interface{} {
	return []interface{}{&o.CID, &o.PRI, &o.Provider, &o.SubID, &o.ASideHandoff, &o.ZSideHandoff, &o.Note, &o.SubNote, &o.STI, &o.Site, &o.CircuitID, &o.ASideXConn, &o.ZSideXConn}
}

func (o *circuitList) Key() int64 {
	return o.CID
}

func (o *circuitList) SetID(id int64) {
	o.CID = id
}

func (o *circuitList) TableName() string {
	return "circuits"
}

func (o *circuitList) SelectFields() string {
	return "cid,pri,provider,sub_circuit_id,a_side_handoff,z_side_handoff,note,sub_note,site,site,circuit_id,a_side_xcon,z_side_xcon"
}

func (o *circuitList) InsertFields() string {
	return "cid,pri,provider,sub_circuit_id,a_side_handoff,z_side_handoff,note,sub_note,site,site,circuit_id,a_side_xcon,z_side_xcon"
}

func (o *circuitList) KeyField() string {
	return "cid"
}

func (o *circuitList) KeyName() string {
	return "CID"
}

func (o *circuitList) Names() []string {
	return []string{"PRI", "Provider", "SubID", "ASideHandoff", "ZSideHandoff", "Note", "SubNote", "STI", "Site", "CircuitID", "ASideXConn", "ZSideXConn"}
}

func (o *circuitList) ModifiedBy(user int64, t time.Time) {
}

//
// vlanProfile DBObject generator
//
func (o vlanProfile) NewObj() interface{} {
	return new(vlanProfile)
}

//
// vlanProfile DBObject interface functions
//
func (o *vlanProfile) InsertValues() []interface{} {
	return []interface{}{o.Name}
}

func (o *vlanProfile) UpdateValues() []interface{} {
	return []interface{}{o.Name, o.VPID}
}

func (o *vlanProfile) MemberPointers() []interface{} {
	return []interface{}{&o.VPID, &o.Name}
}

func (o *vlanProfile) Key() int64 {
	return o.VPID
}

func (o *vlanProfile) SetID(id int64) {
	o.VPID = id
}

func (o *vlanProfile) TableName() string {
	return "vlan_profiles"
}

func (o *vlanProfile) SelectFields() string {
	return "vpid,name"
}

func (o *vlanProfile) InsertFields() string {
	return "vpid,name"
}

func (o *vlanProfile) KeyField() string {
	return "vpid"
}

func (o *vlanProfile) KeyName() string {
	return "VPID"
}

func (o *vlanProfile) Names() []string {
	return []string{"Name"}
}

func (o *vlanProfile) ModifiedBy(user int64, t time.Time) {
}

//
// vlan DBObject generator
//
func (o vlan) NewObj() interface{} {
	return new(vlan)
}

//
// vlan DBObject interface functions
//
func (o *vlan) InsertValues() []interface{} {
	return []interface{}{o.Starting, o.Note, o.TS, o.USR, o.STI, o.Name, o.Profile, o.Gateway, o.Route, o.Netmask}
}

func (o *vlan) UpdateValues() []interface{} {
	return []interface{}{o.Starting, o.Note, o.TS, o.USR, o.STI, o.Name, o.Profile, o.Gateway, o.Route, o.Netmask, o.VLI}
}

func (o *vlan) MemberPointers() []interface{} {
	return []interface{}{&o.VLI, &o.Starting, &o.Note, &o.TS, &o.USR, &o.STI, &o.Name, &o.Profile, &o.Gateway, &o.Route, &o.Netmask}
}

func (o *vlan) Key() int64 {
	return o.VLI
}

func (o *vlan) SetID(id int64) {
	o.VLI = id
}

func (o *vlan) TableName() string {
	return "vlans"
}

func (o *vlan) SelectFields() string {
	return "vli,starting,note,ts,usr,sti,name,profile,gateway,route,netmask"
}

func (o *vlan) InsertFields() string {
	return "vli,starting,note,ts,usr,sti,name,profile,gateway,route,netmask"
}

func (o *vlan) KeyField() string {
	return "vli"
}

func (o *vlan) KeyName() string {
	return "VLI"
}

func (o *vlan) Names() []string {
	return []string{"Starting", "Note", "TS", "USR", "STI", "Name", "Profile", "Gateway", "Route", "Netmask"}
}

func (o *vlan) ModifiedBy(user int64, t time.Time) {
	o.USR = &user
	o.TS = t
}

//
// vlanView DBObject generator
//
func (o vlanView) NewObj() interface{} {
	return new(vlanView)
}

//
// vlanView DBObject interface functions
//
func (o *vlanView) InsertValues() []interface{} {
	return []interface{}{o.STI, o.Name, o.Gateway, o.Route, o.Netmask, o.USR, o.Site, o.Profile, o.Starting, o.Note, o.TS}
}

func (o *vlanView) UpdateValues() []interface{} {
	return []interface{}{o.STI, o.Name, o.Gateway, o.Route, o.Netmask, o.USR, o.Site, o.Profile, o.Starting, o.Note, o.TS, o.VLI}
}

func (o *vlanView) MemberPointers() []interface{} {
	return []interface{}{&o.VLI, &o.STI, &o.Name, &o.Gateway, &o.Route, &o.Netmask, &o.USR, &o.Site, &o.Profile, &o.Starting, &o.Note, &o.TS}
}

func (o *vlanView) Key() int64 {
	return o.VLI
}

func (o *vlanView) SetID(id int64) {
	o.VLI = id
}

func (o *vlanView) TableName() string {
	return "vlans_view"
}

func (o *vlanView) SelectFields() string {
	return "vli,sti,name,gateway,route,netmask,usr,site,profile,starting,note,ts"
}

func (o *vlanView) InsertFields() string {
	return "vli,sti,name,gateway,route,netmask,usr,site,profile,starting,note,ts"
}

func (o *vlanView) KeyField() string {
	return "vli"
}

func (o *vlanView) KeyName() string {
	return "VLI"
}

func (o *vlanView) Names() []string {
	return []string{"STI", "Name", "Gateway", "Route", "Netmask", "USR", "Site", "Profile", "Starting", "Note", "TS"}
}

func (o *vlanView) ModifiedBy(user int64, t time.Time) {
	o.USR = &user
	o.TS = t
}

//
// pxeDevice DBObject generator
//
func (o pxeDevice) NewObj() interface{} {
	return new(pxeDevice)
}

//
// pxeDevice DBObject interface functions
//
func (o *pxeDevice) InsertValues() []interface{} {
	return []interface{}{o.Profile, o.MAC, o.IP, o.IPMI, o.Site, o.RU, o.Rack, o.Hostname, o.Note, o.STI, o.RID}
}

func (o *pxeDevice) UpdateValues() []interface{} {
	return []interface{}{o.Profile, o.MAC, o.IP, o.IPMI, o.Site, o.RU, o.Rack, o.Hostname, o.Note, o.STI, o.RID, o.DID}
}

func (o *pxeDevice) MemberPointers() []interface{} {
	return []interface{}{&o.DID, &o.Profile, &o.MAC, &o.IP, &o.IPMI, &o.Site, &o.RU, &o.Rack, &o.Hostname, &o.Note, &o.STI, &o.RID}
}

func (o *pxeDevice) Key() int64 {
	return o.DID
}

func (o *pxeDevice) SetID(id int64) {
	o.DID = id
}

func (o *pxeDevice) TableName() string {
	return "pxedevice"
}

func (o *pxeDevice) SelectFields() string {
	return "did,profile,mac,ip,ipmi,site,ru,rack,hostname,note,sti,rid"
}

func (o *pxeDevice) InsertFields() string {
	return "did,profile,mac,ip,ipmi,site,ru,rack,hostname,note,sti,rid"
}

func (o *pxeDevice) KeyField() string {
	return "did"
}

func (o *pxeDevice) KeyName() string {
	return "DID"
}

func (o *pxeDevice) Names() []string {
	return []string{"Profile", "MAC", "IP", "IPMI", "Site", "RU", "Rack", "Hostname", "Note", "STI", "RID"}
}

func (o *pxeDevice) ModifiedBy(user int64, t time.Time) {
}
