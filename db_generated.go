// generated by dbgen ; DO NOT EDIT

package main

import (
	"time"
)

//
// Contract DBObject generator
//
func (o Contract) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// Contract DBObject interface functions
//
func (o *Contract) InsertValues() []interface{} {
	return []interface{}{o.VID, o.Policy, o.Phone}
}

func (o *Contract) UpdateValues() []interface{} {
	return []interface{}{o.VID, o.Policy, o.Phone, o.CID}
}

func (o *Contract) MemberPointers() []interface{} {
	return []interface{}{&o.CID, &o.VID, &o.Policy, &o.Phone}
}

func (o *Contract) Key() int64 {
	return o.CID
}

func (o *Contract) SetID(id int64) {
	o.CID = id
}

func (o *Contract) TableName() string {
	return "contracts"
}

func (o *Contract) SelectFields() string {
	return "cid,vid,policy,phone"
}

func (o *Contract) InsertFields() string {
	return "cid,vid,policy,phone"
}

func (o *Contract) KeyField() string {
	return "cid"
}

func (o *Contract) KeyName() string {
	return "CID"
}

func (o *Contract) Names() []string {
	return []string{"VID", "Policy", "Phone"}
}

func (o *Contract) ModifiedBy(user int64, t time.Time) {
}

//
// Device DBObject generator
//
func (o Device) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// Device DBObject interface functions
//
func (o *Device) InsertValues() []interface{} {
	return []interface{}{o.RID, o.RU, o.Height, o.MgmtMac, o.UID, o.Type, o.AssetTag, o.Modified, o.VID, o.Model, o.PrimaryIP, o.MgmtIP, o.PrimaryMac, o.Hostname, o.SerialNo, o.Note}
}

func (o *Device) UpdateValues() []interface{} {
	return []interface{}{o.RID, o.RU, o.Height, o.MgmtMac, o.UID, o.Type, o.AssetTag, o.Modified, o.VID, o.Model, o.PrimaryIP, o.MgmtIP, o.PrimaryMac, o.Hostname, o.SerialNo, o.Note, o.DID}
}

func (o *Device) MemberPointers() []interface{} {
	return []interface{}{&o.DID, &o.RID, &o.RU, &o.Height, &o.MgmtMac, &o.UID, &o.Type, &o.AssetTag, &o.Modified, &o.VID, &o.Model, &o.PrimaryIP, &o.MgmtIP, &o.PrimaryMac, &o.Hostname, &o.SerialNo, &o.Note}
}

func (o *Device) Key() int64 {
	return o.DID
}

func (o *Device) SetID(id int64) {
	o.DID = id
}

func (o *Device) TableName() string {
	return "devices"
}

func (o *Device) SelectFields() string {
	return "did,rid,ru,height,mgmt_mac,uid,device_type,asset_tag,modified,vid,model,primary_ip,mgmt_ip,primary_mac,hostname,sn,note"
}

func (o *Device) InsertFields() string {
	return "did,rid,ru,height,mgmt_mac,uid,device_type,asset_tag,modified,vid,model,primary_ip,mgmt_ip,primary_mac,hostname,sn,note"
}

func (o *Device) KeyField() string {
	return "did"
}

func (o *Device) KeyName() string {
	return "DID"
}

func (o *Device) Names() []string {
	return []string{"RID", "RU", "Height", "MgmtMac", "UID", "Type", "AssetTag", "Modified", "VID", "Model", "PrimaryIP", "MgmtIP", "PrimaryMac", "Hostname", "SerialNo", "Note"}
}

func (o *Device) ModifiedBy(user int64, t time.Time) {
}

//
// Port DBObject generator
//
func (o Port) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// Port DBObject interface functions
//
func (o *Port) InsertValues() []interface{} {
	return []interface{}{o.UID, o.DID, o.PortType, o.MAC, o.CableTag, o.SwitchPort, o.Modified}
}

func (o *Port) UpdateValues() []interface{} {
	return []interface{}{o.UID, o.DID, o.PortType, o.MAC, o.CableTag, o.SwitchPort, o.Modified, o.PID}
}

func (o *Port) MemberPointers() []interface{} {
	return []interface{}{&o.PID, &o.UID, &o.DID, &o.PortType, &o.MAC, &o.CableTag, &o.SwitchPort, &o.Modified}
}

func (o *Port) Key() int64 {
	return o.PID
}

func (o *Port) SetID(id int64) {
	o.PID = id
}

func (o *Port) TableName() string {
	return "ports"
}

func (o *Port) SelectFields() string {
	return "pid,uid,did,port_type,mac,cable_tag,switch_port,modified"
}

func (o *Port) InsertFields() string {
	return "pid,uid,did,port_type,mac,cable_tag,switch_port,modified"
}

func (o *Port) KeyField() string {
	return "pid"
}

func (o *Port) KeyName() string {
	return "PID"
}

func (o *Port) Names() []string {
	return []string{"UID", "DID", "PortType", "MAC", "CableTag", "SwitchPort", "Modified"}
}

func (o *Port) ModifiedBy(user int64, t time.Time) {
}

//
// IP DBObject generator
//
func (o IP) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// IP DBObject interface functions
//
func (o *IP) InsertValues() []interface{} {
	return []interface{}{o.Modified, o.UID, o.DID, o.Type, o.Int}
}

func (o *IP) UpdateValues() []interface{} {
	return []interface{}{o.Modified, o.UID, o.DID, o.Type, o.Int, o.IID}
}

func (o *IP) MemberPointers() []interface{} {
	return []interface{}{&o.IID, &o.Modified, &o.UID, &o.DID, &o.Type, &o.Int}
}

func (o *IP) Key() int64 {
	return o.IID
}

func (o *IP) SetID(id int64) {
	o.IID = id
}

func (o *IP) TableName() string {
	return "ips"
}

func (o *IP) SelectFields() string {
	return "iid,modified,uid,did,ip_type,ip_int"
}

func (o *IP) InsertFields() string {
	return "iid,modified,uid,did,ip_type,ip_int"
}

func (o *IP) KeyField() string {
	return "iid"
}

func (o *IP) KeyName() string {
	return "IID"
}

func (o *IP) Names() []string {
	return []string{"Modified", "UID", "DID", "Type", "Int"}
}

func (o *IP) ModifiedBy(user int64, t time.Time) {
}

//
// Choice DBObject generator
//
func (o Choice) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// Choice DBObject interface functions
//
func (o *Choice) InsertValues() []interface{} {
	return []interface{}{o.ID, o.Label}
}

func (o *Choice) UpdateValues() []interface{} {
	return []interface{}{o.ID, o.Label}
}

func (o *Choice) MemberPointers() []interface{} {
	return []interface{}{&o.ID, &o.Label}
}

func (o *Choice) Key() int64 {
	return 0
}

func (o *Choice) SetID(id int64) {
}

func (o *Choice) TableName() string {
	return "part_choices"
}

func (o *Choice) SelectFields() string {
	return "pid,label"
}

func (o *Choice) InsertFields() string {
	return "pid,label"
}

func (o *Choice) KeyField() string {
	return ""
}

func (o *Choice) KeyName() string {
	return ""
}

func (o *Choice) Names() []string {
	return []string{"ID", "Label"}
}

func (o *Choice) ModifiedBy(user int64, t time.Time) {
}

//
// User DBObject generator
//
func (o User) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// User DBObject interface functions
//
func (o *User) InsertValues() []interface{} {
	return []interface{}{o.Login, o.First, o.Last, o.Email, o.Level}
}

func (o *User) UpdateValues() []interface{} {
	return []interface{}{o.Login, o.First, o.Last, o.Email, o.Level, o.ID}
}

func (o *User) MemberPointers() []interface{} {
	return []interface{}{&o.ID, &o.Login, &o.First, &o.Last, &o.Email, &o.Level}
}

func (o *User) Key() int64 {
	return o.ID
}

func (o *User) SetID(id int64) {
	o.ID = id
}

func (o *User) TableName() string {
	return "users"
}

func (o *User) SelectFields() string {
	return "id,login,firstname,lastname,email,admin"
}

func (o *User) InsertFields() string {
	return "id,login,firstname,lastname,email,admin"
}

func (o *User) KeyField() string {
	return "id"
}

func (o *User) KeyName() string {
	return "ID"
}

func (o *User) Names() []string {
	return []string{"Login", "First", "Last", "Email", "Level"}
}

func (o *User) ModifiedBy(user int64, t time.Time) {
}

//
// Document DBObject generator
//
func (o Document) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// Document DBObject interface functions
//
func (o *Document) InsertValues() []interface{} {
	return []interface{}{o.DID, o.Filename, o.Title, o.RemoteAddr, o.UID, o.Modified}
}

func (o *Document) UpdateValues() []interface{} {
	return []interface{}{o.DID, o.Filename, o.Title, o.RemoteAddr, o.UID, o.Modified, o.ID}
}

func (o *Document) MemberPointers() []interface{} {
	return []interface{}{&o.ID, &o.DID, &o.Filename, &o.Title, &o.RemoteAddr, &o.UID, &o.Modified}
}

func (o *Document) Key() int64 {
	return o.ID
}

func (o *Document) SetID(id int64) {
	o.ID = id
}

func (o *Document) TableName() string {
	return "documents"
}

func (o *Document) SelectFields() string {
	return "id,did,filename,title,remote_addr,user_id,modified"
}

func (o *Document) InsertFields() string {
	return "id,did,filename,title,remote_addr,user_id,modified"
}

func (o *Document) KeyField() string {
	return "id"
}

func (o *Document) KeyName() string {
	return "ID"
}

func (o *Document) Names() []string {
	return []string{"DID", "Filename", "Title", "RemoteAddr", "UID", "Modified"}
}

func (o *Document) ModifiedBy(user int64, t time.Time) {
}

//
// Vendor DBObject generator
//
func (o Vendor) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// Vendor DBObject interface functions
//
func (o *Vendor) InsertValues() []interface{} {
	return []interface{}{o.Name, o.WWW, o.Address, o.City, o.Country, o.UID, o.Phone, o.State, o.Postal, o.Note, o.RemoteAddr, o.Modified}
}

func (o *Vendor) UpdateValues() []interface{} {
	return []interface{}{o.Name, o.WWW, o.Address, o.City, o.Country, o.UID, o.Phone, o.State, o.Postal, o.Note, o.RemoteAddr, o.Modified, o.VID}
}

func (o *Vendor) MemberPointers() []interface{} {
	return []interface{}{&o.VID, &o.Name, &o.WWW, &o.Address, &o.City, &o.Country, &o.UID, &o.Phone, &o.State, &o.Postal, &o.Note, &o.RemoteAddr, &o.Modified}
}

func (o *Vendor) Key() int64 {
	return o.VID
}

func (o *Vendor) SetID(id int64) {
	o.VID = id
}

func (o *Vendor) TableName() string {
	return "vendors"
}

func (o *Vendor) SelectFields() string {
	return "vid,name,www,address,city,country,user_id,phone,state,postal,note,remote_addr,modified"
}

func (o *Vendor) InsertFields() string {
	return "vid,name,www,address,city,country,user_id,phone,state,postal,note,remote_addr,modified"
}

func (o *Vendor) KeyField() string {
	return "vid"
}

func (o *Vendor) KeyName() string {
	return "VID"
}

func (o *Vendor) Names() []string {
	return []string{"Name", "WWW", "Address", "City", "Country", "UID", "Phone", "State", "Postal", "Note", "RemoteAddr", "Modified"}
}

func (o *Vendor) ModifiedBy(user int64, t time.Time) {
	o.UID = user
	o.Modified = t
}

//
// RMA DBObject generator
//
func (o RMA) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// RMA DBObject interface functions
//
func (o *RMA) InsertValues() []interface{} {
	return []interface{}{o.UID, o.Number, o.Note, o.Jira, o.Opened, o.DID, o.VID, o.DCTicket, o.Receiving, o.Closed}
}

func (o *RMA) UpdateValues() []interface{} {
	return []interface{}{o.UID, o.Number, o.Note, o.Jira, o.Opened, o.DID, o.VID, o.DCTicket, o.Receiving, o.Closed, o.ID}
}

func (o *RMA) MemberPointers() []interface{} {
	return []interface{}{&o.ID, &o.UID, &o.Number, &o.Note, &o.Jira, &o.Opened, &o.DID, &o.VID, &o.DCTicket, &o.Receiving, &o.Closed}
}

func (o *RMA) Key() int64 {
	return o.ID
}

func (o *RMA) SetID(id int64) {
	o.ID = id
}

func (o *RMA) TableName() string {
	return "rmas"
}

func (o *RMA) SelectFields() string {
	return "rma_id,user_id,rma_no,note,jira,date_opened,did,vid,dc_ticket,dc_receiving,date_closed"
}

func (o *RMA) InsertFields() string {
	return "rma_id,user_id,rma_no,note,jira,date_opened,did,vid,dc_ticket,dc_receiving,date_closed"
}

func (o *RMA) KeyField() string {
	return "rma_id"
}

func (o *RMA) KeyName() string {
	return "ID"
}

func (o *RMA) Names() []string {
	return []string{"UID", "Number", "Note", "Jira", "Opened", "DID", "VID", "DCTicket", "Receiving", "Closed"}
}

func (o *RMA) ModifiedBy(user int64, t time.Time) {
}

//
// Carrier DBObject generator
//
func (o Carrier) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// Carrier DBObject interface functions
//
func (o *Carrier) InsertValues() []interface{} {
	return []interface{}{o.UID, o.Modified, o.Name, o.URL}
}

func (o *Carrier) UpdateValues() []interface{} {
	return []interface{}{o.UID, o.Modified, o.Name, o.URL, o.CarrierID}
}

func (o *Carrier) MemberPointers() []interface{} {
	return []interface{}{&o.CarrierID, &o.UID, &o.Modified, &o.Name, &o.URL}
}

func (o *Carrier) Key() int64 {
	return o.CarrierID
}

func (o *Carrier) SetID(id int64) {
	o.CarrierID = id
}

func (o *Carrier) TableName() string {
	return "carriers"
}

func (o *Carrier) SelectFields() string {
	return "cr_id,user_id,modified,name,tracking_url"
}

func (o *Carrier) InsertFields() string {
	return "cr_id,user_id,modified,name,tracking_url"
}

func (o *Carrier) KeyField() string {
	return "cr_id"
}

func (o *Carrier) KeyName() string {
	return "CarrierID"
}

func (o *Carrier) Names() []string {
	return []string{"UID", "Modified", "Name", "URL"}
}

func (o *Carrier) ModifiedBy(user int64, t time.Time) {
}

//
// Return DBObject generator
//
func (o Return) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// Return DBObject interface functions
//
func (o *Return) InsertValues() []interface{} {
	return []interface{}{o.Sent, o.RMAID, o.CarrierID, o.Tracking, o.UID}
}

func (o *Return) UpdateValues() []interface{} {
	return []interface{}{o.Sent, o.RMAID, o.CarrierID, o.Tracking, o.UID, o.ReturnID}
}

func (o *Return) MemberPointers() []interface{} {
	return []interface{}{&o.ReturnID, &o.Sent, &o.RMAID, &o.CarrierID, &o.Tracking, &o.UID}
}

func (o *Return) Key() int64 {
	return o.ReturnID
}

func (o *Return) SetID(id int64) {
	o.ReturnID = id
}

func (o *Return) TableName() string {
	return "rma_returns"
}

func (o *Return) SelectFields() string {
	return "return_id,date_sent,rma_id,cr_id,tracking_no,user_id"
}

func (o *Return) InsertFields() string {
	return "return_id,date_sent,rma_id,cr_id,tracking_no,user_id"
}

func (o *Return) KeyField() string {
	return "return_id"
}

func (o *Return) KeyName() string {
	return "ReturnID"
}

func (o *Return) Names() []string {
	return []string{"Sent", "RMAID", "CarrierID", "Tracking", "UID"}
}

func (o *Return) ModifiedBy(user int64, t time.Time) {
}

//
// Sent DBObject generator
//
func (o Sent) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// Sent DBObject interface functions
//
func (o *Sent) InsertValues() []interface{} {
	return []interface{}{o.ReturnID, o.PID}
}

func (o *Sent) UpdateValues() []interface{} {
	return []interface{}{o.ReturnID, o.PID}
}

func (o *Sent) MemberPointers() []interface{} {
	return []interface{}{&o.ReturnID, &o.PID}
}

func (o *Sent) Key() int64 {
	return 0
}

func (o *Sent) SetID(id int64) {
}

func (o *Sent) TableName() string {
	return "rma_sent"
}

func (o *Sent) SelectFields() string {
	return "return_id,pid"
}

func (o *Sent) InsertFields() string {
	return "return_id,pid"
}

func (o *Sent) KeyField() string {
	return ""
}

func (o *Sent) KeyName() string {
	return ""
}

func (o *Sent) Names() []string {
	return []string{"ReturnID", "PID"}
}

func (o *Sent) ModifiedBy(user int64, t time.Time) {
}

//
// Received DBObject generator
//
func (o Received) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// Received DBObject interface functions
//
func (o *Received) InsertValues() []interface{} {
	return []interface{}{o.PID, o.UID, o.TS, o.RMAID}
}

func (o *Received) UpdateValues() []interface{} {
	return []interface{}{o.PID, o.UID, o.TS, o.RMAID}
}

func (o *Received) MemberPointers() []interface{} {
	return []interface{}{&o.PID, &o.UID, &o.TS, &o.RMAID}
}

func (o *Received) Key() int64 {
	return 0
}

func (o *Received) SetID(id int64) {
}

func (o *Received) TableName() string {
	return "rma_received"
}

func (o *Received) SelectFields() string {
	return "pid,user_id,date_received,rma_id"
}

func (o *Received) InsertFields() string {
	return "pid,user_id,date_received,rma_id"
}

func (o *Received) KeyField() string {
	return ""
}

func (o *Received) KeyName() string {
	return ""
}

func (o *Received) Names() []string {
	return []string{"PID", "UID", "TS", "RMAID"}
}

func (o *Received) ModifiedBy(user int64, t time.Time) {
}

//
// Manufacturer DBObject generator
//
func (o Manufacturer) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// Manufacturer DBObject interface functions
//
func (o *Manufacturer) InsertValues() []interface{} {
	return []interface{}{o.URL, o.UID, o.Modified, o.Name, o.AKA}
}

func (o *Manufacturer) UpdateValues() []interface{} {
	return []interface{}{o.URL, o.UID, o.Modified, o.Name, o.AKA, o.MID}
}

func (o *Manufacturer) MemberPointers() []interface{} {
	return []interface{}{&o.MID, &o.URL, &o.UID, &o.Modified, &o.Name, &o.AKA}
}

func (o *Manufacturer) Key() int64 {
	return o.MID
}

func (o *Manufacturer) SetID(id int64) {
	o.MID = id
}

func (o *Manufacturer) TableName() string {
	return "mfgr"
}

func (o *Manufacturer) SelectFields() string {
	return "mid,url,user_id,modified,name,aka"
}

func (o *Manufacturer) InsertFields() string {
	return "mid,url,user_id,modified,name,aka"
}

func (o *Manufacturer) KeyField() string {
	return "mid"
}

func (o *Manufacturer) KeyName() string {
	return "MID"
}

func (o *Manufacturer) Names() []string {
	return []string{"URL", "UID", "Modified", "Name", "AKA"}
}

func (o *Manufacturer) ModifiedBy(user int64, t time.Time) {
	o.UID = user
	o.Modified = t
}

//
// PartType DBObject generator
//
func (o PartType) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// PartType DBObject interface functions
//
func (o *PartType) InsertValues() []interface{} {
	return []interface{}{o.Name, o.UID, o.Modified}
}

func (o *PartType) UpdateValues() []interface{} {
	return []interface{}{o.Name, o.UID, o.Modified, o.TID}
}

func (o *PartType) MemberPointers() []interface{} {
	return []interface{}{&o.TID, &o.Name, &o.UID, &o.Modified}
}

func (o *PartType) Key() int64 {
	return o.TID
}

func (o *PartType) SetID(id int64) {
	o.TID = id
}

func (o *PartType) TableName() string {
	return "part_types"
}

func (o *PartType) SelectFields() string {
	return "tid,name,user_id,modified"
}

func (o *PartType) InsertFields() string {
	return "tid,name,user_id,modified"
}

func (o *PartType) KeyField() string {
	return "tid"
}

func (o *PartType) KeyName() string {
	return "TID"
}

func (o *PartType) Names() []string {
	return []string{"Name", "UID", "Modified"}
}

func (o *PartType) ModifiedBy(user int64, t time.Time) {
	o.UID = user
	o.Modified = t
}

//
// SKU DBObject generator
//
func (o SKU) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// SKU DBObject interface functions
//
func (o *SKU) InsertValues() []interface{} {
	return []interface{}{o.MID, o.TID, o.PartNumber, o.Description, o.UID, o.Modified}
}

func (o *SKU) UpdateValues() []interface{} {
	return []interface{}{o.MID, o.TID, o.PartNumber, o.Description, o.UID, o.Modified, o.KID}
}

func (o *SKU) MemberPointers() []interface{} {
	return []interface{}{&o.KID, &o.MID, &o.TID, &o.PartNumber, &o.Description, &o.UID, &o.Modified}
}

func (o *SKU) Key() int64 {
	return o.KID
}

func (o *SKU) SetID(id int64) {
	o.KID = id
}

func (o *SKU) TableName() string {
	return "skus"
}

func (o *SKU) SelectFields() string {
	return "kid,mid,tid,part_no,description,user_id,modified"
}

func (o *SKU) InsertFields() string {
	return "kid,mid,tid,part_no,description,user_id,modified"
}

func (o *SKU) KeyField() string {
	return "kid"
}

func (o *SKU) KeyName() string {
	return "KID"
}

func (o *SKU) Names() []string {
	return []string{"MID", "TID", "PartNumber", "Description", "UID", "Modified"}
}

func (o *SKU) ModifiedBy(user int64, t time.Time) {
	o.UID = user
	o.Modified = t
}

//
// Part DBObject generator
//
func (o Part) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// Part DBObject interface functions
//
func (o *Part) InsertValues() []interface{} {
	return []interface{}{o.KID, o.DID, o.Location, o.AssetTag, o.UID, o.SID, o.RMAID, o.Serial, o.Modified}
}

func (o *Part) UpdateValues() []interface{} {
	return []interface{}{o.KID, o.DID, o.Location, o.AssetTag, o.UID, o.SID, o.RMAID, o.Serial, o.Modified, o.PID}
}

func (o *Part) MemberPointers() []interface{} {
	return []interface{}{&o.PID, &o.KID, &o.DID, &o.Location, &o.AssetTag, &o.UID, &o.SID, &o.RMAID, &o.Serial, &o.Modified}
}

func (o *Part) Key() int64 {
	return o.PID
}

func (o *Part) SetID(id int64) {
	o.PID = id
}

func (o *Part) TableName() string {
	return "parts"
}

func (o *Part) SelectFields() string {
	return "pid,kid,did,location,asset_tag,user_id,sid,rma_id,serial_no,modified"
}

func (o *Part) InsertFields() string {
	return "pid,kid,did,location,asset_tag,user_id,sid,rma_id,serial_no,modified"
}

func (o *Part) KeyField() string {
	return "pid"
}

func (o *Part) KeyName() string {
	return "PID"
}

func (o *Part) Names() []string {
	return []string{"KID", "DID", "Location", "AssetTag", "UID", "SID", "RMAID", "Serial", "Modified"}
}

func (o *Part) ModifiedBy(user int64, t time.Time) {
	o.UID = user
	o.Modified = t
}

//
// Datacenter DBObject generator
//
func (o Datacenter) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// Datacenter DBObject interface functions
//
func (o *Datacenter) InsertValues() []interface{} {
	return []interface{}{o.City, o.State, o.Web, o.DCMan, o.RemoteAddr, o.Name, o.PXEHost, o.PXEKey, o.UID, o.PXEUser, o.PXEPass, o.Modified, o.Address, o.Phone}
}

func (o *Datacenter) UpdateValues() []interface{} {
	return []interface{}{o.City, o.State, o.Web, o.DCMan, o.RemoteAddr, o.Name, o.PXEHost, o.PXEKey, o.UID, o.PXEUser, o.PXEPass, o.Modified, o.Address, o.Phone, o.ID}
}

func (o *Datacenter) MemberPointers() []interface{} {
	return []interface{}{&o.ID, &o.City, &o.State, &o.Web, &o.DCMan, &o.RemoteAddr, &o.Name, &o.PXEHost, &o.PXEKey, &o.UID, &o.PXEUser, &o.PXEPass, &o.Modified, &o.Address, &o.Phone}
}

func (o *Datacenter) Key() int64 {
	return o.ID
}

func (o *Datacenter) SetID(id int64) {
	o.ID = id
}

func (o *Datacenter) TableName() string {
	return "datacenters"
}

func (o *Datacenter) SelectFields() string {
	return "id,city,state,web,dcman,remote_addr,name,pxehost,pxekey,user_id,pxeuser,pxepass,modified,address,phone"
}

func (o *Datacenter) InsertFields() string {
	return "id,city,state,web,dcman,remote_addr,name,pxehost,pxekey,user_id,pxeuser,pxepass,modified,address,phone"
}

func (o *Datacenter) KeyField() string {
	return "id"
}

func (o *Datacenter) KeyName() string {
	return "ID"
}

func (o *Datacenter) Names() []string {
	return []string{"City", "State", "Web", "DCMan", "RemoteAddr", "Name", "PXEHost", "PXEKey", "UID", "PXEUser", "PXEPass", "Modified", "Address", "Phone"}
}

func (o *Datacenter) ModifiedBy(user int64, t time.Time) {
	o.UID = user
	o.Modified = t
}

//
// DCView DBObject generator
//
func (o DCView) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// DCView DBObject interface functions
//
func (o *DCView) InsertValues() []interface{} {
	return []interface{}{o.DID, o.Hostname, o.AssetNumber, o.CPU, o.CPUSpeed, o.MemoryMB, o.Created}
}

func (o *DCView) UpdateValues() []interface{} {
	return []interface{}{o.DID, o.Hostname, o.AssetNumber, o.CPU, o.CPUSpeed, o.MemoryMB, o.Created, o.ID}
}

func (o *DCView) MemberPointers() []interface{} {
	return []interface{}{&o.ID, &o.DID, &o.Hostname, &o.AssetNumber, &o.CPU, &o.CPUSpeed, &o.MemoryMB, &o.Created}
}

func (o *DCView) Key() int64 {
	return o.ID
}

func (o *DCView) SetID(id int64) {
	o.ID = id
}

func (o *DCView) TableName() string {
	return "dcview"
}

func (o *DCView) SelectFields() string {
	return "id,datacenter,hostname,asset_number,cpu_id,cpu_speed,memory,created"
}

func (o *DCView) InsertFields() string {
	return "id,datacenter,hostname,asset_number,cpu_id,cpu_speed,memory,created"
}

func (o *DCView) KeyField() string {
	return "id"
}

func (o *DCView) KeyName() string {
	return "ID"
}

func (o *DCView) Names() []string {
	return []string{"DID", "Hostname", "AssetNumber", "CPU", "CPUSpeed", "MemoryMB", "Created"}
}

func (o *DCView) ModifiedBy(user int64, t time.Time) {
}

//
// ServerVMs DBObject generator
//
func (o ServerVMs) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// ServerVMs DBObject interface functions
//
func (o *ServerVMs) InsertValues() []interface{} {
	return []interface{}{o.DC, o.Hostname, o.VMList, o.IDList}
}

func (o *ServerVMs) UpdateValues() []interface{} {
	return []interface{}{o.DC, o.Hostname, o.VMList, o.IDList, o.ID}
}

func (o *ServerVMs) MemberPointers() []interface{} {
	return []interface{}{&o.ID, &o.DC, &o.Hostname, &o.VMList, &o.IDList}
}

func (o *ServerVMs) Key() int64 {
	return o.ID
}

func (o *ServerVMs) SetID(id int64) {
	o.ID = id
}

func (o *ServerVMs) TableName() string {
	return "servervms"
}

func (o *ServerVMs) SelectFields() string {
	return "id,dc,hostname,vms,ids"
}

func (o *ServerVMs) InsertFields() string {
	return "id,dc,hostname,vms,ids"
}

func (o *ServerVMs) KeyField() string {
	return "id"
}

func (o *ServerVMs) KeyName() string {
	return "ID"
}

func (o *ServerVMs) Names() []string {
	return []string{"DC", "Hostname", "VMList", "IDList"}
}

func (o *ServerVMs) ModifiedBy(user int64, t time.Time) {
}

//
// RackUnit DBObject generator
//
func (o RackUnit) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// RackUnit DBObject interface functions
//
func (o *RackUnit) InsertValues() []interface{} {
	return []interface{}{o.Alias, o.NID, o.RID, o.Height, o.Note, o.Rack, o.Hostname, o.IPMI, o.SID, o.SerialNo, o.Internal, o.DC, o.RU, o.AssetTag}
}

func (o *RackUnit) UpdateValues() []interface{} {
	return []interface{}{o.Alias, o.NID, o.RID, o.Height, o.Note, o.Rack, o.Hostname, o.IPMI, o.SID, o.SerialNo, o.Internal, o.DC, o.RU, o.AssetTag}
}

func (o *RackUnit) MemberPointers() []interface{} {
	return []interface{}{&o.Alias, &o.NID, &o.RID, &o.Height, &o.Note, &o.Rack, &o.Hostname, &o.IPMI, &o.SID, &o.SerialNo, &o.Internal, &o.DC, &o.RU, &o.AssetTag}
}

func (o *RackUnit) Key() int64 {
	return 0
}

func (o *RackUnit) SetID(id int64) {
}

func (o *RackUnit) TableName() string {
	return "rackunits"
}

func (o *RackUnit) SelectFields() string {
	return "alias,nid,rid,height,note,rack,hostname,ipmi,sid,sn,internal,dc,ru,asset_tag"
}

func (o *RackUnit) InsertFields() string {
	return "alias,nid,rid,height,note,rack,hostname,ipmi,sid,sn,internal,dc,ru,asset_tag"
}

func (o *RackUnit) KeyField() string {
	return ""
}

func (o *RackUnit) KeyName() string {
	return ""
}

func (o *RackUnit) Names() []string {
	return []string{"Alias", "NID", "RID", "Height", "Note", "Rack", "Hostname", "IPMI", "SID", "SerialNo", "Internal", "DC", "RU", "AssetTag"}
}

func (o *RackUnit) ModifiedBy(user int64, t time.Time) {
}

//
// Tag DBObject generator
//
func (o Tag) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// Tag DBObject interface functions
//
func (o *Tag) InsertValues() []interface{} {
	return []interface{}{o.Name}
}

func (o *Tag) UpdateValues() []interface{} {
	return []interface{}{o.Name, o.TID}
}

func (o *Tag) MemberPointers() []interface{} {
	return []interface{}{&o.TID, &o.Name}
}

func (o *Tag) Key() int64 {
	return o.TID
}

func (o *Tag) SetID(id int64) {
	o.TID = id
}

func (o *Tag) TableName() string {
	return "tags"
}

func (o *Tag) SelectFields() string {
	return "tid,tag"
}

func (o *Tag) InsertFields() string {
	return "tid,tag"
}

func (o *Tag) KeyField() string {
	return "tid"
}

func (o *Tag) KeyName() string {
	return "TID"
}

func (o *Tag) Names() []string {
	return []string{"Name"}
}

func (o *Tag) ModifiedBy(user int64, t time.Time) {
}

//
// Server DBObject generator
//
func (o Server) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// Server DBObject interface functions
//
func (o *Server) InsertValues() []interface{} {
	return []interface{}{o.MacPort0, o.Modified, o.TID, o.RU, o.Assigned, o.PortIpmi, o.CPU, o.RID, o.IPInternal, o.MacIPMI, o.PortEth0, o.RemoteAddr, o.UID, o.AssetTag, o.CableEth1, o.Note, o.Alias, o.PartNo, o.IPIpmi, o.SerialNo, o.IPPublic, o.PortEth1, o.CableEth0, o.MacPort1, o.Height, o.Profile, o.CableIpmi, o.Hostname}
}

func (o *Server) UpdateValues() []interface{} {
	return []interface{}{o.MacPort0, o.Modified, o.TID, o.RU, o.Assigned, o.PortIpmi, o.CPU, o.RID, o.IPInternal, o.MacIPMI, o.PortEth0, o.RemoteAddr, o.UID, o.AssetTag, o.CableEth1, o.Note, o.Alias, o.PartNo, o.IPIpmi, o.SerialNo, o.IPPublic, o.PortEth1, o.CableEth0, o.MacPort1, o.Height, o.Profile, o.CableIpmi, o.Hostname, o.ID}
}

func (o *Server) MemberPointers() []interface{} {
	return []interface{}{&o.ID, &o.MacPort0, &o.Modified, &o.TID, &o.RU, &o.Assigned, &o.PortIpmi, &o.CPU, &o.RID, &o.IPInternal, &o.MacIPMI, &o.PortEth0, &o.RemoteAddr, &o.UID, &o.AssetTag, &o.CableEth1, &o.Note, &o.Alias, &o.PartNo, &o.IPIpmi, &o.SerialNo, &o.IPPublic, &o.PortEth1, &o.CableEth0, &o.MacPort1, &o.Height, &o.Profile, &o.CableIpmi, &o.Hostname}
}

func (o *Server) Key() int64 {
	return o.ID
}

func (o *Server) SetID(id int64) {
	o.ID = id
}

func (o *Server) TableName() string {
	return "servers"
}

func (o *Server) SelectFields() string {
	return "id,mac_eth0,modified,tid,ru,assigned,port_ipmi,cpu,rid,ip_internal,mac_ipmi,port_eth0,remote_addr,uid,asset_tag,cable_eth1,note,alias,vendor_sku,ip_ipmi,sn,ip_public,port_eth1,cable_eth0,mac_eth1,height,profile,cable_ipmi,hostname"
}

func (o *Server) InsertFields() string {
	return "id,mac_eth0,modified,tid,ru,assigned,port_ipmi,cpu,rid,ip_internal,mac_ipmi,port_eth0,remote_addr,uid,asset_tag,cable_eth1,note,alias,vendor_sku,ip_ipmi,sn,ip_public,port_eth1,cable_eth0,mac_eth1,height,profile,cable_ipmi,hostname"
}

func (o *Server) KeyField() string {
	return "id"
}

func (o *Server) KeyName() string {
	return "ID"
}

func (o *Server) Names() []string {
	return []string{"MacPort0", "Modified", "TID", "RU", "Assigned", "PortIpmi", "CPU", "RID", "IPInternal", "MacIPMI", "PortEth0", "RemoteAddr", "UID", "AssetTag", "CableEth1", "Note", "Alias", "PartNo", "IPIpmi", "SerialNo", "IPPublic", "PortEth1", "CableEth0", "MacPort1", "Height", "Profile", "CableIpmi", "Hostname"}
}

func (o *Server) ModifiedBy(user int64, t time.Time) {
	o.UID = user
	o.Modified = t
}

//
// Router DBObject generator
//
func (o Router) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// Router DBObject interface functions
//
func (o *Router) InsertValues() []interface{} {
	return []interface{}{o.RID, o.SerialNo, o.RemoteAddr, o.Modified, o.UID, o.Height, o.RU, o.Make, o.Hostname, o.Note, o.AssetTag, o.MgmtIP, o.PartNo, o.Model}
}

func (o *Router) UpdateValues() []interface{} {
	return []interface{}{o.RID, o.SerialNo, o.RemoteAddr, o.Modified, o.UID, o.Height, o.RU, o.Make, o.Hostname, o.Note, o.AssetTag, o.MgmtIP, o.PartNo, o.Model, o.ID}
}

func (o *Router) MemberPointers() []interface{} {
	return []interface{}{&o.ID, &o.RID, &o.SerialNo, &o.RemoteAddr, &o.Modified, &o.UID, &o.Height, &o.RU, &o.Make, &o.Hostname, &o.Note, &o.AssetTag, &o.MgmtIP, &o.PartNo, &o.Model}
}

func (o *Router) Key() int64 {
	return o.ID
}

func (o *Router) SetID(id int64) {
	o.ID = id
}

func (o *Router) TableName() string {
	return "routers"
}

func (o *Router) SelectFields() string {
	return "id,rid,sn,remote_addr,modified,uid,height,ru,make,hostname,note,asset_tag,ip_mgmt,sku,model"
}

func (o *Router) InsertFields() string {
	return "id,rid,sn,remote_addr,modified,uid,height,ru,make,hostname,note,asset_tag,ip_mgmt,sku,model"
}

func (o *Router) KeyField() string {
	return "id"
}

func (o *Router) KeyName() string {
	return "ID"
}

func (o *Router) Names() []string {
	return []string{"RID", "SerialNo", "RemoteAddr", "Modified", "UID", "Height", "RU", "Make", "Hostname", "Note", "AssetTag", "MgmtIP", "PartNo", "Model"}
}

func (o *Router) ModifiedBy(user int64, t time.Time) {
}

//
// Rack DBObject generator
//
func (o Rack) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// Rack DBObject interface functions
//
func (o *Rack) InsertValues() []interface{} {
	return []interface{}{o.XPos, o.YPos, o.UID, o.TS, o.DID, o.RUs, o.Label, o.VendorID}
}

func (o *Rack) UpdateValues() []interface{} {
	return []interface{}{o.XPos, o.YPos, o.UID, o.TS, o.DID, o.RUs, o.Label, o.VendorID, o.ID}
}

func (o *Rack) MemberPointers() []interface{} {
	return []interface{}{&o.ID, &o.XPos, &o.YPos, &o.UID, &o.TS, &o.DID, &o.RUs, &o.Label, &o.VendorID}
}

func (o *Rack) Key() int64 {
	return o.ID
}

func (o *Rack) SetID(id int64) {
	o.ID = id
}

func (o *Rack) TableName() string {
	return "racks"
}

func (o *Rack) SelectFields() string {
	return "id,x_pos,y_pos,uid,ts,did,rackunits,rack,vendor_id"
}

func (o *Rack) InsertFields() string {
	return "id,x_pos,y_pos,uid,ts,did,rackunits,rack,vendor_id"
}

func (o *Rack) KeyField() string {
	return "id"
}

func (o *Rack) KeyName() string {
	return "ID"
}

func (o *Rack) Names() []string {
	return []string{"XPos", "YPos", "UID", "TS", "DID", "RUs", "Label", "VendorID"}
}

func (o *Rack) ModifiedBy(user int64, t time.Time) {
}

//
// RackNet DBObject generator
//
func (o RackNet) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// RackNet DBObject interface functions
//
func (o *RackNet) InsertValues() []interface{} {
	return []interface{}{o.MaxIP, o.VID, o.CIDR, o.MinIP, o.FirstIP, o.LastIP, o.RID, o.Actual, o.Subnet}
}

func (o *RackNet) UpdateValues() []interface{} {
	return []interface{}{o.MaxIP, o.VID, o.CIDR, o.MinIP, o.FirstIP, o.LastIP, o.RID, o.Actual, o.Subnet}
}

func (o *RackNet) MemberPointers() []interface{} {
	return []interface{}{&o.MaxIP, &o.VID, &o.CIDR, &o.MinIP, &o.FirstIP, &o.LastIP, &o.RID, &o.Actual, &o.Subnet}
}

func (o *RackNet) Key() int64 {
	return 0
}

func (o *RackNet) SetID(id int64) {
}

func (o *RackNet) TableName() string {
	return "racknet"
}

func (o *RackNet) SelectFields() string {
	return "max_ip,vid,cidr,min_ip,first_ip,last_ip,rid,actual,subnet"
}

func (o *RackNet) InsertFields() string {
	return "max_ip,vid,cidr,min_ip,first_ip,last_ip,rid,actual,subnet"
}

func (o *RackNet) KeyField() string {
	return ""
}

func (o *RackNet) KeyName() string {
	return ""
}

func (o *RackNet) Names() []string {
	return []string{"MaxIP", "VID", "CIDR", "MinIP", "FirstIP", "LastIP", "RID", "Actual", "Subnet"}
}

func (o *RackNet) ModifiedBy(user int64, t time.Time) {
}

//
// VM DBObject generator
//
func (o VM) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// VM DBObject interface functions
//
func (o *VM) InsertValues() []interface{} {
	return []interface{}{o.SID, o.Private, o.Public, o.Note, o.Modified, o.UID, o.Hostname, o.VIP, o.Profile, o.RemoteAddr}
}

func (o *VM) UpdateValues() []interface{} {
	return []interface{}{o.SID, o.Private, o.Public, o.Note, o.Modified, o.UID, o.Hostname, o.VIP, o.Profile, o.RemoteAddr, o.ID}
}

func (o *VM) MemberPointers() []interface{} {
	return []interface{}{&o.ID, &o.SID, &o.Private, &o.Public, &o.Note, &o.Modified, &o.UID, &o.Hostname, &o.VIP, &o.Profile, &o.RemoteAddr}
}

func (o *VM) Key() int64 {
	return o.ID
}

func (o *VM) SetID(id int64) {
	o.ID = id
}

func (o *VM) TableName() string {
	return "vms"
}

func (o *VM) SelectFields() string {
	return "id,sid,private,public,note,modified,uid,hostname,vip,profile,remote_addr"
}

func (o *VM) InsertFields() string {
	return "id,sid,private,public,note,modified,uid,hostname,vip,profile,remote_addr"
}

func (o *VM) KeyField() string {
	return "id"
}

func (o *VM) KeyName() string {
	return "ID"
}

func (o *VM) Names() []string {
	return []string{"SID", "Private", "Public", "Note", "Modified", "UID", "Hostname", "VIP", "Profile", "RemoteAddr"}
}

func (o *VM) ModifiedBy(user int64, t time.Time) {
}

//
// Orphan DBObject generator
//
func (o Orphan) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// Orphan DBObject interface functions
//
func (o *Orphan) InsertValues() []interface{} {
	return []interface{}{o.Public, o.VIP, o.Note, o.DC, o.Hostname, o.Private}
}

func (o *Orphan) UpdateValues() []interface{} {
	return []interface{}{o.Public, o.VIP, o.Note, o.DC, o.Hostname, o.Private, o.ID}
}

func (o *Orphan) MemberPointers() []interface{} {
	return []interface{}{&o.ID, &o.Public, &o.VIP, &o.Note, &o.DC, &o.Hostname, &o.Private}
}

func (o *Orphan) Key() int64 {
	return o.ID
}

func (o *Orphan) SetID(id int64) {
	o.ID = id
}

func (o *Orphan) TableName() string {
	return "vmbad"
}

func (o *Orphan) SelectFields() string {
	return "rowid,public,vip,note,dc,hostname,private"
}

func (o *Orphan) InsertFields() string {
	return "rowid,public,vip,note,dc,hostname,private"
}

func (o *Orphan) KeyField() string {
	return "rowid"
}

func (o *Orphan) KeyName() string {
	return "ID"
}

func (o *Orphan) Names() []string {
	return []string{"Public", "VIP", "Note", "DC", "Hostname", "Private"}
}

func (o *Orphan) ModifiedBy(user int64, t time.Time) {
}

//
// Audit DBObject generator
//
func (o Audit) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// Audit DBObject interface functions
//
func (o *Audit) InsertValues() []interface{} {
	return []interface{}{o.VMs, o.Hostname, o.Eth0, o.SN, o.Asset, o.IpmiIP, o.IpmiMac, o.Mem, o.Kernel, o.IP, o.FQDN, o.IPs, o.Eth1, o.CPU, o.Release}
}

func (o *Audit) UpdateValues() []interface{} {
	return []interface{}{o.VMs, o.Hostname, o.Eth0, o.SN, o.Asset, o.IpmiIP, o.IpmiMac, o.Mem, o.Kernel, o.IP, o.FQDN, o.IPs, o.Eth1, o.CPU, o.Release}
}

func (o *Audit) MemberPointers() []interface{} {
	return []interface{}{&o.VMs, &o.Hostname, &o.Eth0, &o.SN, &o.Asset, &o.IpmiIP, &o.IpmiMac, &o.Mem, &o.Kernel, &o.IP, &o.FQDN, &o.IPs, &o.Eth1, &o.CPU, &o.Release}
}

func (o *Audit) Key() int64 {
	return 0
}

func (o *Audit) SetID(id int64) {
}

func (o *Audit) TableName() string {
	return "auditing"
}

func (o *Audit) SelectFields() string {
	return "vms,hostname,eth0,sn,asset,ipmi_ip,ipmi_mac,mem,kernel,remote_addr,fqdn,ips,eth1,cpu,release"
}

func (o *Audit) InsertFields() string {
	return "vms,hostname,eth0,sn,asset,ipmi_ip,ipmi_mac,mem,kernel,remote_addr,fqdn,ips,eth1,cpu,release"
}

func (o *Audit) KeyField() string {
	return ""
}

func (o *Audit) KeyName() string {
	return ""
}

func (o *Audit) Names() []string {
	return []string{"VMs", "Hostname", "Eth0", "SN", "Asset", "IpmiIP", "IpmiMac", "Mem", "Kernel", "IP", "FQDN", "IPs", "Eth1", "CPU", "Release"}
}

func (o *Audit) ModifiedBy(user int64, t time.Time) {
}

//
// PDU DBObject generator
//
func (o PDU) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// PDU DBObject interface functions
//
func (o *PDU) InsertValues() []interface{} {
	return []interface{}{o.IP, o.Netmask, o.Gateway, o.DNS, o.AssetTag, o.RID, o.Hostname}
}

func (o *PDU) UpdateValues() []interface{} {
	return []interface{}{o.IP, o.Netmask, o.Gateway, o.DNS, o.AssetTag, o.RID, o.Hostname, o.ID}
}

func (o *PDU) MemberPointers() []interface{} {
	return []interface{}{&o.ID, &o.IP, &o.Netmask, &o.Gateway, &o.DNS, &o.AssetTag, &o.RID, &o.Hostname}
}

func (o *PDU) Key() int64 {
	return o.ID
}

func (o *PDU) SetID(id int64) {
	o.ID = id
}

func (o *PDU) TableName() string {
	return "pdus"
}

func (o *PDU) SelectFields() string {
	return "id,ip_address,netmask,gateway,dns,asset_tag,rid,hostname"
}

func (o *PDU) InsertFields() string {
	return "id,ip_address,netmask,gateway,dns,asset_tag,rid,hostname"
}

func (o *PDU) KeyField() string {
	return "id"
}

func (o *PDU) KeyName() string {
	return "ID"
}

func (o *PDU) Names() []string {
	return []string{"IP", "Netmask", "Gateway", "DNS", "AssetTag", "RID", "Hostname"}
}

func (o *PDU) ModifiedBy(user int64, t time.Time) {
}

//
// VProfile DBObject generator
//
func (o VProfile) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// VProfile DBObject interface functions
//
func (o *VProfile) InsertValues() []interface{} {
	return []interface{}{o.Name}
}

func (o *VProfile) UpdateValues() []interface{} {
	return []interface{}{o.Name, o.VPID}
}

func (o *VProfile) MemberPointers() []interface{} {
	return []interface{}{&o.VPID, &o.Name}
}

func (o *VProfile) Key() int64 {
	return o.VPID
}

func (o *VProfile) SetID(id int64) {
	o.VPID = id
}

func (o *VProfile) TableName() string {
	return "vlan_profiles"
}

func (o *VProfile) SelectFields() string {
	return "vpid,name"
}

func (o *VProfile) InsertFields() string {
	return "vpid,name"
}

func (o *VProfile) KeyField() string {
	return "vpid"
}

func (o *VProfile) KeyName() string {
	return "VPID"
}

func (o *VProfile) Names() []string {
	return []string{"Name"}
}

func (o *VProfile) ModifiedBy(user int64, t time.Time) {
}

//
// VLAN DBObject generator
//
func (o VLAN) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// VLAN DBObject interface functions
//
func (o *VLAN) InsertValues() []interface{} {
	return []interface{}{o.DID, o.Name, o.Profile, o.Gateway, o.Route, o.Netmask, o.Modified, o.UID}
}

func (o *VLAN) UpdateValues() []interface{} {
	return []interface{}{o.DID, o.Name, o.Profile, o.Gateway, o.Route, o.Netmask, o.Modified, o.UID, o.ID}
}

func (o *VLAN) MemberPointers() []interface{} {
	return []interface{}{&o.ID, &o.DID, &o.Name, &o.Profile, &o.Gateway, &o.Route, &o.Netmask, &o.Modified, &o.UID}
}

func (o *VLAN) Key() int64 {
	return o.ID
}

func (o *VLAN) SetID(id int64) {
	o.ID = id
}

func (o *VLAN) TableName() string {
	return "vlans"
}

func (o *VLAN) SelectFields() string {
	return "id,did,name,profile,gateway,route,netmask,modified,user_id"
}

func (o *VLAN) InsertFields() string {
	return "id,did,name,profile,gateway,route,netmask,modified,user_id"
}

func (o *VLAN) KeyField() string {
	return "id"
}

func (o *VLAN) KeyName() string {
	return "ID"
}

func (o *VLAN) Names() []string {
	return []string{"DID", "Name", "Profile", "Gateway", "Route", "Netmask", "Modified", "UID"}
}

func (o *VLAN) ModifiedBy(user int64, t time.Time) {
	o.UID = user
	o.Modified = t
}
