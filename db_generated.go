// generated by dbgen ; DO NOT EDIT

package main

//
// User DBObject interface functions
//
func (o *User) InsertValues() []interface{} {
	return []interface{}{o.Password, o.Level, o.Login, o.First, o.Last, o.Email}
}

func (o *User) UpdateValues() []interface{} {
	return []interface{}{o.Password, o.Level, o.Login, o.First, o.Last, o.Email, o.ID}
}

func (o *User) MemberPointers() []interface{} {
	return []interface{}{&o.ID, &o.Password, &o.Level, &o.Login, &o.First, &o.Last, &o.Email}
}

func (o *User) Key() int64 {
	return o.ID
}

func (o *User) SetID(id int64) {
	o.ID = id
}

func (o *User) TableName() string {
	return "users"
}

func (o *User) SelectFields() string {
	return "id,password,admin,login,firstname,lastname,email"
}
func (o *User) KeyField() string {
	return "id"
}

//
// Datacenter DBObject interface functions
//
func (o *Datacenter) InsertValues() []interface{} {
	return []interface{}{o.Name, o.Location, o.Modified, o.RemoteAddr, o.UID}
}

func (o *Datacenter) UpdateValues() []interface{} {
	return []interface{}{o.Name, o.Location, o.Modified, o.RemoteAddr, o.UID, o.ID}
}

func (o *Datacenter) MemberPointers() []interface{} {
	return []interface{}{&o.ID, &o.Name, &o.Location, &o.Modified, &o.RemoteAddr, &o.UID}
}

func (o *Datacenter) Key() int64 {
	return o.ID
}

func (o *Datacenter) SetID(id int64) {
	o.ID = id
}

func (o *Datacenter) TableName() string {
	return "datacenters"
}

func (o *Datacenter) SelectFields() string {
	return "id,name,location,modified,remote_addr,uid"
}
func (o *Datacenter) KeyField() string {
	return "id"
}

//
// DCView DBObject interface functions
//
func (o *DCView) InsertValues() []interface{} {
	return []interface{}{o.DID, o.Hostname, o.AssetNumber, o.CPU, o.CPU_Speed, o.MemoryMB, o.Created}
}

func (o *DCView) UpdateValues() []interface{} {
	return []interface{}{o.DID, o.Hostname, o.AssetNumber, o.CPU, o.CPU_Speed, o.MemoryMB, o.Created, o.ID}
}

func (o *DCView) MemberPointers() []interface{} {
	return []interface{}{&o.ID, &o.DID, &o.Hostname, &o.AssetNumber, &o.CPU, &o.CPU_Speed, &o.MemoryMB, &o.Created}
}

func (o *DCView) Key() int64 {
	return o.ID
}

func (o *DCView) SetID(id int64) {
	o.ID = id
}

func (o *DCView) TableName() string {
	return "dcview"
}

func (o *DCView) SelectFields() string {
	return "id,datacenter,hostname,asset_number,cpu_id,cpu_speed,memory,created"
}
func (o *DCView) KeyField() string {
	return "id"
}

//
// ServerVMs DBObject interface functions
//
func (o *ServerVMs) InsertValues() []interface{} {
	return []interface{}{o.DC, o.Hostname, o.VMList, o.IDList}
}

func (o *ServerVMs) UpdateValues() []interface{} {
	return []interface{}{o.DC, o.Hostname, o.VMList, o.IDList, o.ID}
}

func (o *ServerVMs) MemberPointers() []interface{} {
	return []interface{}{&o.ID, &o.DC, &o.Hostname, &o.VMList, &o.IDList}
}

func (o *ServerVMs) Key() int64 {
	return o.ID
}

func (o *ServerVMs) SetID(id int64) {
	o.ID = id
}

func (o *ServerVMs) TableName() string {
	return "servervms"
}

func (o *ServerVMs) SelectFields() string {
	return "id,dc,hostname,vms,ids"
}
func (o *ServerVMs) KeyField() string {
	return "id"
}

//
// RackUnit DBObject interface functions
//
func (o *RackUnit) InsertValues() []interface{} {
	return []interface{}{o.DC, o.NID, o.RU, o.Height, o.IPMI, o.Rack, o.SID, o.RID, o.Hostname, o.Alias, o.Internal}
}

func (o *RackUnit) UpdateValues() []interface{} {
	return []interface{}{o.DC, o.NID, o.RU, o.Height, o.IPMI, o.Rack, o.SID, o.RID, o.Hostname, o.Alias, o.Internal}
}

func (o *RackUnit) MemberPointers() []interface{} {
	return []interface{}{&o.DC, &o.NID, &o.RU, &o.Height, &o.IPMI, &o.Rack, &o.SID, &o.RID, &o.Hostname, &o.Alias, &o.Internal}
}

func (o *RackUnit) Key() int64 {
	return 0
}

func (o *RackUnit) SetID(id int64) {
}

func (o *RackUnit) TableName() string {
	return "rackunits"
}

func (o *RackUnit) SelectFields() string {
	return "dc,nid,ru,height,ipmi,rack,sid,rid,hostname,alias,internal"
}
func (o *RackUnit) KeyField() string {
	return ""
}

//
// Server DBObject interface functions
//
func (o *Server) InsertValues() []interface{} {
	return []interface{}{o.Note, o.IPPublic, o.CableEth1, o.MacIPMI, o.RU, o.CableIpmi, o.Height, o.Alias, o.Profile, o.Modified, o.IPInternal, o.CableEth0, o.UID, o.Hostname, o.AssetTag, o.PortEth1, o.PartNo, o.PortEth0, o.MacPort0, o.MacPort1, o.RemoteAddr, o.RID, o.Assigned, o.SerialNo, o.IPIpmi, o.PortIpmi, o.CPU}
}

func (o *Server) UpdateValues() []interface{} {
	return []interface{}{o.Note, o.IPPublic, o.CableEth1, o.MacIPMI, o.RU, o.CableIpmi, o.Height, o.Alias, o.Profile, o.Modified, o.IPInternal, o.CableEth0, o.UID, o.Hostname, o.AssetTag, o.PortEth1, o.PartNo, o.PortEth0, o.MacPort0, o.MacPort1, o.RemoteAddr, o.RID, o.Assigned, o.SerialNo, o.IPIpmi, o.PortIpmi, o.CPU, o.ID}
}

func (o *Server) MemberPointers() []interface{} {
	return []interface{}{&o.ID, &o.Note, &o.IPPublic, &o.CableEth1, &o.MacIPMI, &o.RU, &o.CableIpmi, &o.Height, &o.Alias, &o.Profile, &o.Modified, &o.IPInternal, &o.CableEth0, &o.UID, &o.Hostname, &o.AssetTag, &o.PortEth1, &o.PartNo, &o.PortEth0, &o.MacPort0, &o.MacPort1, &o.RemoteAddr, &o.RID, &o.Assigned, &o.SerialNo, &o.IPIpmi, &o.PortIpmi, &o.CPU}
}

func (o *Server) Key() int64 {
	return o.ID
}

func (o *Server) SetID(id int64) {
	o.ID = id
}

func (o *Server) TableName() string {
	return "servers"
}

func (o *Server) SelectFields() string {
	return "id,note,ip_public,cable_eth1,mac_ipmi,ru,cable_ipmi,height,alias,profile,modified,ip_internal,cable_eth0,uid,hostname,asset_tag,port_eth1,vendor_sku,port_eth0,mac_eth0,mac_eth1,remote_addr,rid,assigned,sn,ip_ipmi,port_ipmi,cpu"
}
func (o *Server) KeyField() string {
	return "id"
}

//
// Router DBObject interface functions
//
func (o *Router) InsertValues() []interface{} {
	return []interface{}{o.Note, o.AssetTag, o.Modified, o.Make, o.SerialNo, o.Hostname, o.PartNo, o.UID, o.RID, o.Height, o.RU, o.Model, o.MgmtIP, o.RemoteAddr}
}

func (o *Router) UpdateValues() []interface{} {
	return []interface{}{o.Note, o.AssetTag, o.Modified, o.Make, o.SerialNo, o.Hostname, o.PartNo, o.UID, o.RID, o.Height, o.RU, o.Model, o.MgmtIP, o.RemoteAddr, o.ID}
}

func (o *Router) MemberPointers() []interface{} {
	return []interface{}{&o.ID, &o.Note, &o.AssetTag, &o.Modified, &o.Make, &o.SerialNo, &o.Hostname, &o.PartNo, &o.UID, &o.RID, &o.Height, &o.RU, &o.Model, &o.MgmtIP, &o.RemoteAddr}
}

func (o *Router) Key() int64 {
	return o.ID
}

func (o *Router) SetID(id int64) {
	o.ID = id
}

func (o *Router) TableName() string {
	return "routers"
}

func (o *Router) SelectFields() string {
	return "id,note,asset_tag,modified,make,sn,hostname,sku,uid,rid,height,ru,model,ip_mgmt,remote_addr"
}
func (o *Router) KeyField() string {
	return "id"
}

//
// Rack DBObject interface functions
//
func (o *Rack) InsertValues() []interface{} {
	return []interface{}{o.VendorID, o.XPos, o.YPos, o.UID, o.TS, o.DID, o.RUs, o.Label}
}

func (o *Rack) UpdateValues() []interface{} {
	return []interface{}{o.VendorID, o.XPos, o.YPos, o.UID, o.TS, o.DID, o.RUs, o.Label, o.ID}
}

func (o *Rack) MemberPointers() []interface{} {
	return []interface{}{&o.ID, &o.VendorID, &o.XPos, &o.YPos, &o.UID, &o.TS, &o.DID, &o.RUs, &o.Label}
}

func (o *Rack) Key() int64 {
	return o.ID
}

func (o *Rack) SetID(id int64) {
	o.ID = id
}

func (o *Rack) TableName() string {
	return "racks"
}

func (o *Rack) SelectFields() string {
	return "id,vendor_id,x_pos,y_pos,uid,ts,did,rackunits,rack"
}
func (o *Rack) KeyField() string {
	return "id"
}

//
// RackNet DBObject interface functions
//
func (o *RackNet) InsertValues() []interface{} {
	return []interface{}{o.MaxIP, o.LastIP, o.RID, o.Actual, o.Subnet, o.FirstIP, o.VID, o.CIDR, o.MinIP}
}

func (o *RackNet) UpdateValues() []interface{} {
	return []interface{}{o.MaxIP, o.LastIP, o.RID, o.Actual, o.Subnet, o.FirstIP, o.VID, o.CIDR, o.MinIP}
}

func (o *RackNet) MemberPointers() []interface{} {
	return []interface{}{&o.MaxIP, &o.LastIP, &o.RID, &o.Actual, &o.Subnet, &o.FirstIP, &o.VID, &o.CIDR, &o.MinIP}
}

func (o *RackNet) Key() int64 {
	return 0
}

func (o *RackNet) SetID(id int64) {
}

func (o *RackNet) TableName() string {
	return "racknet"
}

func (o *RackNet) SelectFields() string {
	return "max_ip,last_ip,rid,actual,subnet,first_ip,vid,cidr,min_ip"
}
func (o *RackNet) KeyField() string {
	return ""
}

//
// VM DBObject interface functions
//
func (o *VM) InsertValues() []interface{} {
	return []interface{}{o.Public, o.Profile, o.Modified, o.UID, o.Hostname, o.Private, o.VIP, o.Note, o.RemoteAddr, o.SID}
}

func (o *VM) UpdateValues() []interface{} {
	return []interface{}{o.Public, o.Profile, o.Modified, o.UID, o.Hostname, o.Private, o.VIP, o.Note, o.RemoteAddr, o.SID, o.ID}
}

func (o *VM) MemberPointers() []interface{} {
	return []interface{}{&o.ID, &o.Public, &o.Profile, &o.Modified, &o.UID, &o.Hostname, &o.Private, &o.VIP, &o.Note, &o.RemoteAddr, &o.SID}
}

func (o *VM) Key() int64 {
	return o.ID
}

func (o *VM) SetID(id int64) {
	o.ID = id
}

func (o *VM) TableName() string {
	return "vms"
}

func (o *VM) SelectFields() string {
	return "id,public,profile,modified,uid,hostname,private,vip,note,remote_addr,sid"
}
func (o *VM) KeyField() string {
	return "id"
}

//
// Orphan DBObject interface functions
//
func (o *Orphan) InsertValues() []interface{} {
	return []interface{}{o.DC, o.Hostname, o.Private, o.Public, o.VIP, o.Note}
}

func (o *Orphan) UpdateValues() []interface{} {
	return []interface{}{o.DC, o.Hostname, o.Private, o.Public, o.VIP, o.Note, o.ID}
}

func (o *Orphan) MemberPointers() []interface{} {
	return []interface{}{&o.ID, &o.DC, &o.Hostname, &o.Private, &o.Public, &o.VIP, &o.Note}
}

func (o *Orphan) Key() int64 {
	return o.ID
}

func (o *Orphan) SetID(id int64) {
	o.ID = id
}

func (o *Orphan) TableName() string {
	return "vmbad"
}

func (o *Orphan) SelectFields() string {
	return "rowid,dc,hostname,private,public,vip,note"
}
func (o *Orphan) KeyField() string {
	return "rowid"
}

//
// Audit DBObject interface functions
//
func (o *Audit) InsertValues() []interface{} {
	return []interface{}{o.IP, o.IPs, o.Eth0, o.Eth1, o.Asset, o.IPMI_IP, o.IPMI_MAC, o.Hostname, o.Mem, o.CPU, o.SN}
}

func (o *Audit) UpdateValues() []interface{} {
	return []interface{}{o.IP, o.IPs, o.Eth0, o.Eth1, o.Asset, o.IPMI_IP, o.IPMI_MAC, o.Hostname, o.Mem, o.CPU, o.SN}
}

func (o *Audit) MemberPointers() []interface{} {
	return []interface{}{&o.IP, &o.IPs, &o.Eth0, &o.Eth1, &o.Asset, &o.IPMI_IP, &o.IPMI_MAC, &o.Hostname, &o.Mem, &o.CPU, &o.SN}
}

func (o *Audit) Key() int64 {
	return 0
}

func (o *Audit) SetID(id int64) {
}

func (o *Audit) TableName() string {
	return "auditing"
}

func (o *Audit) SelectFields() string {
	return "remote_addr,ips,eth0,eth1,asset,ipmi_ip,ipmi_mac,hostname,mem,cpu,sn"
}
func (o *Audit) KeyField() string {
	return ""
}

//
// VLAN DBObject interface functions
//
func (o *VLAN) InsertValues() []interface{} {
	return []interface{}{o.Route, o.Netmask, o.DID, o.Name, o.Gateway}
}

func (o *VLAN) UpdateValues() []interface{} {
	return []interface{}{o.Route, o.Netmask, o.DID, o.Name, o.Gateway, o.ID}
}

func (o *VLAN) MemberPointers() []interface{} {
	return []interface{}{&o.ID, &o.Route, &o.Netmask, &o.DID, &o.Name, &o.Gateway}
}

func (o *VLAN) Key() int64 {
	return o.ID
}

func (o *VLAN) SetID(id int64) {
	o.ID = id
}

func (o *VLAN) TableName() string {
	return "vlans"
}

func (o *VLAN) SelectFields() string {
	return "id,route,netmask,did,name,gateway"
}
func (o *VLAN) KeyField() string {
	return "id"
}
