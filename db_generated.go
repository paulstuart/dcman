// generated by dbgen ; DO NOT EDIT

package main

import (
	"time"
)

//
// Hit DBObject generator
//
func (o Hit) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// Hit DBObject interface functions
//
func (o *Hit) InsertValues() []interface{} {
	return []interface{}{o.ID, o.Kind, o.Name}
}

func (o *Hit) UpdateValues() []interface{} {
	return []interface{}{o.ID, o.Kind, o.Name}
}

func (o *Hit) MemberPointers() []interface{} {
	return []interface{}{&o.ID, &o.Kind, &o.Name}
}

func (o *Hit) Key() int64 {
	return 0
}

func (o *Hit) SetID(id int64) {
}

func (o *Hit) TableName() string {
	return ""
}

func (o *Hit) SelectFields() string {
	return "id,kind,name"
}

func (o *Hit) InsertFields() string {
	return "id,kind,name"
}

func (o *Hit) KeyField() string {
	return ""
}

func (o *Hit) KeyName() string {
	return ""
}

func (o *Hit) Names() []string {
	return []string{"ID", "Kind", "Name"}
}

func (o *Hit) ModifiedBy(user int64, t time.Time) {
}

//
// Summary DBObject generator
//
func (o Summary) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// Summary DBObject interface functions
//
func (o *Summary) InsertValues() []interface{} {
	return []interface{}{o.Site, o.Servers, o.VMs}
}

func (o *Summary) UpdateValues() []interface{} {
	return []interface{}{o.Site, o.Servers, o.VMs, o.ID}
}

func (o *Summary) MemberPointers() []interface{} {
	return []interface{}{&o.ID, &o.Site, &o.Servers, &o.VMs}
}

func (o *Summary) Key() int64 {
	return o.ID
}

func (o *Summary) SetID(id int64) {
	o.ID = id
}

func (o *Summary) TableName() string {
	return "summary"
}

func (o *Summary) SelectFields() string {
	return "sti,site,servers,vms"
}

func (o *Summary) InsertFields() string {
	return "sti,site,servers,vms"
}

func (o *Summary) KeyField() string {
	return "sti"
}

func (o *Summary) KeyName() string {
	return "ID"
}

func (o *Summary) Names() []string {
	return []string{"Site", "Servers", "VMs"}
}

func (o *Summary) ModifiedBy(user int64, t time.Time) {
}

//
// User DBObject generator
//
func (o User) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// User DBObject interface functions
//
func (o *User) InsertValues() []interface{} {
	return []interface{}{o.Last, o.Email, o.APIKey, o.Level, o.Login, o.First}
}

func (o *User) UpdateValues() []interface{} {
	return []interface{}{o.Last, o.Email, o.APIKey, o.Level, o.Login, o.First, o.USR}
}

func (o *User) MemberPointers() []interface{} {
	return []interface{}{&o.USR, &o.Last, &o.Email, &o.APIKey, &o.Level, &o.Login, &o.First}
}

func (o *User) Key() int64 {
	return o.USR
}

func (o *User) SetID(id int64) {
	o.USR = id
}

func (o *User) TableName() string {
	return "users"
}

func (o *User) SelectFields() string {
	return "usr,lastname,email,apikey,admin,login,firstname"
}

func (o *User) InsertFields() string {
	return "usr,lastname,email,apikey,admin,login,firstname"
}

func (o *User) KeyField() string {
	return "usr"
}

func (o *User) KeyName() string {
	return "USR"
}

func (o *User) Names() []string {
	return []string{"Last", "Email", "APIKey", "Level", "Login", "First"}
}

func (o *User) ModifiedBy(user int64, t time.Time) {
}

//
// FullUser DBObject generator
//
func (o FullUser) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// FullUser DBObject interface functions
//
func (o *FullUser) InsertValues() []interface{} {
	return []interface{}{o.APIKey, o.Password, o.Salt, o.Level, o.Login, o.First, o.Last, o.Email}
}

func (o *FullUser) UpdateValues() []interface{} {
	return []interface{}{o.APIKey, o.Password, o.Salt, o.Level, o.Login, o.First, o.Last, o.Email, o.USR}
}

func (o *FullUser) MemberPointers() []interface{} {
	return []interface{}{&o.USR, &o.APIKey, &o.Password, &o.Salt, &o.Level, &o.Login, &o.First, &o.Last, &o.Email}
}

func (o *FullUser) Key() int64 {
	return o.USR
}

func (o *FullUser) SetID(id int64) {
	o.USR = id
}

func (o *FullUser) TableName() string {
	return "users"
}

func (o *FullUser) SelectFields() string {
	return "usr,apikey,pw_hash,pw_salt,admin,login,firstname,lastname,email"
}

func (o *FullUser) InsertFields() string {
	return "usr,apikey,pw_hash,pw_salt,admin,login,firstname,lastname,email"
}

func (o *FullUser) KeyField() string {
	return "usr"
}

func (o *FullUser) KeyName() string {
	return "USR"
}

func (o *FullUser) Names() []string {
	return []string{"APIKey", "Password", "Salt", "Level", "Login", "First", "Last", "Email"}
}

func (o *FullUser) ModifiedBy(user int64, t time.Time) {
}

//
// Vendor DBObject generator
//
func (o Vendor) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// Vendor DBObject interface functions
//
func (o *Vendor) InsertValues() []interface{} {
	return []interface{}{o.Note, o.USR, o.Address, o.State, o.Country, o.City, o.Postal, o.Modified, o.Name, o.WWW, o.Phone}
}

func (o *Vendor) UpdateValues() []interface{} {
	return []interface{}{o.Note, o.USR, o.Address, o.State, o.Country, o.City, o.Postal, o.Modified, o.Name, o.WWW, o.Phone, o.VID}
}

func (o *Vendor) MemberPointers() []interface{} {
	return []interface{}{&o.VID, &o.Note, &o.USR, &o.Address, &o.State, &o.Country, &o.City, &o.Postal, &o.Modified, &o.Name, &o.WWW, &o.Phone}
}

func (o *Vendor) Key() int64 {
	return o.VID
}

func (o *Vendor) SetID(id int64) {
	o.VID = id
}

func (o *Vendor) TableName() string {
	return "vendors"
}

func (o *Vendor) SelectFields() string {
	return "vid,note,usr,address,state,country,city,postal,ts,name,www,phone"
}

func (o *Vendor) InsertFields() string {
	return "vid,note,usr,address,state,country,city,postal,ts,name,www,phone"
}

func (o *Vendor) KeyField() string {
	return "vid"
}

func (o *Vendor) KeyName() string {
	return "VID"
}

func (o *Vendor) Names() []string {
	return []string{"Note", "USR", "Address", "State", "Country", "City", "Postal", "Modified", "Name", "WWW", "Phone"}
}

func (o *Vendor) ModifiedBy(user int64, t time.Time) {
	o.USR = user
	o.Modified = t
}

//
// IPType DBObject generator
//
func (o IPType) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// IPType DBObject interface functions
//
func (o *IPType) InsertValues() []interface{} {
	return []interface{}{o.Name}
}

func (o *IPType) UpdateValues() []interface{} {
	return []interface{}{o.Name, o.IPT}
}

func (o *IPType) MemberPointers() []interface{} {
	return []interface{}{&o.IPT, &o.Name}
}

func (o *IPType) Key() int64 {
	return o.IPT
}

func (o *IPType) SetID(id int64) {
	o.IPT = id
}

func (o *IPType) TableName() string {
	return "ip_types"
}

func (o *IPType) SelectFields() string {
	return "ipt,name"
}

func (o *IPType) InsertFields() string {
	return "ipt,name"
}

func (o *IPType) KeyField() string {
	return "ipt"
}

func (o *IPType) KeyName() string {
	return "IPT"
}

func (o *IPType) Names() []string {
	return []string{"Name"}
}

func (o *IPType) ModifiedBy(user int64, t time.Time) {
}

//
// RMA DBObject generator
//
func (o RMA) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// RMA DBObject interface functions
//
func (o *RMA) InsertValues() []interface{} {
	return []interface{}{o.OldPID, o.VendorRMA, o.DCTicket, o.Receiving, o.Received, o.Created, o.USR, o.STI, o.DID, o.VID, o.ShipTrack, o.NewPID, o.Jira, o.RecvTrack, o.Note, o.Shipped, o.Closed}
}

func (o *RMA) UpdateValues() []interface{} {
	return []interface{}{o.OldPID, o.VendorRMA, o.DCTicket, o.Receiving, o.Received, o.Created, o.USR, o.STI, o.DID, o.VID, o.ShipTrack, o.NewPID, o.Jira, o.RecvTrack, o.Note, o.Shipped, o.Closed, o.RMD}
}

func (o *RMA) MemberPointers() []interface{} {
	return []interface{}{&o.RMD, &o.OldPID, &o.VendorRMA, &o.DCTicket, &o.Receiving, &o.Received, &o.Created, &o.USR, &o.STI, &o.DID, &o.VID, &o.ShipTrack, &o.NewPID, &o.Jira, &o.RecvTrack, &o.Note, &o.Shipped, &o.Closed}
}

func (o *RMA) Key() int64 {
	return o.RMD
}

func (o *RMA) SetID(id int64) {
	o.RMD = id
}

func (o *RMA) TableName() string {
	return "rmas"
}

func (o *RMA) SelectFields() string {
	return "rmd,old_pid,vendor_rma,dc_ticket,dc_receiving,date_received,date_created,usr,sti,did,vid,ship_tracking,new_pid,jira,recv_tracking,note,date_shipped,date_closed"
}

func (o *RMA) InsertFields() string {
	return "rmd,old_pid,vendor_rma,dc_ticket,dc_receiving,date_received,date_created,usr,sti,did,vid,ship_tracking,new_pid,jira,recv_tracking,note,date_shipped,date_closed"
}

func (o *RMA) KeyField() string {
	return "rmd"
}

func (o *RMA) KeyName() string {
	return "RMD"
}

func (o *RMA) Names() []string {
	return []string{"OldPID", "VendorRMA", "DCTicket", "Receiving", "Received", "Created", "USR", "STI", "DID", "VID", "ShipTrack", "NewPID", "Jira", "RecvTrack", "Note", "Shipped", "Closed"}
}

func (o *RMA) ModifiedBy(user int64, t time.Time) {
}

//
// RMAView DBObject generator
//
func (o RMAView) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// RMAView DBObject interface functions
//
func (o *RMAView) InsertValues() []interface{} {
	return []interface{}{o.DID, o.Created, o.STI, o.Hostname, o.PartSN, o.PartNumber, o.Receiving, o.DCTicket, o.Received, o.NewPID, o.Site, o.Jira, o.ShipTrack, o.RecvTrack, o.Note, o.Shipped, o.Closed, o.VID, o.OldPID, o.DeviceSN, o.Description, o.VendorRMA, o.USR}
}

func (o *RMAView) UpdateValues() []interface{} {
	return []interface{}{o.DID, o.Created, o.STI, o.Hostname, o.PartSN, o.PartNumber, o.Receiving, o.DCTicket, o.Received, o.NewPID, o.Site, o.Jira, o.ShipTrack, o.RecvTrack, o.Note, o.Shipped, o.Closed, o.VID, o.OldPID, o.DeviceSN, o.Description, o.VendorRMA, o.USR, o.RMD}
}

func (o *RMAView) MemberPointers() []interface{} {
	return []interface{}{&o.RMD, &o.DID, &o.Created, &o.STI, &o.Hostname, &o.PartSN, &o.PartNumber, &o.Receiving, &o.DCTicket, &o.Received, &o.NewPID, &o.Site, &o.Jira, &o.ShipTrack, &o.RecvTrack, &o.Note, &o.Shipped, &o.Closed, &o.VID, &o.OldPID, &o.DeviceSN, &o.Description, &o.VendorRMA, &o.USR}
}

func (o *RMAView) Key() int64 {
	return o.RMD
}

func (o *RMAView) SetID(id int64) {
	o.RMD = id
}

func (o *RMAView) TableName() string {
	return "rmas_view"
}

func (o *RMAView) SelectFields() string {
	return "rmd,did,date_created,sti,hostname,part_sn,part_no,dc_receiving,dc_ticket,date_received,new_pid,site,jira,ship_tracking,recv_tracking,note,date_shipped,date_closed,vid,old_pid,device_sn,description,vendor_rma,usr"
}

func (o *RMAView) InsertFields() string {
	return "rmd,did,date_created,sti,hostname,part_sn,part_no,dc_receiving,dc_ticket,date_received,new_pid,site,jira,ship_tracking,recv_tracking,note,date_shipped,date_closed,vid,old_pid,device_sn,description,vendor_rma,usr"
}

func (o *RMAView) KeyField() string {
	return "rmd"
}

func (o *RMAView) KeyName() string {
	return "RMD"
}

func (o *RMAView) Names() []string {
	return []string{"DID", "Created", "STI", "Hostname", "PartSN", "PartNumber", "Receiving", "DCTicket", "Received", "NewPID", "Site", "Jira", "ShipTrack", "RecvTrack", "Note", "Shipped", "Closed", "VID", "OldPID", "DeviceSN", "Description", "VendorRMA", "USR"}
}

func (o *RMAView) ModifiedBy(user int64, t time.Time) {
}

//
// Manufacturer DBObject generator
//
func (o Manufacturer) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// Manufacturer DBObject interface functions
//
func (o *Manufacturer) InsertValues() []interface{} {
	return []interface{}{o.Name, o.Note, o.AKA, o.URL, o.USR, o.Modified}
}

func (o *Manufacturer) UpdateValues() []interface{} {
	return []interface{}{o.Name, o.Note, o.AKA, o.URL, o.USR, o.Modified, o.MID}
}

func (o *Manufacturer) MemberPointers() []interface{} {
	return []interface{}{&o.MID, &o.Name, &o.Note, &o.AKA, &o.URL, &o.USR, &o.Modified}
}

func (o *Manufacturer) Key() int64 {
	return o.MID
}

func (o *Manufacturer) SetID(id int64) {
	o.MID = id
}

func (o *Manufacturer) TableName() string {
	return "mfgrs"
}

func (o *Manufacturer) SelectFields() string {
	return "mid,name,note,aka,url,usr,ts"
}

func (o *Manufacturer) InsertFields() string {
	return "mid,name,note,aka,url,usr,ts"
}

func (o *Manufacturer) KeyField() string {
	return "mid"
}

func (o *Manufacturer) KeyName() string {
	return "MID"
}

func (o *Manufacturer) Names() []string {
	return []string{"Name", "Note", "AKA", "URL", "USR", "Modified"}
}

func (o *Manufacturer) ModifiedBy(user int64, t time.Time) {
	o.USR = user
	o.Modified = t
}

//
// PartType DBObject generator
//
func (o PartType) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// PartType DBObject interface functions
//
func (o *PartType) InsertValues() []interface{} {
	return []interface{}{o.Name, o.USR, o.Modified}
}

func (o *PartType) UpdateValues() []interface{} {
	return []interface{}{o.Name, o.USR, o.Modified, o.PTI}
}

func (o *PartType) MemberPointers() []interface{} {
	return []interface{}{&o.PTI, &o.Name, &o.USR, &o.Modified}
}

func (o *PartType) Key() int64 {
	return o.PTI
}

func (o *PartType) SetID(id int64) {
	o.PTI = id
}

func (o *PartType) TableName() string {
	return "part_types"
}

func (o *PartType) SelectFields() string {
	return "pti,name,usr,ts"
}

func (o *PartType) InsertFields() string {
	return "pti,name,usr,ts"
}

func (o *PartType) KeyField() string {
	return "pti"
}

func (o *PartType) KeyName() string {
	return "PTI"
}

func (o *PartType) Names() []string {
	return []string{"Name", "USR", "Modified"}
}

func (o *PartType) ModifiedBy(user int64, t time.Time) {
	o.USR = user
	o.Modified = t
}

//
// SKU DBObject generator
//
func (o SKU) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// SKU DBObject interface functions
//
func (o *SKU) InsertValues() []interface{} {
	return []interface{}{o.Modified, o.MID, o.PTI, o.PartNumber, o.Description, o.SKU, o.USR}
}

func (o *SKU) UpdateValues() []interface{} {
	return []interface{}{o.Modified, o.MID, o.PTI, o.PartNumber, o.Description, o.SKU, o.USR, o.KID}
}

func (o *SKU) MemberPointers() []interface{} {
	return []interface{}{&o.KID, &o.Modified, &o.MID, &o.PTI, &o.PartNumber, &o.Description, &o.SKU, &o.USR}
}

func (o *SKU) Key() int64 {
	return o.KID
}

func (o *SKU) SetID(id int64) {
	o.KID = id
}

func (o *SKU) TableName() string {
	return "skus"
}

func (o *SKU) SelectFields() string {
	return "kid,ts,mid,pti,part_no,description,sku,usr"
}

func (o *SKU) InsertFields() string {
	return "kid,ts,mid,pti,part_no,description,sku,usr"
}

func (o *SKU) KeyField() string {
	return "kid"
}

func (o *SKU) KeyName() string {
	return "KID"
}

func (o *SKU) Names() []string {
	return []string{"Modified", "MID", "PTI", "PartNumber", "Description", "SKU", "USR"}
}

func (o *SKU) ModifiedBy(user int64, t time.Time) {
	o.USR = user
	o.Modified = t
}

//
// Part DBObject generator
//
func (o Part) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// Part DBObject interface functions
//
func (o *Part) InsertValues() []interface{} {
	return []interface{}{o.DID, o.STI, o.Serial, o.AssetTag, o.USR, o.Modified, o.KID, o.VID, o.Location, o.Unused, o.Bad, o.Cents}
}

func (o *Part) UpdateValues() []interface{} {
	return []interface{}{o.DID, o.STI, o.Serial, o.AssetTag, o.USR, o.Modified, o.KID, o.VID, o.Location, o.Unused, o.Bad, o.Cents, o.PID}
}

func (o *Part) MemberPointers() []interface{} {
	return []interface{}{&o.PID, &o.DID, &o.STI, &o.Serial, &o.AssetTag, &o.USR, &o.Modified, &o.KID, &o.VID, &o.Location, &o.Unused, &o.Bad, &o.Cents}
}

func (o *Part) Key() int64 {
	return o.PID
}

func (o *Part) SetID(id int64) {
	o.PID = id
}

func (o *Part) TableName() string {
	return "parts"
}

func (o *Part) SelectFields() string {
	return "pid,did,sti,serial_no,asset_tag,usr,ts,kid,vid,location,unused,bad,cents"
}

func (o *Part) InsertFields() string {
	return "pid,did,sti,serial_no,asset_tag,usr,ts,kid,vid,location,unused,bad,cents"
}

func (o *Part) KeyField() string {
	return "pid"
}

func (o *Part) KeyName() string {
	return "PID"
}

func (o *Part) Names() []string {
	return []string{"DID", "STI", "Serial", "AssetTag", "USR", "Modified", "KID", "VID", "Location", "Unused", "Bad", "Cents"}
}

func (o *Part) ModifiedBy(user int64, t time.Time) {
	o.USR = user
	o.Modified = t
}

//
// PartView DBObject generator
//
func (o PartView) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// PartView DBObject interface functions
//
func (o *PartView) InsertValues() []interface{} {
	return []interface{}{o.VID, o.DID, o.STI, o.RMD, o.Site, o.Bad, o.KID, o.Serial, o.Description, o.Mfgr, o.Cents, o.Vendor, o.Hostname, o.Location, o.AssetTag, o.PartNumber, o.SKU, o.PartType, o.Price, o.Unused}
}

func (o *PartView) UpdateValues() []interface{} {
	return []interface{}{o.VID, o.DID, o.STI, o.RMD, o.Site, o.Bad, o.KID, o.Serial, o.Description, o.Mfgr, o.Cents, o.Vendor, o.Hostname, o.Location, o.AssetTag, o.PartNumber, o.SKU, o.PartType, o.Price, o.Unused, o.PID}
}

func (o *PartView) MemberPointers() []interface{} {
	return []interface{}{&o.PID, &o.VID, &o.DID, &o.STI, &o.RMD, &o.Site, &o.Bad, &o.KID, &o.Serial, &o.Description, &o.Mfgr, &o.Cents, &o.Vendor, &o.Hostname, &o.Location, &o.AssetTag, &o.PartNumber, &o.SKU, &o.PartType, &o.Price, &o.Unused}
}

func (o *PartView) Key() int64 {
	return o.PID
}

func (o *PartView) SetID(id int64) {
	o.PID = id
}

func (o *PartView) TableName() string {
	return "parts_view"
}

func (o *PartView) SelectFields() string {
	return "pid,vid,did,sti,rmd,site,bad,kid,serial_no,description,mfgr,cents,vendor,hostname,location,asset_tag,part_no,sku,part_type,price,unused"
}

func (o *PartView) InsertFields() string {
	return "pid,vid,did,sti,rmd,site,bad,kid,serial_no,description,mfgr,cents,vendor,hostname,location,asset_tag,part_no,sku,part_type,price,unused"
}

func (o *PartView) KeyField() string {
	return "pid"
}

func (o *PartView) KeyName() string {
	return "PID"
}

func (o *PartView) Names() []string {
	return []string{"VID", "DID", "STI", "RMD", "Site", "Bad", "KID", "Serial", "Description", "Mfgr", "Cents", "Vendor", "Hostname", "Location", "AssetTag", "PartNumber", "SKU", "PartType", "Price", "Unused"}
}

func (o *PartView) ModifiedBy(user int64, t time.Time) {
}

//
// Site DBObject generator
//
func (o Site) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// Site DBObject interface functions
//
func (o *Site) InsertValues() []interface{} {
	return []interface{}{o.Name, o.Address, o.Country, o.Phone, o.City, o.State, o.Postal, o.Web, o.USR, o.Modified}
}

func (o *Site) UpdateValues() []interface{} {
	return []interface{}{o.Name, o.Address, o.Country, o.Phone, o.City, o.State, o.Postal, o.Web, o.USR, o.Modified, o.STI}
}

func (o *Site) MemberPointers() []interface{} {
	return []interface{}{&o.STI, &o.Name, &o.Address, &o.Country, &o.Phone, &o.City, &o.State, &o.Postal, &o.Web, &o.USR, &o.Modified}
}

func (o *Site) Key() int64 {
	return o.STI
}

func (o *Site) SetID(id int64) {
	o.STI = id
}

func (o *Site) TableName() string {
	return "sites"
}

func (o *Site) SelectFields() string {
	return "sti,name,address,country,phone,city,state,postal,web,usr,ts"
}

func (o *Site) InsertFields() string {
	return "sti,name,address,country,phone,city,state,postal,web,usr,ts"
}

func (o *Site) KeyField() string {
	return "sti"
}

func (o *Site) KeyName() string {
	return "STI"
}

func (o *Site) Names() []string {
	return []string{"Name", "Address", "Country", "Phone", "City", "State", "Postal", "Web", "USR", "Modified"}
}

func (o *Site) ModifiedBy(user int64, t time.Time) {
	o.USR = user
	o.Modified = t
}

//
// Tag DBObject generator
//
func (o Tag) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// Tag DBObject interface functions
//
func (o *Tag) InsertValues() []interface{} {
	return []interface{}{o.Name}
}

func (o *Tag) UpdateValues() []interface{} {
	return []interface{}{o.Name, o.TID}
}

func (o *Tag) MemberPointers() []interface{} {
	return []interface{}{&o.TID, &o.Name}
}

func (o *Tag) Key() int64 {
	return o.TID
}

func (o *Tag) SetID(id int64) {
	o.TID = id
}

func (o *Tag) TableName() string {
	return "tags"
}

func (o *Tag) SelectFields() string {
	return "tid,tag"
}

func (o *Tag) InsertFields() string {
	return "tid,tag"
}

func (o *Tag) KeyField() string {
	return "tid"
}

func (o *Tag) KeyName() string {
	return "TID"
}

func (o *Tag) Names() []string {
	return []string{"Name"}
}

func (o *Tag) ModifiedBy(user int64, t time.Time) {
}

//
// Rack DBObject generator
//
func (o Rack) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// Rack DBObject interface functions
//
func (o *Rack) InsertValues() []interface{} {
	return []interface{}{o.STI, o.XPos, o.USR, o.TS, o.RUs, o.Label, o.VendorID, o.YPos, o.Note}
}

func (o *Rack) UpdateValues() []interface{} {
	return []interface{}{o.STI, o.XPos, o.USR, o.TS, o.RUs, o.Label, o.VendorID, o.YPos, o.Note, o.RID}
}

func (o *Rack) MemberPointers() []interface{} {
	return []interface{}{&o.RID, &o.STI, &o.XPos, &o.USR, &o.TS, &o.RUs, &o.Label, &o.VendorID, &o.YPos, &o.Note}
}

func (o *Rack) Key() int64 {
	return o.RID
}

func (o *Rack) SetID(id int64) {
	o.RID = id
}

func (o *Rack) TableName() string {
	return "racks"
}

func (o *Rack) SelectFields() string {
	return "rid,sti,x_pos,usr,ts,rackunits,rack,vendor_id,y_pos,note"
}

func (o *Rack) InsertFields() string {
	return "rid,sti,x_pos,usr,ts,rackunits,rack,vendor_id,y_pos,note"
}

func (o *Rack) KeyField() string {
	return "rid"
}

func (o *Rack) KeyName() string {
	return "RID"
}

func (o *Rack) Names() []string {
	return []string{"STI", "XPos", "USR", "TS", "RUs", "Label", "VendorID", "YPos", "Note"}
}

func (o *Rack) ModifiedBy(user int64, t time.Time) {
}

//
// RackView DBObject generator
//
func (o RackView) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// RackView DBObject interface functions
//
func (o *RackView) InsertValues() []interface{} {
	return []interface{}{o.STI, o.VendorID, o.Note, o.USR, o.TS, o.RUs, o.Label, o.Site, o.XPos, o.YPos}
}

func (o *RackView) UpdateValues() []interface{} {
	return []interface{}{o.STI, o.VendorID, o.Note, o.USR, o.TS, o.RUs, o.Label, o.Site, o.XPos, o.YPos, o.RID}
}

func (o *RackView) MemberPointers() []interface{} {
	return []interface{}{&o.RID, &o.STI, &o.VendorID, &o.Note, &o.USR, &o.TS, &o.RUs, &o.Label, &o.Site, &o.XPos, &o.YPos}
}

func (o *RackView) Key() int64 {
	return o.RID
}

func (o *RackView) SetID(id int64) {
	o.RID = id
}

func (o *RackView) TableName() string {
	return "racks_view"
}

func (o *RackView) SelectFields() string {
	return "rid,sti,vendor_id,note,usr,ts,rackunits,rack,site,x_pos,y_pos"
}

func (o *RackView) InsertFields() string {
	return "rid,sti,vendor_id,note,usr,ts,rackunits,rack,site,x_pos,y_pos"
}

func (o *RackView) KeyField() string {
	return "rid"
}

func (o *RackView) KeyName() string {
	return "RID"
}

func (o *RackView) Names() []string {
	return []string{"STI", "VendorID", "Note", "USR", "TS", "RUs", "Label", "Site", "XPos", "YPos"}
}

func (o *RackView) ModifiedBy(user int64, t time.Time) {
}

//
// VM DBObject generator
//
func (o VM) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// VM DBObject interface functions
//
func (o *VM) InsertValues() []interface{} {
	return []interface{}{o.DID, o.Hostname, o.Profile, o.Note, o.USR, o.Modified}
}

func (o *VM) UpdateValues() []interface{} {
	return []interface{}{o.DID, o.Hostname, o.Profile, o.Note, o.USR, o.Modified, o.VMI}
}

func (o *VM) MemberPointers() []interface{} {
	return []interface{}{&o.VMI, &o.DID, &o.Hostname, &o.Profile, &o.Note, &o.USR, &o.Modified}
}

func (o *VM) Key() int64 {
	return o.VMI
}

func (o *VM) SetID(id int64) {
	o.VMI = id
}

func (o *VM) TableName() string {
	return "vms"
}

func (o *VM) SelectFields() string {
	return "vmi,did,hostname,profile,note,usr,ts"
}

func (o *VM) InsertFields() string {
	return "vmi,did,hostname,profile,note,usr,ts"
}

func (o *VM) KeyField() string {
	return "vmi"
}

func (o *VM) KeyName() string {
	return "VMI"
}

func (o *VM) Names() []string {
	return []string{"DID", "Hostname", "Profile", "Note", "USR", "Modified"}
}

func (o *VM) ModifiedBy(user int64, t time.Time) {
}

//
// VMView DBObject generator
//
func (o VMView) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// VMView DBObject interface functions
//
func (o *VMView) InsertValues() []interface{} {
	return []interface{}{o.DID, o.STI, o.Profile, o.USR, o.Modified, o.RID, o.Rack, o.Site, o.Server, o.Hostname, o.Note}
}

func (o *VMView) UpdateValues() []interface{} {
	return []interface{}{o.DID, o.STI, o.Profile, o.USR, o.Modified, o.RID, o.Rack, o.Site, o.Server, o.Hostname, o.Note, o.VMI}
}

func (o *VMView) MemberPointers() []interface{} {
	return []interface{}{&o.VMI, &o.DID, &o.STI, &o.Profile, &o.USR, &o.Modified, &o.RID, &o.Rack, &o.Site, &o.Server, &o.Hostname, &o.Note}
}

func (o *VMView) Key() int64 {
	return o.VMI
}

func (o *VMView) SetID(id int64) {
	o.VMI = id
}

func (o *VMView) TableName() string {
	return "vms_view"
}

func (o *VMView) SelectFields() string {
	return "vmi,did,sti,profile,usr,ts,rid,rack,site,server,hostname,note"
}

func (o *VMView) InsertFields() string {
	return "vmi,did,sti,profile,usr,ts,rid,rack,site,server,hostname,note"
}

func (o *VMView) KeyField() string {
	return "vmi"
}

func (o *VMView) KeyName() string {
	return "VMI"
}

func (o *VMView) Names() []string {
	return []string{"DID", "STI", "Profile", "USR", "Modified", "RID", "Rack", "Site", "Server", "Hostname", "Note"}
}

func (o *VMView) ModifiedBy(user int64, t time.Time) {
}

//
// Audit DBObject generator
//
func (o Audit) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// Audit DBObject interface functions
//
func (o *Audit) InsertValues() []interface{} {
	return []interface{}{o.Asset, o.Mem, o.VMs, o.Hostname, o.FQDN, o.Eth1, o.IpmiIP, o.Kernel, o.IP, o.IPs, o.Eth0, o.IpmiMac, o.SN, o.CPU, o.Release}
}

func (o *Audit) UpdateValues() []interface{} {
	return []interface{}{o.Asset, o.Mem, o.VMs, o.Hostname, o.FQDN, o.Eth1, o.IpmiIP, o.Kernel, o.IP, o.IPs, o.Eth0, o.IpmiMac, o.SN, o.CPU, o.Release}
}

func (o *Audit) MemberPointers() []interface{} {
	return []interface{}{&o.Asset, &o.Mem, &o.VMs, &o.Hostname, &o.FQDN, &o.Eth1, &o.IpmiIP, &o.Kernel, &o.IP, &o.IPs, &o.Eth0, &o.IpmiMac, &o.SN, &o.CPU, &o.Release}
}

func (o *Audit) Key() int64 {
	return 0
}

func (o *Audit) SetID(id int64) {
}

func (o *Audit) TableName() string {
	return "auditing"
}

func (o *Audit) SelectFields() string {
	return "asset,mem,vms,hostname,fqdn,eth1,ipmi_ip,kernel,remote_addr,ips,eth0,ipmi_mac,sn,cpu,release"
}

func (o *Audit) InsertFields() string {
	return "asset,mem,vms,hostname,fqdn,eth1,ipmi_ip,kernel,remote_addr,ips,eth0,ipmi_mac,sn,cpu,release"
}

func (o *Audit) KeyField() string {
	return ""
}

func (o *Audit) KeyName() string {
	return ""
}

func (o *Audit) Names() []string {
	return []string{"Asset", "Mem", "VMs", "Hostname", "FQDN", "Eth1", "IpmiIP", "Kernel", "IP", "IPs", "Eth0", "IpmiMac", "SN", "CPU", "Release"}
}

func (o *Audit) ModifiedBy(user int64, t time.Time) {
}

//
// PDU DBObject generator
//
func (o PDU) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// PDU DBObject interface functions
//
func (o *PDU) InsertValues() []interface{} {
	return []interface{}{o.RID, o.Hostname, o.IP, o.Netmask, o.Gateway, o.DNS, o.AssetTag}
}

func (o *PDU) UpdateValues() []interface{} {
	return []interface{}{o.RID, o.Hostname, o.IP, o.Netmask, o.Gateway, o.DNS, o.AssetTag, o.ID}
}

func (o *PDU) MemberPointers() []interface{} {
	return []interface{}{&o.ID, &o.RID, &o.Hostname, &o.IP, &o.Netmask, &o.Gateway, &o.DNS, &o.AssetTag}
}

func (o *PDU) Key() int64 {
	return o.ID
}

func (o *PDU) SetID(id int64) {
	o.ID = id
}

func (o *PDU) TableName() string {
	return "pdus"
}

func (o *PDU) SelectFields() string {
	return "id,rid,hostname,ip_address,netmask,gateway,dns,asset_tag"
}

func (o *PDU) InsertFields() string {
	return "id,rid,hostname,ip_address,netmask,gateway,dns,asset_tag"
}

func (o *PDU) KeyField() string {
	return "id"
}

func (o *PDU) KeyName() string {
	return "ID"
}

func (o *PDU) Names() []string {
	return []string{"RID", "Hostname", "IP", "Netmask", "Gateway", "DNS", "AssetTag"}
}

func (o *PDU) ModifiedBy(user int64, t time.Time) {
}

//
// Inventory DBObject generator
//
func (o Inventory) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// Inventory DBObject interface functions
//
func (o *Inventory) InsertValues() []interface{} {
	return []interface{}{o.Mfgr, o.PartNumber, o.KID, o.PTI, o.Qty, o.Site, o.PartType, o.Description, o.Cents, o.Price}
}

func (o *Inventory) UpdateValues() []interface{} {
	return []interface{}{o.Mfgr, o.PartNumber, o.KID, o.PTI, o.Qty, o.Site, o.PartType, o.Description, o.Cents, o.Price, o.STI}
}

func (o *Inventory) MemberPointers() []interface{} {
	return []interface{}{&o.STI, &o.Mfgr, &o.PartNumber, &o.KID, &o.PTI, &o.Qty, &o.Site, &o.PartType, &o.Description, &o.Cents, &o.Price}
}

func (o *Inventory) Key() int64 {
	return o.STI
}

func (o *Inventory) SetID(id int64) {
	o.STI = id
}

func (o *Inventory) TableName() string {
	return "inventory"
}

func (o *Inventory) SelectFields() string {
	return "sti,mfgr,part_no,kid,pti,qty,site,part_type,description,cents,price"
}

func (o *Inventory) InsertFields() string {
	return "sti,mfgr,part_no,kid,pti,qty,site,part_type,description,cents,price"
}

func (o *Inventory) KeyField() string {
	return "sti"
}

func (o *Inventory) KeyName() string {
	return "STI"
}

func (o *Inventory) Names() []string {
	return []string{"Mfgr", "PartNumber", "KID", "PTI", "Qty", "Site", "PartType", "Description", "Cents", "Price"}
}

func (o *Inventory) ModifiedBy(user int64, t time.Time) {
}

//
// Contract DBObject generator
//
func (o Contract) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// Contract DBObject interface functions
//
func (o *Contract) InsertValues() []interface{} {
	return []interface{}{o.VID, o.Policy, o.Phone}
}

func (o *Contract) UpdateValues() []interface{} {
	return []interface{}{o.VID, o.Policy, o.Phone, o.CID}
}

func (o *Contract) MemberPointers() []interface{} {
	return []interface{}{&o.CID, &o.VID, &o.Policy, &o.Phone}
}

func (o *Contract) Key() int64 {
	return o.CID
}

func (o *Contract) SetID(id int64) {
	o.CID = id
}

func (o *Contract) TableName() string {
	return "contracts"
}

func (o *Contract) SelectFields() string {
	return "cid,vid,policy,phone"
}

func (o *Contract) InsertFields() string {
	return "cid,vid,policy,phone"
}

func (o *Contract) KeyField() string {
	return "cid"
}

func (o *Contract) KeyName() string {
	return "CID"
}

func (o *Contract) Names() []string {
	return []string{"VID", "Policy", "Phone"}
}

func (o *Contract) ModifiedBy(user int64, t time.Time) {
}

//
// DeviceType DBObject generator
//
func (o DeviceType) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// DeviceType DBObject interface functions
//
func (o *DeviceType) InsertValues() []interface{} {
	return []interface{}{o.Name}
}

func (o *DeviceType) UpdateValues() []interface{} {
	return []interface{}{o.Name, o.DTI}
}

func (o *DeviceType) MemberPointers() []interface{} {
	return []interface{}{&o.DTI, &o.Name}
}

func (o *DeviceType) Key() int64 {
	return o.DTI
}

func (o *DeviceType) SetID(id int64) {
	o.DTI = id
}

func (o *DeviceType) TableName() string {
	return "device_types"
}

func (o *DeviceType) SelectFields() string {
	return "dti,name"
}

func (o *DeviceType) InsertFields() string {
	return "dti,name"
}

func (o *DeviceType) KeyField() string {
	return "dti"
}

func (o *DeviceType) KeyName() string {
	return "DTI"
}

func (o *DeviceType) Names() []string {
	return []string{"Name"}
}

func (o *DeviceType) ModifiedBy(user int64, t time.Time) {
}

//
// Device DBObject generator
//
func (o Device) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// Device DBObject interface functions
//
func (o *Device) InsertValues() []interface{} {
	return []interface{}{o.KID, o.Note, o.USR, o.Height, o.Hostname, o.SerialNo, o.AssetTag, o.DTI, o.Alias, o.Profile, o.Assigned, o.Modified, o.RID, o.TID, o.RU}
}

func (o *Device) UpdateValues() []interface{} {
	return []interface{}{o.KID, o.Note, o.USR, o.Height, o.Hostname, o.SerialNo, o.AssetTag, o.DTI, o.Alias, o.Profile, o.Assigned, o.Modified, o.RID, o.TID, o.RU, o.DID}
}

func (o *Device) MemberPointers() []interface{} {
	return []interface{}{&o.DID, &o.KID, &o.Note, &o.USR, &o.Height, &o.Hostname, &o.SerialNo, &o.AssetTag, &o.DTI, &o.Alias, &o.Profile, &o.Assigned, &o.Modified, &o.RID, &o.TID, &o.RU}
}

func (o *Device) Key() int64 {
	return o.DID
}

func (o *Device) SetID(id int64) {
	o.DID = id
}

func (o *Device) TableName() string {
	return "devices"
}

func (o *Device) SelectFields() string {
	return "did,kid,note,usr,height,hostname,sn,asset_tag,dti,alias,profile,assigned,ts,rid,tid,ru"
}

func (o *Device) InsertFields() string {
	return "did,kid,note,usr,height,hostname,sn,asset_tag,dti,alias,profile,assigned,ts,rid,tid,ru"
}

func (o *Device) KeyField() string {
	return "did"
}

func (o *Device) KeyName() string {
	return "DID"
}

func (o *Device) Names() []string {
	return []string{"KID", "Note", "USR", "Height", "Hostname", "SerialNo", "AssetTag", "DTI", "Alias", "Profile", "Assigned", "Modified", "RID", "TID", "RU"}
}

func (o *Device) ModifiedBy(user int64, t time.Time) {
}

//
// DeviceView DBObject generator
//
func (o DeviceView) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// DeviceView DBObject interface functions
//
func (o *DeviceView) InsertValues() []interface{} {
	return []interface{}{o.Alias, o.Note, o.STI, o.RU, o.Hostname, o.SerialNo, o.AssetTag, o.Site, o.USR, o.Modified, o.DTI, o.TID, o.Rack, o.Height, o.Tag, o.KID, o.RID, o.Profile, o.Assigned, o.DevType}
}

func (o *DeviceView) UpdateValues() []interface{} {
	return []interface{}{o.Alias, o.Note, o.STI, o.RU, o.Hostname, o.SerialNo, o.AssetTag, o.Site, o.USR, o.Modified, o.DTI, o.TID, o.Rack, o.Height, o.Tag, o.KID, o.RID, o.Profile, o.Assigned, o.DevType, o.DID}
}

func (o *DeviceView) MemberPointers() []interface{} {
	return []interface{}{&o.DID, &o.Alias, &o.Note, &o.STI, &o.RU, &o.Hostname, &o.SerialNo, &o.AssetTag, &o.Site, &o.USR, &o.Modified, &o.DTI, &o.TID, &o.Rack, &o.Height, &o.Tag, &o.KID, &o.RID, &o.Profile, &o.Assigned, &o.DevType}
}

func (o *DeviceView) Key() int64 {
	return o.DID
}

func (o *DeviceView) SetID(id int64) {
	o.DID = id
}

func (o *DeviceView) TableName() string {
	return "devices_view"
}

func (o *DeviceView) SelectFields() string {
	return "did,alias,note,sti,ru,hostname,sn,asset_tag,site,usr,ts,dti,tid,rack,height,tag,kid,rid,profile,assigned,devtype"
}

func (o *DeviceView) InsertFields() string {
	return "did,alias,note,sti,ru,hostname,sn,asset_tag,site,usr,ts,dti,tid,rack,height,tag,kid,rid,profile,assigned,devtype"
}

func (o *DeviceView) KeyField() string {
	return "did"
}

func (o *DeviceView) KeyName() string {
	return "DID"
}

func (o *DeviceView) Names() []string {
	return []string{"Alias", "Note", "STI", "RU", "Hostname", "SerialNo", "AssetTag", "Site", "USR", "Modified", "DTI", "TID", "Rack", "Height", "Tag", "KID", "RID", "Profile", "Assigned", "DevType"}
}

func (o *DeviceView) ModifiedBy(user int64, t time.Time) {
}

//
// DeviceIPs DBObject generator
//
func (o DeviceIPs) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// DeviceIPs DBObject interface functions
//
func (o *DeviceIPs) InsertValues() []interface{} {
	return []interface{}{o.Mgmt, o.AssetTag, o.Note, o.Site, o.Modified, o.IPs, o.Rack, o.RU, o.Profile, o.Tag, o.DTI, o.Hostname, o.Alias, o.SerialNo, o.Assigned, o.DevType, o.USR, o.Height, o.RID, o.KID, o.TID, o.STI}
}

func (o *DeviceIPs) UpdateValues() []interface{} {
	return []interface{}{o.Mgmt, o.AssetTag, o.Note, o.Site, o.Modified, o.IPs, o.Rack, o.RU, o.Profile, o.Tag, o.DTI, o.Hostname, o.Alias, o.SerialNo, o.Assigned, o.DevType, o.USR, o.Height, o.RID, o.KID, o.TID, o.STI, o.DID}
}

func (o *DeviceIPs) MemberPointers() []interface{} {
	return []interface{}{&o.DID, &o.Mgmt, &o.AssetTag, &o.Note, &o.Site, &o.Modified, &o.IPs, &o.Rack, &o.RU, &o.Profile, &o.Tag, &o.DTI, &o.Hostname, &o.Alias, &o.SerialNo, &o.Assigned, &o.DevType, &o.USR, &o.Height, &o.RID, &o.KID, &o.TID, &o.STI}
}

func (o *DeviceIPs) Key() int64 {
	return o.DID
}

func (o *DeviceIPs) SetID(id int64) {
	o.DID = id
}

func (o *DeviceIPs) TableName() string {
	return "devices_list"
}

func (o *DeviceIPs) SelectFields() string {
	return "did,mgmt,asset_tag,note,site,ts,ips,rack,ru,profile,tag,dti,hostname,alias,sn,assigned,devtype,usr,height,rid,kid,tid,sti"
}

func (o *DeviceIPs) InsertFields() string {
	return "did,mgmt,asset_tag,note,site,ts,ips,rack,ru,profile,tag,dti,hostname,alias,sn,assigned,devtype,usr,height,rid,kid,tid,sti"
}

func (o *DeviceIPs) KeyField() string {
	return "did"
}

func (o *DeviceIPs) KeyName() string {
	return "DID"
}

func (o *DeviceIPs) Names() []string {
	return []string{"Mgmt", "AssetTag", "Note", "Site", "Modified", "IPs", "Rack", "RU", "Profile", "Tag", "DTI", "Hostname", "Alias", "SerialNo", "Assigned", "DevType", "USR", "Height", "RID", "KID", "TID", "STI"}
}

func (o *DeviceIPs) ModifiedBy(user int64, t time.Time) {
}

//
// DeviceAdjust DBObject generator
//
func (o DeviceAdjust) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// DeviceAdjust DBObject interface functions
//
func (o *DeviceAdjust) InsertValues() []interface{} {
	return []interface{}{o.Height, o.RID, o.RU}
}

func (o *DeviceAdjust) UpdateValues() []interface{} {
	return []interface{}{o.Height, o.RID, o.RU, o.DID}
}

func (o *DeviceAdjust) MemberPointers() []interface{} {
	return []interface{}{&o.DID, &o.Height, &o.RID, &o.RU}
}

func (o *DeviceAdjust) Key() int64 {
	return o.DID
}

func (o *DeviceAdjust) SetID(id int64) {
	o.DID = id
}

func (o *DeviceAdjust) TableName() string {
	return "devices_adjust"
}

func (o *DeviceAdjust) SelectFields() string {
	return "did,height,rid,ru"
}

func (o *DeviceAdjust) InsertFields() string {
	return "did,height,rid,ru"
}

func (o *DeviceAdjust) KeyField() string {
	return "did"
}

func (o *DeviceAdjust) KeyName() string {
	return "DID"
}

func (o *DeviceAdjust) Names() []string {
	return []string{"Height", "RID", "RU"}
}

func (o *DeviceAdjust) ModifiedBy(user int64, t time.Time) {
}

//
// IFace DBObject generator
//
func (o IFace) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// IFace DBObject interface functions
//
func (o *IFace) InsertValues() []interface{} {
	return []interface{}{o.MAC, o.CableTag, o.SwitchPort, o.DID, o.Mgmt, o.Port}
}

func (o *IFace) UpdateValues() []interface{} {
	return []interface{}{o.MAC, o.CableTag, o.SwitchPort, o.DID, o.Mgmt, o.Port, o.IFD}
}

func (o *IFace) MemberPointers() []interface{} {
	return []interface{}{&o.IFD, &o.MAC, &o.CableTag, &o.SwitchPort, &o.DID, &o.Mgmt, &o.Port}
}

func (o *IFace) Key() int64 {
	return o.IFD
}

func (o *IFace) SetID(id int64) {
	o.IFD = id
}

func (o *IFace) TableName() string {
	return "interfaces"
}

func (o *IFace) SelectFields() string {
	return "ifd,mac,cable_tag,switch_port,did,mgmt,port"
}

func (o *IFace) InsertFields() string {
	return "ifd,mac,cable_tag,switch_port,did,mgmt,port"
}

func (o *IFace) KeyField() string {
	return "ifd"
}

func (o *IFace) KeyName() string {
	return "IFD"
}

func (o *IFace) Names() []string {
	return []string{"MAC", "CableTag", "SwitchPort", "DID", "Mgmt", "Port"}
}

func (o *IFace) ModifiedBy(user int64, t time.Time) {
}

//
// IFaceView DBObject generator
//
func (o IFaceView) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// IFaceView DBObject interface functions
//
func (o *IFaceView) InsertValues() []interface{} {
	return []interface{}{o.SwitchPort, o.IPT, o.Port, o.IP, o.CableTag, o.IPType, o.MAC, o.DID, o.IID, o.IP32, o.Mgmt}
}

func (o *IFaceView) UpdateValues() []interface{} {
	return []interface{}{o.SwitchPort, o.IPT, o.Port, o.IP, o.CableTag, o.IPType, o.MAC, o.DID, o.IID, o.IP32, o.Mgmt, o.IFD}
}

func (o *IFaceView) MemberPointers() []interface{} {
	return []interface{}{&o.IFD, &o.SwitchPort, &o.IPT, &o.Port, &o.IP, &o.CableTag, &o.IPType, &o.MAC, &o.DID, &o.IID, &o.IP32, &o.Mgmt}
}

func (o *IFaceView) Key() int64 {
	return o.IFD
}

func (o *IFaceView) SetID(id int64) {
	o.IFD = id
}

func (o *IFaceView) TableName() string {
	return "interfaces_view"
}

func (o *IFaceView) SelectFields() string {
	return "ifd,switch_port,ipt,port,ipv4,cable_tag,iptype,mac,did,iid,ip32,mgmt"
}

func (o *IFaceView) InsertFields() string {
	return "ifd,switch_port,ipt,port,ipv4,cable_tag,iptype,mac,did,iid,ip32,mgmt"
}

func (o *IFaceView) KeyField() string {
	return "ifd"
}

func (o *IFaceView) KeyName() string {
	return "IFD"
}

func (o *IFaceView) Names() []string {
	return []string{"SwitchPort", "IPT", "Port", "IP", "CableTag", "IPType", "MAC", "DID", "IID", "IP32", "Mgmt"}
}

func (o *IFaceView) ModifiedBy(user int64, t time.Time) {
}

//
// IPAddr DBObject generator
//
func (o IPAddr) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// IPAddr DBObject interface functions
//
func (o *IPAddr) InsertValues() []interface{} {
	return []interface{}{o.VLI, o.IPT, o.IP32, o.IPv4, o.Note, o.IFD, o.VMI}
}

func (o *IPAddr) UpdateValues() []interface{} {
	return []interface{}{o.VLI, o.IPT, o.IP32, o.IPv4, o.Note, o.IFD, o.VMI, o.IID}
}

func (o *IPAddr) MemberPointers() []interface{} {
	return []interface{}{&o.IID, &o.VLI, &o.IPT, &o.IP32, &o.IPv4, &o.Note, &o.IFD, &o.VMI}
}

func (o *IPAddr) Key() int64 {
	return o.IID
}

func (o *IPAddr) SetID(id int64) {
	o.IID = id
}

func (o *IPAddr) TableName() string {
	return "ips"
}

func (o *IPAddr) SelectFields() string {
	return "iid,vli,ipt,ip32,ipv4,note,ifd,vmi"
}

func (o *IPAddr) InsertFields() string {
	return "iid,vli,ipt,ip32,ipv4,note,ifd,vmi"
}

func (o *IPAddr) KeyField() string {
	return "iid"
}

func (o *IPAddr) KeyName() string {
	return "IID"
}

func (o *IPAddr) Names() []string {
	return []string{"VLI", "IPT", "IP32", "IPv4", "Note", "IFD", "VMI"}
}

func (o *IPAddr) ModifiedBy(user int64, t time.Time) {
}

//
// IPsUsed DBObject generator
//
func (o IPsUsed) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// IPsUsed DBObject interface functions
//
func (o *IPsUsed) InsertValues() []interface{} {
	return []interface{}{o.Note, o.ID, o.RID, o.Rack, o.Host, o.Hostname, o.STI, o.IPT, o.Site, o.IP, o.Type}
}

func (o *IPsUsed) UpdateValues() []interface{} {
	return []interface{}{o.Note, o.ID, o.RID, o.Rack, o.Host, o.Hostname, o.STI, o.IPT, o.Site, o.IP, o.Type}
}

func (o *IPsUsed) MemberPointers() []interface{} {
	return []interface{}{&o.Note, &o.ID, &o.RID, &o.Rack, &o.Host, &o.Hostname, &o.STI, &o.IPT, &o.Site, &o.IP, &o.Type}
}

func (o *IPsUsed) Key() int64 {
	return 0
}

func (o *IPsUsed) SetID(id int64) {
}

func (o *IPsUsed) TableName() string {
	return "ips_list"
}

func (o *IPsUsed) SelectFields() string {
	return "note,id,rid,rack,host,hostname,sti,ipt,site,ip,iptype"
}

func (o *IPsUsed) InsertFields() string {
	return "note,id,rid,rack,host,hostname,sti,ipt,site,ip,iptype"
}

func (o *IPsUsed) KeyField() string {
	return ""
}

func (o *IPsUsed) KeyName() string {
	return ""
}

func (o *IPsUsed) Names() []string {
	return []string{"Note", "ID", "RID", "Rack", "Host", "Hostname", "STI", "IPT", "Site", "IP", "Type"}
}

func (o *IPsUsed) ModifiedBy(user int64, t time.Time) {
}

//
// Provider DBObject generator
//
func (o Provider) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// Provider DBObject interface functions
//
func (o *Provider) InsertValues() []interface{} {
	return []interface{}{o.Contact, o.Phone, o.EMail, o.URL, o.Note, o.Name}
}

func (o *Provider) UpdateValues() []interface{} {
	return []interface{}{o.Contact, o.Phone, o.EMail, o.URL, o.Note, o.Name, o.PRI}
}

func (o *Provider) MemberPointers() []interface{} {
	return []interface{}{&o.PRI, &o.Contact, &o.Phone, &o.EMail, &o.URL, &o.Note, &o.Name}
}

func (o *Provider) Key() int64 {
	return o.PRI
}

func (o *Provider) SetID(id int64) {
	o.PRI = id
}

func (o *Provider) TableName() string {
	return "providers"
}

func (o *Provider) SelectFields() string {
	return "pri,provider,a_side_xcon,a_side_handoff,z_side_xcon,note,name"
}

func (o *Provider) InsertFields() string {
	return "pri,provider,a_side_xcon,a_side_handoff,z_side_xcon,note,name"
}

func (o *Provider) KeyField() string {
	return "pri"
}

func (o *Provider) KeyName() string {
	return "PRI"
}

func (o *Provider) Names() []string {
	return []string{"Contact", "Phone", "EMail", "URL", "Note", "Name"}
}

func (o *Provider) ModifiedBy(user int64, t time.Time) {
}

//
// Circuit DBObject generator
//
func (o Circuit) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// Circuit DBObject interface functions
//
func (o *Circuit) InsertValues() []interface{} {
	return []interface{}{o.ZSideXConn, o.ZSideHandoff, o.Note, o.STI, o.PRI, o.CircuitID, o.ASideXConn, o.ASideHandoff}
}

func (o *Circuit) UpdateValues() []interface{} {
	return []interface{}{o.ZSideXConn, o.ZSideHandoff, o.Note, o.STI, o.PRI, o.CircuitID, o.ASideXConn, o.ASideHandoff, o.CID}
}

func (o *Circuit) MemberPointers() []interface{} {
	return []interface{}{&o.CID, &o.ZSideXConn, &o.ZSideHandoff, &o.Note, &o.STI, &o.PRI, &o.CircuitID, &o.ASideXConn, &o.ASideHandoff}
}

func (o *Circuit) Key() int64 {
	return o.CID
}

func (o *Circuit) SetID(id int64) {
	o.CID = id
}

func (o *Circuit) TableName() string {
	return "circuits"
}

func (o *Circuit) SelectFields() string {
	return "cid,z_side_xcon,z_side_handoff,note,site,pri,circuit_id,a_side_xcon,a_side_handoff"
}

func (o *Circuit) InsertFields() string {
	return "cid,z_side_xcon,z_side_handoff,note,site,pri,circuit_id,a_side_xcon,a_side_handoff"
}

func (o *Circuit) KeyField() string {
	return "cid"
}

func (o *Circuit) KeyName() string {
	return "CID"
}

func (o *Circuit) Names() []string {
	return []string{"ZSideXConn", "ZSideHandoff", "Note", "STI", "PRI", "CircuitID", "ASideXConn", "ASideHandoff"}
}

func (o *Circuit) ModifiedBy(user int64, t time.Time) {
}

//
// CircuitView DBObject generator
//
func (o CircuitView) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// CircuitView DBObject interface functions
//
func (o *CircuitView) InsertValues() []interface{} {
	return []interface{}{o.CircuitID, o.ZSideXConn, o.ZSideHandoff, o.Note, o.PRI, o.Provider, o.ASideXConn, o.ASideHandoff, o.STI, o.Site}
}

func (o *CircuitView) UpdateValues() []interface{} {
	return []interface{}{o.CircuitID, o.ZSideXConn, o.ZSideHandoff, o.Note, o.PRI, o.Provider, o.ASideXConn, o.ASideHandoff, o.STI, o.Site, o.CID}
}

func (o *CircuitView) MemberPointers() []interface{} {
	return []interface{}{&o.CID, &o.CircuitID, &o.ZSideXConn, &o.ZSideHandoff, &o.Note, &o.PRI, &o.Provider, &o.ASideXConn, &o.ASideHandoff, &o.STI, &o.Site}
}

func (o *CircuitView) Key() int64 {
	return o.CID
}

func (o *CircuitView) SetID(id int64) {
	o.CID = id
}

func (o *CircuitView) TableName() string {
	return "circuits"
}

func (o *CircuitView) SelectFields() string {
	return "cid,circuit_id,z_side_xcon,z_side_handoff,note,pri,provider,a_side_xcon,a_side_handoff,site,site"
}

func (o *CircuitView) InsertFields() string {
	return "cid,circuit_id,z_side_xcon,z_side_handoff,note,pri,provider,a_side_xcon,a_side_handoff,site,site"
}

func (o *CircuitView) KeyField() string {
	return "cid"
}

func (o *CircuitView) KeyName() string {
	return "CID"
}

func (o *CircuitView) Names() []string {
	return []string{"CircuitID", "ZSideXConn", "ZSideHandoff", "Note", "PRI", "Provider", "ASideXConn", "ASideHandoff", "STI", "Site"}
}

func (o *CircuitView) ModifiedBy(user int64, t time.Time) {
}

//
// SubCircuit DBObject generator
//
func (o SubCircuit) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// SubCircuit DBObject interface functions
//
func (o *SubCircuit) InsertValues() []interface{} {
	return []interface{}{o.CID, o.SubID, o.Note}
}

func (o *SubCircuit) UpdateValues() []interface{} {
	return []interface{}{o.CID, o.SubID, o.Note, o.SCI}
}

func (o *SubCircuit) MemberPointers() []interface{} {
	return []interface{}{&o.SCI, &o.CID, &o.SubID, &o.Note}
}

func (o *SubCircuit) Key() int64 {
	return o.SCI
}

func (o *SubCircuit) SetID(id int64) {
	o.SCI = id
}

func (o *SubCircuit) TableName() string {
	return "sub_circuits"
}

func (o *SubCircuit) SelectFields() string {
	return "sci,cid,sub_circuit_id,note"
}

func (o *SubCircuit) InsertFields() string {
	return "sci,cid,sub_circuit_id,note"
}

func (o *SubCircuit) KeyField() string {
	return "sci"
}

func (o *SubCircuit) KeyName() string {
	return "SCI"
}

func (o *SubCircuit) Names() []string {
	return []string{"CID", "SubID", "Note"}
}

func (o *SubCircuit) ModifiedBy(user int64, t time.Time) {
}

//
// CircuitList DBObject generator
//
func (o CircuitList) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// CircuitList DBObject interface functions
//
func (o *CircuitList) InsertValues() []interface{} {
	return []interface{}{o.SubNote, o.PRI, o.ASideHandoff, o.Provider, o.CircuitID, o.SubID, o.ASideXConn, o.ZSideXConn, o.ZSideHandoff, o.STI, o.Site, o.Note}
}

func (o *CircuitList) UpdateValues() []interface{} {
	return []interface{}{o.SubNote, o.PRI, o.ASideHandoff, o.Provider, o.CircuitID, o.SubID, o.ASideXConn, o.ZSideXConn, o.ZSideHandoff, o.STI, o.Site, o.Note, o.CID}
}

func (o *CircuitList) MemberPointers() []interface{} {
	return []interface{}{&o.CID, &o.SubNote, &o.PRI, &o.ASideHandoff, &o.Provider, &o.CircuitID, &o.SubID, &o.ASideXConn, &o.ZSideXConn, &o.ZSideHandoff, &o.STI, &o.Site, &o.Note}
}

func (o *CircuitList) Key() int64 {
	return o.CID
}

func (o *CircuitList) SetID(id int64) {
	o.CID = id
}

func (o *CircuitList) TableName() string {
	return "circuits"
}

func (o *CircuitList) SelectFields() string {
	return "cid,sub_note,pri,a_side_handoff,provider,circuit_id,sub_circuit_id,a_side_xcon,z_side_xcon,z_side_handoff,site,site,note"
}

func (o *CircuitList) InsertFields() string {
	return "cid,sub_note,pri,a_side_handoff,provider,circuit_id,sub_circuit_id,a_side_xcon,z_side_xcon,z_side_handoff,site,site,note"
}

func (o *CircuitList) KeyField() string {
	return "cid"
}

func (o *CircuitList) KeyName() string {
	return "CID"
}

func (o *CircuitList) Names() []string {
	return []string{"SubNote", "PRI", "ASideHandoff", "Provider", "CircuitID", "SubID", "ASideXConn", "ZSideXConn", "ZSideHandoff", "STI", "Site", "Note"}
}

func (o *CircuitList) ModifiedBy(user int64, t time.Time) {
}

//
// VProfile DBObject generator
//
func (o VProfile) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// VProfile DBObject interface functions
//
func (o *VProfile) InsertValues() []interface{} {
	return []interface{}{o.Name}
}

func (o *VProfile) UpdateValues() []interface{} {
	return []interface{}{o.Name, o.VPID}
}

func (o *VProfile) MemberPointers() []interface{} {
	return []interface{}{&o.VPID, &o.Name}
}

func (o *VProfile) Key() int64 {
	return o.VPID
}

func (o *VProfile) SetID(id int64) {
	o.VPID = id
}

func (o *VProfile) TableName() string {
	return "vlan_profiles"
}

func (o *VProfile) SelectFields() string {
	return "vpid,name"
}

func (o *VProfile) InsertFields() string {
	return "vpid,name"
}

func (o *VProfile) KeyField() string {
	return "vpid"
}

func (o *VProfile) KeyName() string {
	return "VPID"
}

func (o *VProfile) Names() []string {
	return []string{"Name"}
}

func (o *VProfile) ModifiedBy(user int64, t time.Time) {
}

//
// VLAN DBObject generator
//
func (o VLAN) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// VLAN DBObject interface functions
//
func (o *VLAN) InsertValues() []interface{} {
	return []interface{}{o.USR, o.Name, o.Gateway, o.Route, o.Netmask, o.Modified, o.STI, o.Profile, o.Note}
}

func (o *VLAN) UpdateValues() []interface{} {
	return []interface{}{o.USR, o.Name, o.Gateway, o.Route, o.Netmask, o.Modified, o.STI, o.Profile, o.Note, o.VLI}
}

func (o *VLAN) MemberPointers() []interface{} {
	return []interface{}{&o.VLI, &o.USR, &o.Name, &o.Gateway, &o.Route, &o.Netmask, &o.Modified, &o.STI, &o.Profile, &o.Note}
}

func (o *VLAN) Key() int64 {
	return o.VLI
}

func (o *VLAN) SetID(id int64) {
	o.VLI = id
}

func (o *VLAN) TableName() string {
	return "vlans"
}

func (o *VLAN) SelectFields() string {
	return "vli,usr,name,gateway,route,netmask,ts,sti,profile,note"
}

func (o *VLAN) InsertFields() string {
	return "vli,usr,name,gateway,route,netmask,ts,sti,profile,note"
}

func (o *VLAN) KeyField() string {
	return "vli"
}

func (o *VLAN) KeyName() string {
	return "VLI"
}

func (o *VLAN) Names() []string {
	return []string{"USR", "Name", "Gateway", "Route", "Netmask", "Modified", "STI", "Profile", "Note"}
}

func (o *VLAN) ModifiedBy(user int64, t time.Time) {
	o.USR = user
	o.Modified = t
}

//
// VLANView DBObject generator
//
func (o VLANView) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// VLANView DBObject interface functions
//
func (o *VLANView) InsertValues() []interface{} {
	return []interface{}{o.Route, o.Netmask, o.Note, o.USR, o.Site, o.Profile, o.Gateway, o.STI, o.Name, o.Modified}
}

func (o *VLANView) UpdateValues() []interface{} {
	return []interface{}{o.Route, o.Netmask, o.Note, o.USR, o.Site, o.Profile, o.Gateway, o.STI, o.Name, o.Modified, o.VLI}
}

func (o *VLANView) MemberPointers() []interface{} {
	return []interface{}{&o.VLI, &o.Route, &o.Netmask, &o.Note, &o.USR, &o.Site, &o.Profile, &o.Gateway, &o.STI, &o.Name, &o.Modified}
}

func (o *VLANView) Key() int64 {
	return o.VLI
}

func (o *VLANView) SetID(id int64) {
	o.VLI = id
}

func (o *VLANView) TableName() string {
	return "vlans_view"
}

func (o *VLANView) SelectFields() string {
	return "vli,route,netmask,note,usr,site,profile,gateway,sti,name,ts"
}

func (o *VLANView) InsertFields() string {
	return "vli,route,netmask,note,usr,site,profile,gateway,sti,name,ts"
}

func (o *VLANView) KeyField() string {
	return "vli"
}

func (o *VLANView) KeyName() string {
	return "VLI"
}

func (o *VLANView) Names() []string {
	return []string{"Route", "Netmask", "Note", "USR", "Site", "Profile", "Gateway", "STI", "Name", "Modified"}
}

func (o *VLANView) ModifiedBy(user int64, t time.Time) {
	o.USR = user
	o.Modified = t
}
