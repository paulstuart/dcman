// generated by dbgen ; DO NOT EDIT

package main

import (
	"time"
)

//
// found DBObject generator
//
func (o found) NewObj() interface{} {
	return new(found)
}

//
// found DBObject interface functions
//
func (o *found) InsertValues() []interface{} {
	return []interface{}{o.ID, o.Kind, o.Name, o.Note}
}

func (o *found) UpdateValues() []interface{} {
	return []interface{}{o.ID, o.Kind, o.Name, o.Note}
}

func (o *found) MemberPointers() []interface{} {
	return []interface{}{&o.ID, &o.Kind, &o.Name, &o.Note}
}

func (o *found) Key() int64 {
	return 0
}

func (o *found) SetID(id int64) {
}

func (o *found) TableName() string {
	return ""
}

func (o *found) SelectFields() string {
	return "id,kind,name,note"
}

func (o *found) InsertFields() string {
	return "id,kind,name,note"
}

func (o *found) KeyField() string {
	return ""
}

func (o *found) KeyName() string {
	return ""
}

func (o *found) Names() []string {
	return []string{"ID", "Kind", "Name", "Note"}
}

func (o *found) ModifiedBy(user int64, t time.Time) {
}

//
// summary DBObject generator
//
func (o summary) NewObj() interface{} {
	return new(summary)
}

//
// summary DBObject interface functions
//
func (o *summary) InsertValues() []interface{} {
	return []interface{}{o.Site, o.Servers, o.VMs}
}

func (o *summary) UpdateValues() []interface{} {
	return []interface{}{o.Site, o.Servers, o.VMs, o.ID}
}

func (o *summary) MemberPointers() []interface{} {
	return []interface{}{&o.ID, &o.Site, &o.Servers, &o.VMs}
}

func (o *summary) Key() int64 {
	return o.ID
}

func (o *summary) SetID(id int64) {
	o.ID = id
}

func (o *summary) TableName() string {
	return "summary"
}

func (o *summary) SelectFields() string {
	return "sti,site,servers,vms"
}

func (o *summary) InsertFields() string {
	return "sti,site,servers,vms"
}

func (o *summary) KeyField() string {
	return "sti"
}

func (o *summary) KeyName() string {
	return "ID"
}

func (o *summary) Names() []string {
	return []string{"Site", "Servers", "VMs"}
}

func (o *summary) ModifiedBy(user int64, t time.Time) {
}

//
// user DBObject generator
//
func (o user) NewObj() interface{} {
	return new(user)
}

//
// user DBObject interface functions
//
func (o *user) InsertValues() []interface{} {
	return []interface{}{o.Login, o.First, o.Last, o.Email, o.APIKey, o.Level}
}

func (o *user) UpdateValues() []interface{} {
	return []interface{}{o.Login, o.First, o.Last, o.Email, o.APIKey, o.Level, o.USR}
}

func (o *user) MemberPointers() []interface{} {
	return []interface{}{&o.USR, &o.Login, &o.First, &o.Last, &o.Email, &o.APIKey, &o.Level}
}

func (o *user) Key() int64 {
	return o.USR
}

func (o *user) SetID(id int64) {
	o.USR = id
}

func (o *user) TableName() string {
	return "users_view"
}

func (o *user) SelectFields() string {
	return "usr,login,firstname,lastname,email,apikey,admin"
}

func (o *user) InsertFields() string {
	return "usr,login,firstname,lastname,email,apikey,admin"
}

func (o *user) KeyField() string {
	return "usr"
}

func (o *user) KeyName() string {
	return "USR"
}

func (o *user) Names() []string {
	return []string{"Login", "First", "Last", "Email", "APIKey", "Level"}
}

func (o *user) ModifiedBy(user int64, t time.Time) {
}

//
// fullUser DBObject generator
//
func (o fullUser) NewObj() interface{} {
	return new(fullUser)
}

//
// fullUser DBObject interface functions
//
func (o *fullUser) InsertValues() []interface{} {
	return []interface{}{o.Login, o.First, o.Last, o.Email, o.APIKey, o.Password, o.Salt, o.Level}
}

func (o *fullUser) UpdateValues() []interface{} {
	return []interface{}{o.Login, o.First, o.Last, o.Email, o.APIKey, o.Password, o.Salt, o.Level, o.USR}
}

func (o *fullUser) MemberPointers() []interface{} {
	return []interface{}{&o.USR, &o.Login, &o.First, &o.Last, &o.Email, &o.APIKey, &o.Password, &o.Salt, &o.Level}
}

func (o *fullUser) Key() int64 {
	return o.USR
}

func (o *fullUser) SetID(id int64) {
	o.USR = id
}

func (o *fullUser) TableName() string {
	return "users"
}

func (o *fullUser) SelectFields() string {
	return "usr,login,firstname,lastname,email,apikey,pw_hash,pw_salt,admin"
}

func (o *fullUser) InsertFields() string {
	return "usr,login,firstname,lastname,email,apikey,pw_hash,pw_salt,admin"
}

func (o *fullUser) KeyField() string {
	return "usr"
}

func (o *fullUser) KeyName() string {
	return "USR"
}

func (o *fullUser) Names() []string {
	return []string{"Login", "First", "Last", "Email", "APIKey", "Password", "Salt", "Level"}
}

func (o *fullUser) ModifiedBy(user int64, t time.Time) {
}

//
// session DBObject generator
//
func (o session) NewObj() interface{} {
	return new(session)
}

//
// session DBObject interface functions
//
func (o *session) InsertValues() []interface{} {
	return []interface{}{o.Event, o.Remote, o.USR, o.TS}
}

func (o *session) UpdateValues() []interface{} {
	return []interface{}{o.Event, o.Remote, o.USR, o.TS, o.SSI}
}

func (o *session) MemberPointers() []interface{} {
	return []interface{}{&o.SSI, &o.Event, &o.Remote, &o.USR, &o.TS}
}

func (o *session) Key() int64 {
	return o.SSI
}

func (o *session) SetID(id int64) {
	o.SSI = id
}

func (o *session) TableName() string {
	return "sessions"
}

func (o *session) SelectFields() string {
	return "ssi,event,remote_addr,usr,ts"
}

func (o *session) InsertFields() string {
	return "ssi,event,remote_addr,usr,ts"
}

func (o *session) KeyField() string {
	return "ssi"
}

func (o *session) KeyName() string {
	return "SSI"
}

func (o *session) Names() []string {
	return []string{"Event", "Remote", "USR", "TS"}
}

func (o *session) ModifiedBy(user int64, t time.Time) {
}

//
// sessionView DBObject generator
//
func (o sessionView) NewObj() interface{} {
	return new(sessionView)
}

//
// sessionView DBObject interface functions
//
func (o *sessionView) InsertValues() []interface{} {
	return []interface{}{o.Login, o.Event, o.Remote, o.USR, o.TS}
}

func (o *sessionView) UpdateValues() []interface{} {
	return []interface{}{o.Login, o.Event, o.Remote, o.USR, o.TS, o.SSI}
}

func (o *sessionView) MemberPointers() []interface{} {
	return []interface{}{&o.SSI, &o.Login, &o.Event, &o.Remote, &o.USR, &o.TS}
}

func (o *sessionView) Key() int64 {
	return o.SSI
}

func (o *sessionView) SetID(id int64) {
	o.SSI = id
}

func (o *sessionView) TableName() string {
	return "sessions_view"
}

func (o *sessionView) SelectFields() string {
	return "ssi,login,event,remote_addr,usr,ts"
}

func (o *sessionView) InsertFields() string {
	return "ssi,login,event,remote_addr,usr,ts"
}

func (o *sessionView) KeyField() string {
	return "ssi"
}

func (o *sessionView) KeyName() string {
	return "SSI"
}

func (o *sessionView) Names() []string {
	return []string{"Login", "Event", "Remote", "USR", "TS"}
}

func (o *sessionView) ModifiedBy(user int64, t time.Time) {
}

//
// vendor DBObject generator
//
func (o vendor) NewObj() interface{} {
	return new(vendor)
}

//
// vendor DBObject interface functions
//
func (o *vendor) InsertValues() []interface{} {
	return []interface{}{o.State, o.Country, o.Note, o.USR, o.TS, o.Name, o.WWW, o.Phone, o.Address, o.City, o.Postal}
}

func (o *vendor) UpdateValues() []interface{} {
	return []interface{}{o.State, o.Country, o.Note, o.USR, o.TS, o.Name, o.WWW, o.Phone, o.Address, o.City, o.Postal, o.VID}
}

func (o *vendor) MemberPointers() []interface{} {
	return []interface{}{&o.VID, &o.State, &o.Country, &o.Note, &o.USR, &o.TS, &o.Name, &o.WWW, &o.Phone, &o.Address, &o.City, &o.Postal}
}

func (o *vendor) Key() int64 {
	return o.VID
}

func (o *vendor) SetID(id int64) {
	o.VID = id
}

func (o *vendor) TableName() string {
	return "vendors"
}

func (o *vendor) SelectFields() string {
	return "vid,state,country,note,usr,ts,name,www,phone,address,city,postal"
}

func (o *vendor) InsertFields() string {
	return "vid,state,country,note,usr,ts,name,www,phone,address,city,postal"
}

func (o *vendor) KeyField() string {
	return "vid"
}

func (o *vendor) KeyName() string {
	return "VID"
}

func (o *vendor) Names() []string {
	return []string{"State", "Country", "Note", "USR", "TS", "Name", "WWW", "Phone", "Address", "City", "Postal"}
}

func (o *vendor) ModifiedBy(user int64, t time.Time) {
	o.USR = &user
	o.TS = t
}

//
// ipType DBObject generator
//
func (o ipType) NewObj() interface{} {
	return new(ipType)
}

//
// ipType DBObject interface functions
//
func (o *ipType) InsertValues() []interface{} {
	return []interface{}{o.Name, o.Mgmt, o.Multi}
}

func (o *ipType) UpdateValues() []interface{} {
	return []interface{}{o.Name, o.Mgmt, o.Multi, o.IPT}
}

func (o *ipType) MemberPointers() []interface{} {
	return []interface{}{&o.IPT, &o.Name, &o.Mgmt, &o.Multi}
}

func (o *ipType) Key() int64 {
	return o.IPT
}

func (o *ipType) SetID(id int64) {
	o.IPT = id
}

func (o *ipType) TableName() string {
	return "ip_types"
}

func (o *ipType) SelectFields() string {
	return "ipt,name,mgmt,multi"
}

func (o *ipType) InsertFields() string {
	return "ipt,name,mgmt,multi"
}

func (o *ipType) KeyField() string {
	return "ipt"
}

func (o *ipType) KeyName() string {
	return "IPT"
}

func (o *ipType) Names() []string {
	return []string{"Name", "Mgmt", "Multi"}
}

func (o *ipType) ModifiedBy(user int64, t time.Time) {
}

//
// rma DBObject generator
//
func (o rma) NewObj() interface{} {
	return new(rma)
}

//
// rma DBObject interface functions
//
func (o *rma) InsertValues() []interface{} {
	return []interface{}{o.STI, o.Receiving, o.Created, o.Closed, o.VID, o.VendorRMA, o.DCTicket, o.Shipped, o.NewPID, o.Jira, o.RecvTrack, o.Note, o.Received, o.USR, o.DID, o.OldPID, o.ShipTrack}
}

func (o *rma) UpdateValues() []interface{} {
	return []interface{}{o.STI, o.Receiving, o.Created, o.Closed, o.VID, o.VendorRMA, o.DCTicket, o.Shipped, o.NewPID, o.Jira, o.RecvTrack, o.Note, o.Received, o.USR, o.DID, o.OldPID, o.ShipTrack, o.RMD}
}

func (o *rma) MemberPointers() []interface{} {
	return []interface{}{&o.RMD, &o.STI, &o.Receiving, &o.Created, &o.Closed, &o.VID, &o.VendorRMA, &o.DCTicket, &o.Shipped, &o.NewPID, &o.Jira, &o.RecvTrack, &o.Note, &o.Received, &o.USR, &o.DID, &o.OldPID, &o.ShipTrack}
}

func (o *rma) Key() int64 {
	return o.RMD
}

func (o *rma) SetID(id int64) {
	o.RMD = id
}

func (o *rma) TableName() string {
	return "rmas"
}

func (o *rma) SelectFields() string {
	return "rmd,sti,dc_receiving,date_created,date_closed,vid,vendor_rma,dc_ticket,date_shipped,new_pid,jira,recv_tracking,note,date_received,usr,did,old_pid,ship_tracking"
}

func (o *rma) InsertFields() string {
	return "rmd,sti,dc_receiving,date_created,date_closed,vid,vendor_rma,dc_ticket,date_shipped,new_pid,jira,recv_tracking,note,date_received,usr,did,old_pid,ship_tracking"
}

func (o *rma) KeyField() string {
	return "rmd"
}

func (o *rma) KeyName() string {
	return "RMD"
}

func (o *rma) Names() []string {
	return []string{"STI", "Receiving", "Created", "Closed", "VID", "VendorRMA", "DCTicket", "Shipped", "NewPID", "Jira", "RecvTrack", "Note", "Received", "USR", "DID", "OldPID", "ShipTrack"}
}

func (o *rma) ModifiedBy(user int64, t time.Time) {
}

//
// rmaView DBObject generator
//
func (o rmaView) NewObj() interface{} {
	return new(rmaView)
}

//
// rmaView DBObject interface functions
//
func (o *rmaView) InsertValues() []interface{} {
	return []interface{}{o.STI, o.Shipped, o.Created, o.VendorRMA, o.Jira, o.DCTicket, o.DID, o.OldPID, o.NewPID, o.DeviceSN, o.Description, o.Receiving, o.Note, o.Received, o.USR, o.RecvTrack, o.Closed, o.VID, o.Site, o.Hostname, o.PartSN, o.Vendor, o.PartNumber, o.ShipTrack}
}

func (o *rmaView) UpdateValues() []interface{} {
	return []interface{}{o.STI, o.Shipped, o.Created, o.VendorRMA, o.Jira, o.DCTicket, o.DID, o.OldPID, o.NewPID, o.DeviceSN, o.Description, o.Receiving, o.Note, o.Received, o.USR, o.RecvTrack, o.Closed, o.VID, o.Site, o.Hostname, o.PartSN, o.Vendor, o.PartNumber, o.ShipTrack, o.RMD}
}

func (o *rmaView) MemberPointers() []interface{} {
	return []interface{}{&o.RMD, &o.STI, &o.Shipped, &o.Created, &o.VendorRMA, &o.Jira, &o.DCTicket, &o.DID, &o.OldPID, &o.NewPID, &o.DeviceSN, &o.Description, &o.Receiving, &o.Note, &o.Received, &o.USR, &o.RecvTrack, &o.Closed, &o.VID, &o.Site, &o.Hostname, &o.PartSN, &o.Vendor, &o.PartNumber, &o.ShipTrack}
}

func (o *rmaView) Key() int64 {
	return o.RMD
}

func (o *rmaView) SetID(id int64) {
	o.RMD = id
}

func (o *rmaView) TableName() string {
	return "rmas_view"
}

func (o *rmaView) SelectFields() string {
	return "rmd,sti,date_shipped,date_created,vendor_rma,jira,dc_ticket,did,old_pid,new_pid,device_sn,description,dc_receiving,note,date_received,usr,recv_tracking,date_closed,vid,site,hostname,part_sn,vendor,part_no,ship_tracking"
}

func (o *rmaView) InsertFields() string {
	return "rmd,sti,date_shipped,date_created,vendor_rma,jira,dc_ticket,did,old_pid,new_pid,device_sn,description,dc_receiving,note,date_received,usr,recv_tracking,date_closed,vid,site,hostname,part_sn,vendor,part_no,ship_tracking"
}

func (o *rmaView) KeyField() string {
	return "rmd"
}

func (o *rmaView) KeyName() string {
	return "RMD"
}

func (o *rmaView) Names() []string {
	return []string{"STI", "Shipped", "Created", "VendorRMA", "Jira", "DCTicket", "DID", "OldPID", "NewPID", "DeviceSN", "Description", "Receiving", "Note", "Received", "USR", "RecvTrack", "Closed", "VID", "Site", "Hostname", "PartSN", "Vendor", "PartNumber", "ShipTrack"}
}

func (o *rmaView) ModifiedBy(user int64, t time.Time) {
}

//
// manufacturer DBObject generator
//
func (o manufacturer) NewObj() interface{} {
	return new(manufacturer)
}

//
// manufacturer DBObject interface functions
//
func (o *manufacturer) InsertValues() []interface{} {
	return []interface{}{o.TS, o.Name, o.Note, o.AKA, o.URL, o.USR}
}

func (o *manufacturer) UpdateValues() []interface{} {
	return []interface{}{o.TS, o.Name, o.Note, o.AKA, o.URL, o.USR, o.MID}
}

func (o *manufacturer) MemberPointers() []interface{} {
	return []interface{}{&o.MID, &o.TS, &o.Name, &o.Note, &o.AKA, &o.URL, &o.USR}
}

func (o *manufacturer) Key() int64 {
	return o.MID
}

func (o *manufacturer) SetID(id int64) {
	o.MID = id
}

func (o *manufacturer) TableName() string {
	return "mfgrs"
}

func (o *manufacturer) SelectFields() string {
	return "mid,ts,name,note,aka,url,usr"
}

func (o *manufacturer) InsertFields() string {
	return "mid,ts,name,note,aka,url,usr"
}

func (o *manufacturer) KeyField() string {
	return "mid"
}

func (o *manufacturer) KeyName() string {
	return "MID"
}

func (o *manufacturer) Names() []string {
	return []string{"TS", "Name", "Note", "AKA", "URL", "USR"}
}

func (o *manufacturer) ModifiedBy(user int64, t time.Time) {
	o.USR = &user
	o.TS = t
}

//
// partType DBObject generator
//
func (o partType) NewObj() interface{} {
	return new(partType)
}

//
// partType DBObject interface functions
//
func (o *partType) InsertValues() []interface{} {
	return []interface{}{o.Name, o.USR, o.TS}
}

func (o *partType) UpdateValues() []interface{} {
	return []interface{}{o.Name, o.USR, o.TS, o.PTI}
}

func (o *partType) MemberPointers() []interface{} {
	return []interface{}{&o.PTI, &o.Name, &o.USR, &o.TS}
}

func (o *partType) Key() int64 {
	return o.PTI
}

func (o *partType) SetID(id int64) {
	o.PTI = id
}

func (o *partType) TableName() string {
	return "part_types"
}

func (o *partType) SelectFields() string {
	return "pti,name,usr,ts"
}

func (o *partType) InsertFields() string {
	return "pti,name,usr,ts"
}

func (o *partType) KeyField() string {
	return "pti"
}

func (o *partType) KeyName() string {
	return "PTI"
}

func (o *partType) Names() []string {
	return []string{"Name", "USR", "TS"}
}

func (o *partType) ModifiedBy(user int64, t time.Time) {
	o.USR = &user
	o.TS = t
}

//
// sku DBObject generator
//
func (o sku) NewObj() interface{} {
	return new(sku)
}

//
// sku DBObject interface functions
//
func (o *sku) InsertValues() []interface{} {
	return []interface{}{o.USR, o.TS, o.MID, o.PTI, o.PartNumber, o.Description, o.SKU}
}

func (o *sku) UpdateValues() []interface{} {
	return []interface{}{o.USR, o.TS, o.MID, o.PTI, o.PartNumber, o.Description, o.SKU, o.KID}
}

func (o *sku) MemberPointers() []interface{} {
	return []interface{}{&o.KID, &o.USR, &o.TS, &o.MID, &o.PTI, &o.PartNumber, &o.Description, &o.SKU}
}

func (o *sku) Key() int64 {
	return o.KID
}

func (o *sku) SetID(id int64) {
	o.KID = id
}

func (o *sku) TableName() string {
	return "skus"
}

func (o *sku) SelectFields() string {
	return "kid,usr,ts,mid,pti,part_no,description,sku"
}

func (o *sku) InsertFields() string {
	return "kid,usr,ts,mid,pti,part_no,description,sku"
}

func (o *sku) KeyField() string {
	return "kid"
}

func (o *sku) KeyName() string {
	return "KID"
}

func (o *sku) Names() []string {
	return []string{"USR", "TS", "MID", "PTI", "PartNumber", "Description", "SKU"}
}

func (o *sku) ModifiedBy(user int64, t time.Time) {
	o.USR = &user
	o.TS = t
}

//
// part DBObject generator
//
func (o part) NewObj() interface{} {
	return new(part)
}

//
// part DBObject interface functions
//
func (o *part) InsertValues() []interface{} {
	return []interface{}{o.Cents, o.TS, o.KID, o.VID, o.Location, o.AssetTag, o.Bad, o.DID, o.STI, o.Serial, o.Unused, o.USR}
}

func (o *part) UpdateValues() []interface{} {
	return []interface{}{o.Cents, o.TS, o.KID, o.VID, o.Location, o.AssetTag, o.Bad, o.DID, o.STI, o.Serial, o.Unused, o.USR, o.PID}
}

func (o *part) MemberPointers() []interface{} {
	return []interface{}{&o.PID, &o.Cents, &o.TS, &o.KID, &o.VID, &o.Location, &o.AssetTag, &o.Bad, &o.DID, &o.STI, &o.Serial, &o.Unused, &o.USR}
}

func (o *part) Key() int64 {
	return o.PID
}

func (o *part) SetID(id int64) {
	o.PID = id
}

func (o *part) TableName() string {
	return "parts"
}

func (o *part) SelectFields() string {
	return "pid,cents,ts,kid,vid,location,asset_tag,bad,did,sti,serial_no,unused,usr"
}

func (o *part) InsertFields() string {
	return "pid,cents,ts,kid,vid,location,asset_tag,bad,did,sti,serial_no,unused,usr"
}

func (o *part) KeyField() string {
	return "pid"
}

func (o *part) KeyName() string {
	return "PID"
}

func (o *part) Names() []string {
	return []string{"Cents", "TS", "KID", "VID", "Location", "AssetTag", "Bad", "DID", "STI", "Serial", "Unused", "USR"}
}

func (o *part) ModifiedBy(user int64, t time.Time) {
	o.USR = &user
	o.TS = t
}

//
// partView DBObject generator
//
func (o partView) NewObj() interface{} {
	return new(partView)
}

//
// partView DBObject interface functions
//
func (o *partView) InsertValues() []interface{} {
	return []interface{}{o.VID, o.Serial, o.Description, o.Mfgr, o.Cents, o.PartType, o.SKU, o.Vendor, o.Price, o.Unused, o.DID, o.RMD, o.Hostname, o.PartNumber, o.AssetTag, o.Bad, o.KID, o.STI, o.Site, o.DeviceSN, o.Location}
}

func (o *partView) UpdateValues() []interface{} {
	return []interface{}{o.VID, o.Serial, o.Description, o.Mfgr, o.Cents, o.PartType, o.SKU, o.Vendor, o.Price, o.Unused, o.DID, o.RMD, o.Hostname, o.PartNumber, o.AssetTag, o.Bad, o.KID, o.STI, o.Site, o.DeviceSN, o.Location, o.PID}
}

func (o *partView) MemberPointers() []interface{} {
	return []interface{}{&o.PID, &o.VID, &o.Serial, &o.Description, &o.Mfgr, &o.Cents, &o.PartType, &o.SKU, &o.Vendor, &o.Price, &o.Unused, &o.DID, &o.RMD, &o.Hostname, &o.PartNumber, &o.AssetTag, &o.Bad, &o.KID, &o.STI, &o.Site, &o.DeviceSN, &o.Location}
}

func (o *partView) Key() int64 {
	return o.PID
}

func (o *partView) SetID(id int64) {
	o.PID = id
}

func (o *partView) TableName() string {
	return "parts_view"
}

func (o *partView) SelectFields() string {
	return "pid,vid,serial_no,description,mfgr,cents,part_type,sku,vendor,price,unused,did,rmd,hostname,part_no,asset_tag,bad,kid,sti,site,device_sn,location"
}

func (o *partView) InsertFields() string {
	return "pid,vid,serial_no,description,mfgr,cents,part_type,sku,vendor,price,unused,did,rmd,hostname,part_no,asset_tag,bad,kid,sti,site,device_sn,location"
}

func (o *partView) KeyField() string {
	return "pid"
}

func (o *partView) KeyName() string {
	return "PID"
}

func (o *partView) Names() []string {
	return []string{"VID", "Serial", "Description", "Mfgr", "Cents", "PartType", "SKU", "Vendor", "Price", "Unused", "DID", "RMD", "Hostname", "PartNumber", "AssetTag", "Bad", "KID", "STI", "Site", "DeviceSN", "Location"}
}

func (o *partView) ModifiedBy(user int64, t time.Time) {
}

//
// site DBObject generator
//
func (o site) NewObj() interface{} {
	return new(site)
}

//
// site DBObject interface functions
//
func (o *site) InsertValues() []interface{} {
	return []interface{}{o.Country, o.Phone, o.USR, o.Name, o.Address, o.State, o.Postal, o.City, o.Web, o.Note, o.TS}
}

func (o *site) UpdateValues() []interface{} {
	return []interface{}{o.Country, o.Phone, o.USR, o.Name, o.Address, o.State, o.Postal, o.City, o.Web, o.Note, o.TS, o.STI}
}

func (o *site) MemberPointers() []interface{} {
	return []interface{}{&o.STI, &o.Country, &o.Phone, &o.USR, &o.Name, &o.Address, &o.State, &o.Postal, &o.City, &o.Web, &o.Note, &o.TS}
}

func (o *site) Key() int64 {
	return o.STI
}

func (o *site) SetID(id int64) {
	o.STI = id
}

func (o *site) TableName() string {
	return "sites"
}

func (o *site) SelectFields() string {
	return "sti,country,phone,usr,name,address,state,postal,city,web,note,ts"
}

func (o *site) InsertFields() string {
	return "sti,country,phone,usr,name,address,state,postal,city,web,note,ts"
}

func (o *site) KeyField() string {
	return "sti"
}

func (o *site) KeyName() string {
	return "STI"
}

func (o *site) Names() []string {
	return []string{"Country", "Phone", "USR", "Name", "Address", "State", "Postal", "City", "Web", "Note", "TS"}
}

func (o *site) ModifiedBy(user int64, t time.Time) {
	o.USR = &user
	o.TS = t
}

//
// tag DBObject generator
//
func (o tag) NewObj() interface{} {
	return new(tag)
}

//
// tag DBObject interface functions
//
func (o *tag) InsertValues() []interface{} {
	return []interface{}{o.Name}
}

func (o *tag) UpdateValues() []interface{} {
	return []interface{}{o.Name, o.TID}
}

func (o *tag) MemberPointers() []interface{} {
	return []interface{}{&o.TID, &o.Name}
}

func (o *tag) Key() int64 {
	return o.TID
}

func (o *tag) SetID(id int64) {
	o.TID = id
}

func (o *tag) TableName() string {
	return "tags"
}

func (o *tag) SelectFields() string {
	return "tid,tag"
}

func (o *tag) InsertFields() string {
	return "tid,tag"
}

func (o *tag) KeyField() string {
	return "tid"
}

func (o *tag) KeyName() string {
	return "TID"
}

func (o *tag) Names() []string {
	return []string{"Name"}
}

func (o *tag) ModifiedBy(user int64, t time.Time) {
}

//
// rack DBObject generator
//
func (o rack) NewObj() interface{} {
	return new(rack)
}

//
// rack DBObject interface functions
//
func (o *rack) InsertValues() []interface{} {
	return []interface{}{o.STI, o.RUs, o.Label, o.VendorID, o.YPos, o.XPos, o.Note, o.USR, o.TS}
}

func (o *rack) UpdateValues() []interface{} {
	return []interface{}{o.STI, o.RUs, o.Label, o.VendorID, o.YPos, o.XPos, o.Note, o.USR, o.TS, o.RID}
}

func (o *rack) MemberPointers() []interface{} {
	return []interface{}{&o.RID, &o.STI, &o.RUs, &o.Label, &o.VendorID, &o.YPos, &o.XPos, &o.Note, &o.USR, &o.TS}
}

func (o *rack) Key() int64 {
	return o.RID
}

func (o *rack) SetID(id int64) {
	o.RID = id
}

func (o *rack) TableName() string {
	return "racks"
}

func (o *rack) SelectFields() string {
	return "rid,sti,rackunits,rack,vendor_id,y_pos,x_pos,note,usr,ts"
}

func (o *rack) InsertFields() string {
	return "rid,sti,rackunits,rack,vendor_id,y_pos,x_pos,note,usr,ts"
}

func (o *rack) KeyField() string {
	return "rid"
}

func (o *rack) KeyName() string {
	return "RID"
}

func (o *rack) Names() []string {
	return []string{"STI", "RUs", "Label", "VendorID", "YPos", "XPos", "Note", "USR", "TS"}
}

func (o *rack) ModifiedBy(user int64, t time.Time) {
}

//
// rackView DBObject generator
//
func (o rackView) NewObj() interface{} {
	return new(rackView)
}

//
// rackView DBObject interface functions
//
func (o *rackView) InsertValues() []interface{} {
	return []interface{}{o.RUs, o.Label, o.Site, o.VendorID, o.XPos, o.Note, o.TS, o.STI, o.YPos, o.USR}
}

func (o *rackView) UpdateValues() []interface{} {
	return []interface{}{o.RUs, o.Label, o.Site, o.VendorID, o.XPos, o.Note, o.TS, o.STI, o.YPos, o.USR, o.RID}
}

func (o *rackView) MemberPointers() []interface{} {
	return []interface{}{&o.RID, &o.RUs, &o.Label, &o.Site, &o.VendorID, &o.XPos, &o.Note, &o.TS, &o.STI, &o.YPos, &o.USR}
}

func (o *rackView) Key() int64 {
	return o.RID
}

func (o *rackView) SetID(id int64) {
	o.RID = id
}

func (o *rackView) TableName() string {
	return "racks_view"
}

func (o *rackView) SelectFields() string {
	return "rid,rackunits,rack,site,vendor_id,x_pos,note,ts,sti,y_pos,usr"
}

func (o *rackView) InsertFields() string {
	return "rid,rackunits,rack,site,vendor_id,x_pos,note,ts,sti,y_pos,usr"
}

func (o *rackView) KeyField() string {
	return "rid"
}

func (o *rackView) KeyName() string {
	return "RID"
}

func (o *rackView) Names() []string {
	return []string{"RUs", "Label", "Site", "VendorID", "XPos", "Note", "TS", "STI", "YPos", "USR"}
}

func (o *rackView) ModifiedBy(user int64, t time.Time) {
}

//
// vm DBObject generator
//
func (o vm) NewObj() interface{} {
	return new(vm)
}

//
// vm DBObject interface functions
//
func (o *vm) InsertValues() []interface{} {
	return []interface{}{o.Hostname, o.Profile, o.Note, o.USR, o.TS, o.DID}
}

func (o *vm) UpdateValues() []interface{} {
	return []interface{}{o.Hostname, o.Profile, o.Note, o.USR, o.TS, o.DID, o.VMI}
}

func (o *vm) MemberPointers() []interface{} {
	return []interface{}{&o.VMI, &o.Hostname, &o.Profile, &o.Note, &o.USR, &o.TS, &o.DID}
}

func (o *vm) Key() int64 {
	return o.VMI
}

func (o *vm) SetID(id int64) {
	o.VMI = id
}

func (o *vm) TableName() string {
	return "vms"
}

func (o *vm) SelectFields() string {
	return "vmi,hostname,profile,note,usr,ts,did"
}

func (o *vm) InsertFields() string {
	return "vmi,hostname,profile,note,usr,ts,did"
}

func (o *vm) KeyField() string {
	return "vmi"
}

func (o *vm) KeyName() string {
	return "VMI"
}

func (o *vm) Names() []string {
	return []string{"Hostname", "Profile", "Note", "USR", "TS", "DID"}
}

func (o *vm) ModifiedBy(user int64, t time.Time) {
	o.USR = &user
	o.TS = t
}

//
// vmView DBObject generator
//
func (o vmView) NewObj() interface{} {
	return new(vmView)
}

//
// vmView DBObject interface functions
//
func (o *vmView) InsertValues() []interface{} {
	return []interface{}{o.RID, o.STI, o.Rack, o.Site, o.Server, o.Hostname, o.Note, o.DID, o.TS, o.Version, o.USR, o.Profile}
}

func (o *vmView) UpdateValues() []interface{} {
	return []interface{}{o.RID, o.STI, o.Rack, o.Site, o.Server, o.Hostname, o.Note, o.DID, o.TS, o.Version, o.USR, o.Profile, o.VMI}
}

func (o *vmView) MemberPointers() []interface{} {
	return []interface{}{&o.VMI, &o.RID, &o.STI, &o.Rack, &o.Site, &o.Server, &o.Hostname, &o.Note, &o.DID, &o.TS, &o.Version, &o.USR, &o.Profile}
}

func (o *vmView) Key() int64 {
	return o.VMI
}

func (o *vmView) SetID(id int64) {
	o.VMI = id
}

func (o *vmView) TableName() string {
	return "vms_view"
}

func (o *vmView) SelectFields() string {
	return "vmi,rid,sti,rack,site,server,hostname,note,did,ts,version,usr,profile"
}

func (o *vmView) InsertFields() string {
	return "vmi,rid,sti,rack,site,server,hostname,note,did,ts,version,usr,profile"
}

func (o *vmView) KeyField() string {
	return "vmi"
}

func (o *vmView) KeyName() string {
	return "VMI"
}

func (o *vmView) Names() []string {
	return []string{"RID", "STI", "Rack", "Site", "Server", "Hostname", "Note", "DID", "TS", "Version", "USR", "Profile"}
}

func (o *vmView) ModifiedBy(user int64, t time.Time) {
	o.USR = &user
	o.TS = t
}

//
// vmIPs DBObject generator
//
func (o vmIPs) NewObj() interface{} {
	return new(vmIPs)
}

//
// vmIPs DBObject interface functions
//
func (o *vmIPs) InsertValues() []interface{} {
	return []interface{}{o.DID, o.STI, o.RU, o.Site, o.Server, o.Hostname, o.Profile, o.Note, o.RID, o.Rack, o.TS, o.IPs, o.USR}
}

func (o *vmIPs) UpdateValues() []interface{} {
	return []interface{}{o.DID, o.STI, o.RU, o.Site, o.Server, o.Hostname, o.Profile, o.Note, o.RID, o.Rack, o.TS, o.IPs, o.USR, o.VMI}
}

func (o *vmIPs) MemberPointers() []interface{} {
	return []interface{}{&o.VMI, &o.DID, &o.STI, &o.RU, &o.Site, &o.Server, &o.Hostname, &o.Profile, &o.Note, &o.RID, &o.Rack, &o.TS, &o.IPs, &o.USR}
}

func (o *vmIPs) Key() int64 {
	return o.VMI
}

func (o *vmIPs) SetID(id int64) {
	o.VMI = id
}

func (o *vmIPs) TableName() string {
	return "vms_list"
}

func (o *vmIPs) SelectFields() string {
	return "vmi,did,sti,ru,site,server,hostname,profile,note,rid,rack,ts,ips,usr"
}

func (o *vmIPs) InsertFields() string {
	return "vmi,did,sti,ru,site,server,hostname,profile,note,rid,rack,ts,ips,usr"
}

func (o *vmIPs) KeyField() string {
	return "vmi"
}

func (o *vmIPs) KeyName() string {
	return "VMI"
}

func (o *vmIPs) Names() []string {
	return []string{"DID", "STI", "RU", "Site", "Server", "Hostname", "Profile", "Note", "RID", "Rack", "TS", "IPs", "USR"}
}

func (o *vmIPs) ModifiedBy(user int64, t time.Time) {
}

//
// vmHistory DBObject generator
//
func (o vmHistory) NewObj() interface{} {
	return new(vmHistory)
}

//
// vmHistory DBObject interface functions
//
func (o *vmHistory) InsertValues() []interface{} {
	return []interface{}{o.Version, o.TS, o.Rack, o.Server, o.Login, o.Site, o.Hostname, o.Profile, o.Note, o.USR, o.DID, o.RID, o.STI}
}

func (o *vmHistory) UpdateValues() []interface{} {
	return []interface{}{o.Version, o.TS, o.Rack, o.Server, o.Login, o.Site, o.Hostname, o.Profile, o.Note, o.USR, o.DID, o.RID, o.STI, o.VMI}
}

func (o *vmHistory) MemberPointers() []interface{} {
	return []interface{}{&o.VMI, &o.Version, &o.TS, &o.Rack, &o.Server, &o.Login, &o.Site, &o.Hostname, &o.Profile, &o.Note, &o.USR, &o.DID, &o.RID, &o.STI}
}

func (o *vmHistory) Key() int64 {
	return o.VMI
}

func (o *vmHistory) SetID(id int64) {
	o.VMI = id
}

func (o *vmHistory) TableName() string {
	return "vms_history"
}

func (o *vmHistory) SelectFields() string {
	return "vmi,version,ts,rack,server,login,site,hostname,profile,note,usr,did,rid,sti"
}

func (o *vmHistory) InsertFields() string {
	return "vmi,version,ts,rack,server,login,site,hostname,profile,note,usr,did,rid,sti"
}

func (o *vmHistory) KeyField() string {
	return "vmi"
}

func (o *vmHistory) KeyName() string {
	return "VMI"
}

func (o *vmHistory) Names() []string {
	return []string{"Version", "TS", "Rack", "Server", "Login", "Site", "Hostname", "Profile", "Note", "USR", "DID", "RID", "STI"}
}

func (o *vmHistory) ModifiedBy(user int64, t time.Time) {
}

//
// inventory DBObject generator
//
func (o inventory) NewObj() interface{} {
	return new(inventory)
}

//
// inventory DBObject interface functions
//
func (o *inventory) InsertValues() []interface{} {
	return []interface{}{o.KID, o.Qty, o.Site, o.PartNumber, o.PTI, o.Mfgr, o.PartType, o.Description, o.Cents, o.Price}
}

func (o *inventory) UpdateValues() []interface{} {
	return []interface{}{o.KID, o.Qty, o.Site, o.PartNumber, o.PTI, o.Mfgr, o.PartType, o.Description, o.Cents, o.Price, o.STI}
}

func (o *inventory) MemberPointers() []interface{} {
	return []interface{}{&o.STI, &o.KID, &o.Qty, &o.Site, &o.PartNumber, &o.PTI, &o.Mfgr, &o.PartType, &o.Description, &o.Cents, &o.Price}
}

func (o *inventory) Key() int64 {
	return o.STI
}

func (o *inventory) SetID(id int64) {
	o.STI = id
}

func (o *inventory) TableName() string {
	return "inventory"
}

func (o *inventory) SelectFields() string {
	return "sti,kid,qty,site,part_no,pti,mfgr,part_type,description,cents,price"
}

func (o *inventory) InsertFields() string {
	return "sti,kid,qty,site,part_no,pti,mfgr,part_type,description,cents,price"
}

func (o *inventory) KeyField() string {
	return "sti"
}

func (o *inventory) KeyName() string {
	return "STI"
}

func (o *inventory) Names() []string {
	return []string{"KID", "Qty", "Site", "PartNumber", "PTI", "Mfgr", "PartType", "Description", "Cents", "Price"}
}

func (o *inventory) ModifiedBy(user int64, t time.Time) {
}

//
// contract DBObject generator
//
func (o contract) NewObj() interface{} {
	return new(contract)
}

//
// contract DBObject interface functions
//
func (o *contract) InsertValues() []interface{} {
	return []interface{}{o.VID, o.Policy, o.Phone}
}

func (o *contract) UpdateValues() []interface{} {
	return []interface{}{o.VID, o.Policy, o.Phone, o.CID}
}

func (o *contract) MemberPointers() []interface{} {
	return []interface{}{&o.CID, &o.VID, &o.Policy, &o.Phone}
}

func (o *contract) Key() int64 {
	return o.CID
}

func (o *contract) SetID(id int64) {
	o.CID = id
}

func (o *contract) TableName() string {
	return "contracts"
}

func (o *contract) SelectFields() string {
	return "cid,vid,policy,phone"
}

func (o *contract) InsertFields() string {
	return "cid,vid,policy,phone"
}

func (o *contract) KeyField() string {
	return "cid"
}

func (o *contract) KeyName() string {
	return "CID"
}

func (o *contract) Names() []string {
	return []string{"VID", "Policy", "Phone"}
}

func (o *contract) ModifiedBy(user int64, t time.Time) {
}

//
// deviceType DBObject generator
//
func (o deviceType) NewObj() interface{} {
	return new(deviceType)
}

//
// deviceType DBObject interface functions
//
func (o *deviceType) InsertValues() []interface{} {
	return []interface{}{o.Name}
}

func (o *deviceType) UpdateValues() []interface{} {
	return []interface{}{o.Name, o.DTI}
}

func (o *deviceType) MemberPointers() []interface{} {
	return []interface{}{&o.DTI, &o.Name}
}

func (o *deviceType) Key() int64 {
	return o.DTI
}

func (o *deviceType) SetID(id int64) {
	o.DTI = id
}

func (o *deviceType) TableName() string {
	return "device_types"
}

func (o *deviceType) SelectFields() string {
	return "dti,name"
}

func (o *deviceType) InsertFields() string {
	return "dti,name"
}

func (o *deviceType) KeyField() string {
	return "dti"
}

func (o *deviceType) KeyName() string {
	return "DTI"
}

func (o *deviceType) Names() []string {
	return []string{"Name"}
}

func (o *deviceType) ModifiedBy(user int64, t time.Time) {
}

//
// device DBObject generator
//
func (o device) NewObj() interface{} {
	return new(device)
}

//
// device DBObject interface functions
//
func (o *device) InsertValues() []interface{} {
	return []interface{}{o.RU, o.Model, o.SerialNo, o.RID, o.TID, o.Height, o.Alias, o.AssetTag, o.Note, o.TS, o.Hostname, o.Profile, o.USR, o.MID, o.DTI, o.Assigned}
}

func (o *device) UpdateValues() []interface{} {
	return []interface{}{o.RU, o.Model, o.SerialNo, o.RID, o.TID, o.Height, o.Alias, o.AssetTag, o.Note, o.TS, o.Hostname, o.Profile, o.USR, o.MID, o.DTI, o.Assigned, o.DID}
}

func (o *device) MemberPointers() []interface{} {
	return []interface{}{&o.DID, &o.RU, &o.Model, &o.SerialNo, &o.RID, &o.TID, &o.Height, &o.Alias, &o.AssetTag, &o.Note, &o.TS, &o.Hostname, &o.Profile, &o.USR, &o.MID, &o.DTI, &o.Assigned}
}

func (o *device) Key() int64 {
	return o.DID
}

func (o *device) SetID(id int64) {
	o.DID = id
}

func (o *device) TableName() string {
	return "devices"
}

func (o *device) SelectFields() string {
	return "did,ru,model,sn,rid,tid,height,alias,asset_tag,note,ts,hostname,profile,usr,mid,dti,assigned"
}

func (o *device) InsertFields() string {
	return "did,ru,model,sn,rid,tid,height,alias,asset_tag,note,ts,hostname,profile,usr,mid,dti,assigned"
}

func (o *device) KeyField() string {
	return "did"
}

func (o *device) KeyName() string {
	return "DID"
}

func (o *device) Names() []string {
	return []string{"RU", "Model", "SerialNo", "RID", "TID", "Height", "Alias", "AssetTag", "Note", "TS", "Hostname", "Profile", "USR", "MID", "DTI", "Assigned"}
}

func (o *device) ModifiedBy(user int64, t time.Time) {
	o.USR = &user
	o.TS = t
}

//
// deviceView DBObject generator
//
func (o deviceView) NewObj() interface{} {
	return new(deviceView)
}

//
// deviceView DBObject interface functions
//
func (o *deviceView) InsertValues() []interface{} {
	return []interface{}{o.Type, o.TS, o.DTI, o.Hostname, o.Alias, o.Note, o.Rack, o.RU, o.Site, o.USR, o.Height, o.Make, o.Profile, o.SerialNo, o.STI, o.MID, o.RID, o.TID, o.Version, o.Model, o.AssetTag, o.Assigned, o.Tag}
}

func (o *deviceView) UpdateValues() []interface{} {
	return []interface{}{o.Type, o.TS, o.DTI, o.Hostname, o.Alias, o.Note, o.Rack, o.RU, o.Site, o.USR, o.Height, o.Make, o.Profile, o.SerialNo, o.STI, o.MID, o.RID, o.TID, o.Version, o.Model, o.AssetTag, o.Assigned, o.Tag, o.DID}
}

func (o *deviceView) MemberPointers() []interface{} {
	return []interface{}{&o.DID, &o.Type, &o.TS, &o.DTI, &o.Hostname, &o.Alias, &o.Note, &o.Rack, &o.RU, &o.Site, &o.USR, &o.Height, &o.Make, &o.Profile, &o.SerialNo, &o.STI, &o.MID, &o.RID, &o.TID, &o.Version, &o.Model, &o.AssetTag, &o.Assigned, &o.Tag}
}

func (o *deviceView) Key() int64 {
	return o.DID
}

func (o *deviceView) SetID(id int64) {
	o.DID = id
}

func (o *deviceView) TableName() string {
	return "devices_view"
}

func (o *deviceView) SelectFields() string {
	return "did,devtype,ts,dti,hostname,alias,note,rack,ru,site,usr,height,make,profile,sn,sti,mid,rid,tid,version,model,asset_tag,assigned,tag"
}

func (o *deviceView) InsertFields() string {
	return "did,devtype,ts,dti,hostname,alias,note,rack,ru,site,usr,height,make,profile,sn,sti,mid,rid,tid,version,model,asset_tag,assigned,tag"
}

func (o *deviceView) KeyField() string {
	return "did"
}

func (o *deviceView) KeyName() string {
	return "DID"
}

func (o *deviceView) Names() []string {
	return []string{"Type", "TS", "DTI", "Hostname", "Alias", "Note", "Rack", "RU", "Site", "USR", "Height", "Make", "Profile", "SerialNo", "STI", "MID", "RID", "TID", "Version", "Model", "AssetTag", "Assigned", "Tag"}
}

func (o *deviceView) ModifiedBy(user int64, t time.Time) {
	o.USR = &user
	o.TS = t
}

//
// deviceHistory DBObject generator
//
func (o deviceHistory) NewObj() interface{} {
	return new(deviceHistory)
}

//
// deviceHistory DBObject interface functions
//
func (o *deviceHistory) InsertValues() []interface{} {
	return []interface{}{o.Hostname, o.Assigned, o.Type, o.Version, o.USR, o.RID, o.TID, o.RU, o.AssetTag, o.Login, o.TS, o.KID, o.Rack, o.Alias, o.SerialNo, o.Note, o.Site, o.STI, o.DTI, o.Height, o.Profile, o.Tag}
}

func (o *deviceHistory) UpdateValues() []interface{} {
	return []interface{}{o.Hostname, o.Assigned, o.Type, o.Version, o.USR, o.RID, o.TID, o.RU, o.AssetTag, o.Login, o.TS, o.KID, o.Rack, o.Alias, o.SerialNo, o.Note, o.Site, o.STI, o.DTI, o.Height, o.Profile, o.Tag, o.DID}
}

func (o *deviceHistory) MemberPointers() []interface{} {
	return []interface{}{&o.DID, &o.Hostname, &o.Assigned, &o.Type, &o.Version, &o.USR, &o.RID, &o.TID, &o.RU, &o.AssetTag, &o.Login, &o.TS, &o.KID, &o.Rack, &o.Alias, &o.SerialNo, &o.Note, &o.Site, &o.STI, &o.DTI, &o.Height, &o.Profile, &o.Tag}
}

func (o *deviceHistory) Key() int64 {
	return o.DID
}

func (o *deviceHistory) SetID(id int64) {
	o.DID = id
}

func (o *deviceHistory) TableName() string {
	return "devices_history"
}

func (o *deviceHistory) SelectFields() string {
	return "did,hostname,assigned,devtype,version,usr,rid,tid,ru,asset_tag,login,ts,kid,rack,alias,sn,note,site,sti,dti,height,profile,tag"
}

func (o *deviceHistory) InsertFields() string {
	return "did,hostname,assigned,devtype,version,usr,rid,tid,ru,asset_tag,login,ts,kid,rack,alias,sn,note,site,sti,dti,height,profile,tag"
}

func (o *deviceHistory) KeyField() string {
	return "did"
}

func (o *deviceHistory) KeyName() string {
	return "DID"
}

func (o *deviceHistory) Names() []string {
	return []string{"Hostname", "Assigned", "Type", "Version", "USR", "RID", "TID", "RU", "AssetTag", "Login", "TS", "KID", "Rack", "Alias", "SerialNo", "Note", "Site", "STI", "DTI", "Height", "Profile", "Tag"}
}

func (o *deviceHistory) ModifiedBy(user int64, t time.Time) {
}

//
// deviceIPs DBObject generator
//
func (o deviceIPs) NewObj() interface{} {
	return new(deviceIPs)
}

//
// deviceIPs DBObject interface functions
//
func (o *deviceIPs) InsertValues() []interface{} {
	return []interface{}{o.TID, o.RU, o.Hostname, o.SerialNo, o.AssetTag, o.Note, o.MID, o.DTI, o.Site, o.Mgmt, o.Alias, o.Profile, o.Make, o.Model, o.Assigned, o.STI, o.Rack, o.Type, o.TS, o.Height, o.USR, o.Tag, o.RID, o.IPs}
}

func (o *deviceIPs) UpdateValues() []interface{} {
	return []interface{}{o.TID, o.RU, o.Hostname, o.SerialNo, o.AssetTag, o.Note, o.MID, o.DTI, o.Site, o.Mgmt, o.Alias, o.Profile, o.Make, o.Model, o.Assigned, o.STI, o.Rack, o.Type, o.TS, o.Height, o.USR, o.Tag, o.RID, o.IPs, o.DID}
}

func (o *deviceIPs) MemberPointers() []interface{} {
	return []interface{}{&o.DID, &o.TID, &o.RU, &o.Hostname, &o.SerialNo, &o.AssetTag, &o.Note, &o.MID, &o.DTI, &o.Site, &o.Mgmt, &o.Alias, &o.Profile, &o.Make, &o.Model, &o.Assigned, &o.STI, &o.Rack, &o.Type, &o.TS, &o.Height, &o.USR, &o.Tag, &o.RID, &o.IPs}
}

func (o *deviceIPs) Key() int64 {
	return o.DID
}

func (o *deviceIPs) SetID(id int64) {
	o.DID = id
}

func (o *deviceIPs) TableName() string {
	return "devices_list"
}

func (o *deviceIPs) SelectFields() string {
	return "did,tid,ru,hostname,sn,asset_tag,note,mid,dti,site,mgmt,alias,profile,make,model,assigned,sti,rack,devtype,ts,height,usr,tag,rid,ips"
}

func (o *deviceIPs) InsertFields() string {
	return "did,tid,ru,hostname,sn,asset_tag,note,mid,dti,site,mgmt,alias,profile,make,model,assigned,sti,rack,devtype,ts,height,usr,tag,rid,ips"
}

func (o *deviceIPs) KeyField() string {
	return "did"
}

func (o *deviceIPs) KeyName() string {
	return "DID"
}

func (o *deviceIPs) Names() []string {
	return []string{"TID", "RU", "Hostname", "SerialNo", "AssetTag", "Note", "MID", "DTI", "Site", "Mgmt", "Alias", "Profile", "Make", "Model", "Assigned", "STI", "Rack", "Type", "TS", "Height", "USR", "Tag", "RID", "IPs"}
}

func (o *deviceIPs) ModifiedBy(user int64, t time.Time) {
}

//
// deviceAdjust DBObject generator
//
func (o deviceAdjust) NewObj() interface{} {
	return new(deviceAdjust)
}

//
// deviceAdjust DBObject interface functions
//
func (o *deviceAdjust) InsertValues() []interface{} {
	return []interface{}{o.RID, o.RU, o.Height}
}

func (o *deviceAdjust) UpdateValues() []interface{} {
	return []interface{}{o.RID, o.RU, o.Height, o.DID}
}

func (o *deviceAdjust) MemberPointers() []interface{} {
	return []interface{}{&o.DID, &o.RID, &o.RU, &o.Height}
}

func (o *deviceAdjust) Key() int64 {
	return o.DID
}

func (o *deviceAdjust) SetID(id int64) {
	o.DID = id
}

func (o *deviceAdjust) TableName() string {
	return "devices_adjust"
}

func (o *deviceAdjust) SelectFields() string {
	return "did,rid,ru,height"
}

func (o *deviceAdjust) InsertFields() string {
	return "did,rid,ru,height"
}

func (o *deviceAdjust) KeyField() string {
	return "did"
}

func (o *deviceAdjust) KeyName() string {
	return "DID"
}

func (o *deviceAdjust) Names() []string {
	return []string{"RID", "RU", "Height"}
}

func (o *deviceAdjust) ModifiedBy(user int64, t time.Time) {
}

//
// iface DBObject generator
//
func (o iface) NewObj() interface{} {
	return new(iface)
}

//
// iface DBObject interface functions
//
func (o *iface) InsertValues() []interface{} {
	return []interface{}{o.MAC, o.CableTag, o.SwitchPort, o.DID, o.Mgmt, o.Port}
}

func (o *iface) UpdateValues() []interface{} {
	return []interface{}{o.MAC, o.CableTag, o.SwitchPort, o.DID, o.Mgmt, o.Port, o.IFD}
}

func (o *iface) MemberPointers() []interface{} {
	return []interface{}{&o.IFD, &o.MAC, &o.CableTag, &o.SwitchPort, &o.DID, &o.Mgmt, &o.Port}
}

func (o *iface) Key() int64 {
	return o.IFD
}

func (o *iface) SetID(id int64) {
	o.IFD = id
}

func (o *iface) TableName() string {
	return "interfaces"
}

func (o *iface) SelectFields() string {
	return "ifd,mac,cable_tag,switch_port,did,mgmt,port"
}

func (o *iface) InsertFields() string {
	return "ifd,mac,cable_tag,switch_port,did,mgmt,port"
}

func (o *iface) KeyField() string {
	return "ifd"
}

func (o *iface) KeyName() string {
	return "IFD"
}

func (o *iface) Names() []string {
	return []string{"MAC", "CableTag", "SwitchPort", "DID", "Mgmt", "Port"}
}

func (o *iface) ModifiedBy(user int64, t time.Time) {
}

//
// ifaceView DBObject generator
//
func (o ifaceView) NewObj() interface{} {
	return new(ifaceView)
}

//
// ifaceView DBObject interface functions
//
func (o *ifaceView) InsertValues() []interface{} {
	return []interface{}{o.MAC, o.SwitchPort, o.DID, o.IID, o.Mgmt, o.IP, o.ipType, o.CableTag, o.IPT, o.IP32, o.Port}
}

func (o *ifaceView) UpdateValues() []interface{} {
	return []interface{}{o.MAC, o.SwitchPort, o.DID, o.IID, o.Mgmt, o.IP, o.ipType, o.CableTag, o.IPT, o.IP32, o.Port, o.IFD}
}

func (o *ifaceView) MemberPointers() []interface{} {
	return []interface{}{&o.IFD, &o.MAC, &o.SwitchPort, &o.DID, &o.IID, &o.Mgmt, &o.IP, &o.ipType, &o.CableTag, &o.IPT, &o.IP32, &o.Port}
}

func (o *ifaceView) Key() int64 {
	return o.IFD
}

func (o *ifaceView) SetID(id int64) {
	o.IFD = id
}

func (o *ifaceView) TableName() string {
	return "interfaces_view"
}

func (o *ifaceView) SelectFields() string {
	return "ifd,mac,switch_port,did,iid,mgmt,ipv4,iptype,cable_tag,ipt,ip32,port"
}

func (o *ifaceView) InsertFields() string {
	return "ifd,mac,switch_port,did,iid,mgmt,ipv4,iptype,cable_tag,ipt,ip32,port"
}

func (o *ifaceView) KeyField() string {
	return "ifd"
}

func (o *ifaceView) KeyName() string {
	return "IFD"
}

func (o *ifaceView) Names() []string {
	return []string{"MAC", "SwitchPort", "DID", "IID", "Mgmt", "IP", "ipType", "CableTag", "IPT", "IP32", "Port"}
}

func (o *ifaceView) ModifiedBy(user int64, t time.Time) {
}

//
// ipAddr DBObject generator
//
func (o ipAddr) NewObj() interface{} {
	return new(ipAddr)
}

//
// ipAddr DBObject interface functions
//
func (o *ipAddr) InsertValues() []interface{} {
	return []interface{}{o.IPT, o.IP32, o.Note, o.USR, o.IFD, o.VLI, o.IP, o.TS, o.VMI}
}

func (o *ipAddr) UpdateValues() []interface{} {
	return []interface{}{o.IPT, o.IP32, o.Note, o.USR, o.IFD, o.VLI, o.IP, o.TS, o.VMI, o.IID}
}

func (o *ipAddr) MemberPointers() []interface{} {
	return []interface{}{&o.IID, &o.IPT, &o.IP32, &o.Note, &o.USR, &o.IFD, &o.VLI, &o.IP, &o.TS, &o.VMI}
}

func (o *ipAddr) Key() int64 {
	return o.IID
}

func (o *ipAddr) SetID(id int64) {
	o.IID = id
}

func (o *ipAddr) TableName() string {
	return "ips"
}

func (o *ipAddr) SelectFields() string {
	return "iid,ipt,ip32,note,usr,ifd,vli,ipv4,ts,vmi"
}

func (o *ipAddr) InsertFields() string {
	return "iid,ipt,ip32,note,usr,ifd,vli,ipv4,ts,vmi"
}

func (o *ipAddr) KeyField() string {
	return "iid"
}

func (o *ipAddr) KeyName() string {
	return "IID"
}

func (o *ipAddr) Names() []string {
	return []string{"IPT", "IP32", "Note", "USR", "IFD", "VLI", "IP", "TS", "VMI"}
}

func (o *ipAddr) ModifiedBy(user int64, t time.Time) {
}

//
// ipView DBObject generator
//
func (o ipView) NewObj() interface{} {
	return new(ipView)
}

//
// ipView DBObject interface functions
//
func (o *ipView) InsertValues() []interface{} {
	return []interface{}{o.IP, o.VLAN, o.Note, o.TS, o.IFD, o.IPT, o.IP32, o.USR, o.VMI, o.VLI, o.Type}
}

func (o *ipView) UpdateValues() []interface{} {
	return []interface{}{o.IP, o.VLAN, o.Note, o.TS, o.IFD, o.IPT, o.IP32, o.USR, o.VMI, o.VLI, o.Type, o.IID}
}

func (o *ipView) MemberPointers() []interface{} {
	return []interface{}{&o.IID, &o.IP, &o.VLAN, &o.Note, &o.TS, &o.IFD, &o.IPT, &o.IP32, &o.USR, &o.VMI, &o.VLI, &o.Type}
}

func (o *ipView) Key() int64 {
	return o.IID
}

func (o *ipView) SetID(id int64) {
	o.IID = id
}

func (o *ipView) TableName() string {
	return "ips_view"
}

func (o *ipView) SelectFields() string {
	return "iid,ipv4,vlan,note,ts,ifd,ipt,ip32,usr,vmi,vli,iptype"
}

func (o *ipView) InsertFields() string {
	return "iid,ipv4,vlan,note,ts,ifd,ipt,ip32,usr,vmi,vli,iptype"
}

func (o *ipView) KeyField() string {
	return "iid"
}

func (o *ipView) KeyName() string {
	return "IID"
}

func (o *ipView) Names() []string {
	return []string{"IP", "VLAN", "Note", "TS", "IFD", "IPT", "IP32", "USR", "VMI", "VLI", "Type"}
}

func (o *ipView) ModifiedBy(user int64, t time.Time) {
}

//
// ipsUsed DBObject generator
//
func (o ipsUsed) NewObj() interface{} {
	return new(ipsUsed)
}

//
// ipsUsed DBObject interface functions
//
func (o *ipsUsed) InsertValues() []interface{} {
	return []interface{}{o.IPT, o.Site, o.IP, o.Host, o.Hostname, o.RID, o.STI, o.Rack, o.Type, o.Note, o.ID}
}

func (o *ipsUsed) UpdateValues() []interface{} {
	return []interface{}{o.IPT, o.Site, o.IP, o.Host, o.Hostname, o.RID, o.STI, o.Rack, o.Type, o.Note, o.ID}
}

func (o *ipsUsed) MemberPointers() []interface{} {
	return []interface{}{&o.IPT, &o.Site, &o.IP, &o.Host, &o.Hostname, &o.RID, &o.STI, &o.Rack, &o.Type, &o.Note, &o.ID}
}

func (o *ipsUsed) Key() int64 {
	return 0
}

func (o *ipsUsed) SetID(id int64) {
}

func (o *ipsUsed) TableName() string {
	return "ips_list"
}

func (o *ipsUsed) SelectFields() string {
	return "ipt,site,ip,host,hostname,rid,sti,rack,iptype,note,id"
}

func (o *ipsUsed) InsertFields() string {
	return "ipt,site,ip,host,hostname,rid,sti,rack,iptype,note,id"
}

func (o *ipsUsed) KeyField() string {
	return ""
}

func (o *ipsUsed) KeyName() string {
	return ""
}

func (o *ipsUsed) Names() []string {
	return []string{"IPT", "Site", "IP", "Host", "Hostname", "RID", "STI", "Rack", "Type", "Note", "ID"}
}

func (o *ipsUsed) ModifiedBy(user int64, t time.Time) {
}

//
// ipReserve DBObject generator
//
func (o ipReserve) NewObj() interface{} {
	return new(ipReserve)
}

//
// ipReserve DBObject interface functions
//
func (o *ipReserve) InsertValues() []interface{} {
	return []interface{}{o.IP32, o.Note, o.User, o.VLI, o.Site, o.VLAN, o.USR, o.TS, o.STI, o.IPT, o.IP}
}

func (o *ipReserve) UpdateValues() []interface{} {
	return []interface{}{o.IP32, o.Note, o.User, o.VLI, o.Site, o.VLAN, o.USR, o.TS, o.STI, o.IPT, o.IP, o.IID}
}

func (o *ipReserve) MemberPointers() []interface{} {
	return []interface{}{&o.IID, &o.IP32, &o.Note, &o.User, &o.VLI, &o.Site, &o.VLAN, &o.USR, &o.TS, &o.STI, &o.IPT, &o.IP}
}

func (o *ipReserve) Key() int64 {
	return o.IID
}

func (o *ipReserve) SetID(id int64) {
	o.IID = id
}

func (o *ipReserve) TableName() string {
	return "ips_reserved"
}

func (o *ipReserve) SelectFields() string {
	return "iid,ip32,note,username,vli,site,vlan,usr,ts,sti,ipt,ipv4"
}

func (o *ipReserve) InsertFields() string {
	return "iid,ip32,note,username,vli,site,vlan,usr,ts,sti,ipt,ipv4"
}

func (o *ipReserve) KeyField() string {
	return "iid"
}

func (o *ipReserve) KeyName() string {
	return "IID"
}

func (o *ipReserve) Names() []string {
	return []string{"IP32", "Note", "User", "VLI", "Site", "VLAN", "USR", "TS", "STI", "IPT", "IP"}
}

func (o *ipReserve) ModifiedBy(user int64, t time.Time) {
}

//
// provider DBObject generator
//
func (o provider) NewObj() interface{} {
	return new(provider)
}

//
// provider DBObject interface functions
//
func (o *provider) InsertValues() []interface{} {
	return []interface{}{o.URL, o.Note, o.Name, o.Contact, o.Phone, o.EMail}
}

func (o *provider) UpdateValues() []interface{} {
	return []interface{}{o.URL, o.Note, o.Name, o.Contact, o.Phone, o.EMail, o.PRI}
}

func (o *provider) MemberPointers() []interface{} {
	return []interface{}{&o.PRI, &o.URL, &o.Note, &o.Name, &o.Contact, &o.Phone, &o.EMail}
}

func (o *provider) Key() int64 {
	return o.PRI
}

func (o *provider) SetID(id int64) {
	o.PRI = id
}

func (o *provider) TableName() string {
	return "providers"
}

func (o *provider) SelectFields() string {
	return "pri,z_side_xcon,note,name,provider,a_side_xcon,a_side_handoff"
}

func (o *provider) InsertFields() string {
	return "pri,z_side_xcon,note,name,provider,a_side_xcon,a_side_handoff"
}

func (o *provider) KeyField() string {
	return "pri"
}

func (o *provider) KeyName() string {
	return "PRI"
}

func (o *provider) Names() []string {
	return []string{"URL", "Note", "Name", "Contact", "Phone", "EMail"}
}

func (o *provider) ModifiedBy(user int64, t time.Time) {
}

//
// circuit DBObject generator
//
func (o circuit) NewObj() interface{} {
	return new(circuit)
}

//
// circuit DBObject interface functions
//
func (o *circuit) InsertValues() []interface{} {
	return []interface{}{o.STI, o.PRI, o.CircuitID, o.ASideXConn, o.ASideHandoff, o.ZSideXConn, o.ZSideHandoff, o.Note}
}

func (o *circuit) UpdateValues() []interface{} {
	return []interface{}{o.STI, o.PRI, o.CircuitID, o.ASideXConn, o.ASideHandoff, o.ZSideXConn, o.ZSideHandoff, o.Note, o.CID}
}

func (o *circuit) MemberPointers() []interface{} {
	return []interface{}{&o.CID, &o.STI, &o.PRI, &o.CircuitID, &o.ASideXConn, &o.ASideHandoff, &o.ZSideXConn, &o.ZSideHandoff, &o.Note}
}

func (o *circuit) Key() int64 {
	return o.CID
}

func (o *circuit) SetID(id int64) {
	o.CID = id
}

func (o *circuit) TableName() string {
	return "circuits"
}

func (o *circuit) SelectFields() string {
	return "cid,site,pri,circuit_id,a_side_xcon,a_side_handoff,z_side_xcon,z_side_handoff,note"
}

func (o *circuit) InsertFields() string {
	return "cid,site,pri,circuit_id,a_side_xcon,a_side_handoff,z_side_xcon,z_side_handoff,note"
}

func (o *circuit) KeyField() string {
	return "cid"
}

func (o *circuit) KeyName() string {
	return "CID"
}

func (o *circuit) Names() []string {
	return []string{"STI", "PRI", "CircuitID", "ASideXConn", "ASideHandoff", "ZSideXConn", "ZSideHandoff", "Note"}
}

func (o *circuit) ModifiedBy(user int64, t time.Time) {
}

//
// circuitView DBObject generator
//
func (o circuitView) NewObj() interface{} {
	return new(circuitView)
}

//
// circuitView DBObject interface functions
//
func (o *circuitView) InsertValues() []interface{} {
	return []interface{}{o.STI, o.PRI, o.Provider, o.CircuitID, o.ZSideHandoff, o.Site, o.ASideXConn, o.ASideHandoff, o.ZSideXConn, o.Note}
}

func (o *circuitView) UpdateValues() []interface{} {
	return []interface{}{o.STI, o.PRI, o.Provider, o.CircuitID, o.ZSideHandoff, o.Site, o.ASideXConn, o.ASideHandoff, o.ZSideXConn, o.Note, o.CID}
}

func (o *circuitView) MemberPointers() []interface{} {
	return []interface{}{&o.CID, &o.STI, &o.PRI, &o.Provider, &o.CircuitID, &o.ZSideHandoff, &o.Site, &o.ASideXConn, &o.ASideHandoff, &o.ZSideXConn, &o.Note}
}

func (o *circuitView) Key() int64 {
	return o.CID
}

func (o *circuitView) SetID(id int64) {
	o.CID = id
}

func (o *circuitView) TableName() string {
	return "circuits"
}

func (o *circuitView) SelectFields() string {
	return "cid,site,pri,provider,circuit_id,z_side_handoff,site,a_side_xcon,a_side_handoff,z_side_xcon,note"
}

func (o *circuitView) InsertFields() string {
	return "cid,site,pri,provider,circuit_id,z_side_handoff,site,a_side_xcon,a_side_handoff,z_side_xcon,note"
}

func (o *circuitView) KeyField() string {
	return "cid"
}

func (o *circuitView) KeyName() string {
	return "CID"
}

func (o *circuitView) Names() []string {
	return []string{"STI", "PRI", "Provider", "CircuitID", "ZSideHandoff", "Site", "ASideXConn", "ASideHandoff", "ZSideXConn", "Note"}
}

func (o *circuitView) ModifiedBy(user int64, t time.Time) {
}

//
// subCircuit DBObject generator
//
func (o subCircuit) NewObj() interface{} {
	return new(subCircuit)
}

//
// subCircuit DBObject interface functions
//
func (o *subCircuit) InsertValues() []interface{} {
	return []interface{}{o.CID, o.SubID, o.Note}
}

func (o *subCircuit) UpdateValues() []interface{} {
	return []interface{}{o.CID, o.SubID, o.Note, o.SCI}
}

func (o *subCircuit) MemberPointers() []interface{} {
	return []interface{}{&o.SCI, &o.CID, &o.SubID, &o.Note}
}

func (o *subCircuit) Key() int64 {
	return o.SCI
}

func (o *subCircuit) SetID(id int64) {
	o.SCI = id
}

func (o *subCircuit) TableName() string {
	return "sub_circuits"
}

func (o *subCircuit) SelectFields() string {
	return "sci,cid,sub_circuit_id,note"
}

func (o *subCircuit) InsertFields() string {
	return "sci,cid,sub_circuit_id,note"
}

func (o *subCircuit) KeyField() string {
	return "sci"
}

func (o *subCircuit) KeyName() string {
	return "SCI"
}

func (o *subCircuit) Names() []string {
	return []string{"CID", "SubID", "Note"}
}

func (o *subCircuit) ModifiedBy(user int64, t time.Time) {
}

//
// circuitList DBObject generator
//
func (o circuitList) NewObj() interface{} {
	return new(circuitList)
}

//
// circuitList DBObject interface functions
//
func (o *circuitList) InsertValues() []interface{} {
	return []interface{}{o.Site, o.CircuitID, o.SubID, o.ASideXConn, o.ZSideXConn, o.Note, o.STI, o.PRI, o.Provider, o.ASideHandoff, o.ZSideHandoff, o.SubNote}
}

func (o *circuitList) UpdateValues() []interface{} {
	return []interface{}{o.Site, o.CircuitID, o.SubID, o.ASideXConn, o.ZSideXConn, o.Note, o.STI, o.PRI, o.Provider, o.ASideHandoff, o.ZSideHandoff, o.SubNote, o.CID}
}

func (o *circuitList) MemberPointers() []interface{} {
	return []interface{}{&o.CID, &o.Site, &o.CircuitID, &o.SubID, &o.ASideXConn, &o.ZSideXConn, &o.Note, &o.STI, &o.PRI, &o.Provider, &o.ASideHandoff, &o.ZSideHandoff, &o.SubNote}
}

func (o *circuitList) Key() int64 {
	return o.CID
}

func (o *circuitList) SetID(id int64) {
	o.CID = id
}

func (o *circuitList) TableName() string {
	return "circuits"
}

func (o *circuitList) SelectFields() string {
	return "cid,site,circuit_id,sub_circuit_id,a_side_xcon,z_side_xcon,note,site,pri,provider,a_side_handoff,z_side_handoff,sub_note"
}

func (o *circuitList) InsertFields() string {
	return "cid,site,circuit_id,sub_circuit_id,a_side_xcon,z_side_xcon,note,site,pri,provider,a_side_handoff,z_side_handoff,sub_note"
}

func (o *circuitList) KeyField() string {
	return "cid"
}

func (o *circuitList) KeyName() string {
	return "CID"
}

func (o *circuitList) Names() []string {
	return []string{"Site", "CircuitID", "SubID", "ASideXConn", "ZSideXConn", "Note", "STI", "PRI", "Provider", "ASideHandoff", "ZSideHandoff", "SubNote"}
}

func (o *circuitList) ModifiedBy(user int64, t time.Time) {
}

//
// vlanProfile DBObject generator
//
func (o vlanProfile) NewObj() interface{} {
	return new(vlanProfile)
}

//
// vlanProfile DBObject interface functions
//
func (o *vlanProfile) InsertValues() []interface{} {
	return []interface{}{o.Name}
}

func (o *vlanProfile) UpdateValues() []interface{} {
	return []interface{}{o.Name, o.VPID}
}

func (o *vlanProfile) MemberPointers() []interface{} {
	return []interface{}{&o.VPID, &o.Name}
}

func (o *vlanProfile) Key() int64 {
	return o.VPID
}

func (o *vlanProfile) SetID(id int64) {
	o.VPID = id
}

func (o *vlanProfile) TableName() string {
	return "vlan_profiles"
}

func (o *vlanProfile) SelectFields() string {
	return "vpid,name"
}

func (o *vlanProfile) InsertFields() string {
	return "vpid,name"
}

func (o *vlanProfile) KeyField() string {
	return "vpid"
}

func (o *vlanProfile) KeyName() string {
	return "VPID"
}

func (o *vlanProfile) Names() []string {
	return []string{"Name"}
}

func (o *vlanProfile) ModifiedBy(user int64, t time.Time) {
}

//
// vlan DBObject generator
//
func (o vlan) NewObj() interface{} {
	return new(vlan)
}

//
// vlan DBObject interface functions
//
func (o *vlan) InsertValues() []interface{} {
	return []interface{}{o.Note, o.TS, o.STI, o.Name, o.Profile, o.Gateway, o.Route, o.Netmask, o.Starting, o.USR}
}

func (o *vlan) UpdateValues() []interface{} {
	return []interface{}{o.Note, o.TS, o.STI, o.Name, o.Profile, o.Gateway, o.Route, o.Netmask, o.Starting, o.USR, o.VLI}
}

func (o *vlan) MemberPointers() []interface{} {
	return []interface{}{&o.VLI, &o.Note, &o.TS, &o.STI, &o.Name, &o.Profile, &o.Gateway, &o.Route, &o.Netmask, &o.Starting, &o.USR}
}

func (o *vlan) Key() int64 {
	return o.VLI
}

func (o *vlan) SetID(id int64) {
	o.VLI = id
}

func (o *vlan) TableName() string {
	return "vlans"
}

func (o *vlan) SelectFields() string {
	return "vli,note,ts,sti,name,profile,gateway,route,netmask,starting,usr"
}

func (o *vlan) InsertFields() string {
	return "vli,note,ts,sti,name,profile,gateway,route,netmask,starting,usr"
}

func (o *vlan) KeyField() string {
	return "vli"
}

func (o *vlan) KeyName() string {
	return "VLI"
}

func (o *vlan) Names() []string {
	return []string{"Note", "TS", "STI", "Name", "Profile", "Gateway", "Route", "Netmask", "Starting", "USR"}
}

func (o *vlan) ModifiedBy(user int64, t time.Time) {
	o.USR = &user
	o.TS = t
}

//
// vlanView DBObject generator
//
func (o vlanView) NewObj() interface{} {
	return new(vlanView)
}

//
// vlanView DBObject interface functions
//
func (o *vlanView) InsertValues() []interface{} {
	return []interface{}{o.STI, o.Name, o.Site, o.Route, o.Netmask, o.Note, o.Profile, o.Gateway, o.Starting, o.TS, o.USR}
}

func (o *vlanView) UpdateValues() []interface{} {
	return []interface{}{o.STI, o.Name, o.Site, o.Route, o.Netmask, o.Note, o.Profile, o.Gateway, o.Starting, o.TS, o.USR, o.VLI}
}

func (o *vlanView) MemberPointers() []interface{} {
	return []interface{}{&o.VLI, &o.STI, &o.Name, &o.Site, &o.Route, &o.Netmask, &o.Note, &o.Profile, &o.Gateway, &o.Starting, &o.TS, &o.USR}
}

func (o *vlanView) Key() int64 {
	return o.VLI
}

func (o *vlanView) SetID(id int64) {
	o.VLI = id
}

func (o *vlanView) TableName() string {
	return "vlans_view"
}

func (o *vlanView) SelectFields() string {
	return "vli,sti,name,site,route,netmask,note,profile,gateway,starting,ts,usr"
}

func (o *vlanView) InsertFields() string {
	return "vli,sti,name,site,route,netmask,note,profile,gateway,starting,ts,usr"
}

func (o *vlanView) KeyField() string {
	return "vli"
}

func (o *vlanView) KeyName() string {
	return "VLI"
}

func (o *vlanView) Names() []string {
	return []string{"STI", "Name", "Site", "Route", "Netmask", "Note", "Profile", "Gateway", "Starting", "TS", "USR"}
}

func (o *vlanView) ModifiedBy(user int64, t time.Time) {
	o.USR = &user
	o.TS = t
}

//
// pxeDevice DBObject generator
//
func (o pxeDevice) NewObj() interface{} {
	return new(pxeDevice)
}

//
// pxeDevice DBObject interface functions
//
func (o *pxeDevice) InsertValues() []interface{} {
	return []interface{}{o.Profile, o.MAC, o.IPMI, o.RID, o.Site, o.RU, o.Hostname, o.STI, o.Rack, o.IP, o.Note}
}

func (o *pxeDevice) UpdateValues() []interface{} {
	return []interface{}{o.Profile, o.MAC, o.IPMI, o.RID, o.Site, o.RU, o.Hostname, o.STI, o.Rack, o.IP, o.Note, o.DID}
}

func (o *pxeDevice) MemberPointers() []interface{} {
	return []interface{}{&o.DID, &o.Profile, &o.MAC, &o.IPMI, &o.RID, &o.Site, &o.RU, &o.Hostname, &o.STI, &o.Rack, &o.IP, &o.Note}
}

func (o *pxeDevice) Key() int64 {
	return o.DID
}

func (o *pxeDevice) SetID(id int64) {
	o.DID = id
}

func (o *pxeDevice) TableName() string {
	return "pxedevice"
}

func (o *pxeDevice) SelectFields() string {
	return "did,profile,mac,ipmi,rid,site,ru,hostname,sti,rack,ip,note"
}

func (o *pxeDevice) InsertFields() string {
	return "did,profile,mac,ipmi,rid,site,ru,hostname,sti,rack,ip,note"
}

func (o *pxeDevice) KeyField() string {
	return "did"
}

func (o *pxeDevice) KeyName() string {
	return "DID"
}

func (o *pxeDevice) Names() []string {
	return []string{"Profile", "MAC", "IPMI", "RID", "Site", "RU", "Hostname", "STI", "Rack", "IP", "Note"}
}

func (o *pxeDevice) ModifiedBy(user int64, t time.Time) {
}
